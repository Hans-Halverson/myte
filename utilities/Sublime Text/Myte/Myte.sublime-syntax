%YAML 1.2
---
name: Myte
file_extensions: [mt]
scope: source.mt

variables:
  # Pattern for all possible identifiers
  ident: '[A-Za-z_][A-Za-z0-9_]*'
  # Pattern for all capitalized identifiers
  capIdent: '[A-Z][A-Za-z0-9_]*'
  # Keywords that pull context out of an expression
  endOfExpression: '(?=\b(package|import|type|trait|implement|def|sig|static|let|const|do|while|for|forEach|return|continue|break)\b|}|,)'
  # Keywords that pull context back to the top level
  endOfTopLevel: '(?=\b(package|import|type|trait|implement|def|let|const)\b)'
  
contexts:
  main:
    - include: comments
    # Package declarations
    - match: '(package)\s+((?:{{ident}}::)*{{ident}})'
      captures:
        1: keyword.other
        2: entity.name.package
    # Import statements
    - match: '(import)\s+((?:{{ident}}::)*{{ident}})'
      captures:
        1: keyword.other
    - match: '\bas\b'
      scope: keyword.other
    # Type definitions
    - match: '(type)\s+({{ident}})'
      captures:
        1: keyword.other
        2: storage.type
      push: [typeDefinition, optionalGenericParameters]
    # Trait definitions
    - match: '(trait)\s+({{ident}})'
      captures:
        1: keyword.other
        2: storage.type
      push: [traitDefinition, optionalGenericParameters]
    # Type implementations
    - match: '(implement)\s+({{ident}})'
      captures:
        1: keyword.other
        2: storage.type
      push: [typeImplementation, optionalExtends, optionalGenericParameters]
    - include: functionDefinition
    - include: variableDefinition

  comments:
    # Single line comments
    - match: '//.*$'
      scope: comment.line
    # Block comments
    - match: '/\*'
      scope: comment.block
      push: blockComment

  blockComment:
    - match: '\*/'
      scope: comment.block
      pop: true
    - match: '.'
      scope: comment.block

  optionalGenericParameters:
    - include: comments
    - match: '<'
      set:
        - include: comments
        - match: '{{ident}}'
          scope: storage.type
        - match: '>'
          pop: true
    - match: ''
      pop: true

  typeDefinition:
    - include: comments
    - match: '='
      scope: keyword.operator
      set:
        - include: comments
        - match: '{{endOfTopLevel}}'
          pop: true
        - match: '\|'
          scope: keyword.operator
        - match: '({{ident}})\s*\('
          captures:
            1: entity.name.type
          push: tupleVariantDefinition
        - match: '({{ident}})\s*{'
          captures:
            1: entity.name.type
          push: recordVariantDefinition
        - match: '{{ident}}'
          scope: entity.name.type

  tupleVariantDefinition:
    - include: comments
    - match: '\)'
      pop: true
    - match: ','
      scope: punctuation.separator
    - include: type

  recordVariantDefinition:
    - include: comments
    - match: '}'
      pop: true
    - match: '((?:mut\s+)?)({{ident}})\s*(:)'
      captures:
        1: storage.modifier
        2: variable.other.member
        3: punctuation.separator
      set:
        - include: comments
        - match: ','
          scope: punctuation.separator
          set: recordVariantDefinition
        - match: '}'
          pop: true
        - include: type

  traitDefinition:
    - include: comments
    - match: '{'
      set:
        - include: comments
        - include: sigDefinition
        - include: functionDefinition
        - match: '}'
          pop: true

  typeImplementation:
    - include: comments
    - match: '{'
      set:
      - include: comments
      - include: functionDefinition
      - match: '}'
        pop: true

  sigDefinition:
    - include: comments
    - match: '((?:static\s+)?)((?:sig))\s+({{ident}})\('
      captures:
        1: storage.modifier
        2: keyword.other
        3: entity.name.function
      push: sigArgs

  sigArgs:
    - include: comments
    - match: '\)'
      set: sigReturnType
    - match: ','
      scope: punctuation.separator
    - include: type

  sigReturnType:
    - include: comments
    - match: '(?=\b(sig|def|static)\b|})'
      pop: true
    - match: ':'
      scope: punctuation.separator
      set:
        - match: (?=\s*(?:sig|def|static|}))
          pop: true
        - include: type

  functionDefinition:
    - include: comments
    - match: '((?:static\s+)?)((?:def))\s+({{ident}})\('
      captures:
        1: storage.modifier
        2: keyword.other
        3: entity.name.function
      push: functionDefinitionArgs

  functionDefinitionArgs:
    - include: comments
    - match: '\)'
      set: functionDefinitionReturnType
    - match: ','
      scope: punctuation.separator
    - match: ({{ident}})\s*(:)
      captures:
        1: variable.parameter
        2: punctuation.separator
      set:
        - include: comments
        - match: ','
          scope: punctuation.separator
          set: functionDefinitionArgs
        - match: '\)'
          set: functionDefinitionReturnType
        - include: type
    - match: '{{ident}}'
      scope: variable.parameter

  functionDefinitionReturnType:
    - include: comments
    - match: ':'
      scope: punctuation.separator
      set:
        - include: comments
        - match: '{'
          set: functionBody
        - match: '='
          set:
            - include: comments
            - match: '{{endOfExpression}}'
              pop: true
            - include: exprs
        - include: type
    - match: '{'
      set: functionBody
    - match: '='
      set:
        - include: comments
        - match: '{{endOfExpression}}'
          pop: true
        - include: exprs

  functionBody:
    - include: comments
    - match: '}'
      pop: true
    - include: statements

  variableDefinition:
    - include: comments
    - match: '\b(let|const)\b\s+'
      scope: keyword.other
      push:
        - include: comments
        - match: '{{ident}}\s*{'
          push:
            - include: comments
            - match: '}'
              pop: true
        - match: ':'
          set:
            - include: comments
            - match: '='
              scope: keyword.operator
              set:
                - match: '{{endOfExpression}}'
                  pop: true
                - include: exprs
            - include: type
        - match: '='
          scope: keyword.operator
          set:
            - match: '{{endOfExpression}}'
              pop: true
            - include: exprs

  type:
    - include: comments
    - match: '\('
      push:
        - match: '\)'
          pop: true
        - include: type
    - match: '\<'
      push:
        - match: '\>'
          pop: true
        - include: type
    - match: '({{ident}})\s*(-\>)'
      captures:
        1: storage.type
        2: punctuation.separator
    - match: '{{ident}}'
      scope: storage.type

  optionalExtends:
    - include: comments
    - match: 'extends'
      scope: keyword.other
      set:
        - include: comments
        - match: '({{ident}})\s*\<'
          captures:
            1: storage.type
          push:
            - match: '>'
              pop: true
            - include: type
        - match: '{{ident}}'
          scope: storage.type
        - match: ','
          scope: punctuation.separator
        - match: '(?={)'
          pop: true
    - match: '(?={)'
      pop: true

  statements:
    - include: comments
    - match: '\b(return|break|continue)\b'
      scope: keyword.control
    - include: forEach
    - match: '\b(for|while|do)\b'
      scope: keyword.control
    - include: functionDefinition
    - include: variableDefinition
    - include: exprs

  exprs:
    - include: comments
    - include: literals
    # Map literals
    - match: '\[\|'
      push:
        - match: '\|\]'
          pop: true
        - match: '-\>'
          scope: punctuation.separator
        - match: ','
          scope: punctuation.separator
        - include: exprs
    # Set literals
    - match: '{\|'
      push:
        - match: '\|}'
          pop: true
        - match: ','
          scope: punctuation.separator
        - include: exprs
    # Vector literals
    - match: '\['
      push:
        - match: '\]'
          pop: true
        - match: ','
          scope: punctuation.separator
        - include: exprs
    # Lambda expressions
    - match: '(\bfun\b)'
      scope: keyword.other
      set: lambdaExpressionArgs
    # Blocks
    - match: '{'
      push:
        - match: '}'
          pop: true
        - include: statements
    # Parenthesized groups
    - match: '\('
      push:
        - match: '\)'
          pop: true
        - include: statements
    # Indexed access
    - match: '\['
      push:
        - match: '\]'
          pop: true
        - include: statements
    # If expressions
    - match : '\b(if|else)\b'
      scope: keyword.control.conditional
    # Match expressions
    - match: '\bmatch\b'
      scope: keyword.control
    # All operators
    - match: '\.|\+|\-|\*|\/|\^|%|!|=|\<|\>|==|!=|\<=|\>=|&&|\|\|'
      scope: keyword.operator
    # Accessing scopes
    - match: '::'
      scope: punctuation.accessor
    # Match cases trigger a new context for highlighting patterns
    - match: '\|'
      scope: keyword.operator
      push: matchPattern
    # Tuple type constructors
    - match: '({{capIdent}})\s*\('
      captures:
        1: entity.name.type
      push:
        - match: '\)'
          pop: true
        - include: exprs
    # Record type constructors
    - match: '({{capIdent}})\s*{'
      captures:
        1: entity.name.type
      push:
        - match: '}'
          pop: true
        - include: exprs
    # Function calls
    - match: '({{ident}})\s*\('
      captures:
        1: variable.function
      push:
        - match: '\)'
          pop: true
        - include: exprs
    # All identifiers should be matched
    - match: '{{capIdent}}'
      scope: entity.name.type
    - match: '{{ident}}'
      scope: variable.other

  literals:
    # Integer literals
    - match: '((?:\+|-)?)(\d+(?:.\d+(?:(?:e|E)(?:\+|-)\d+)?)?)'
      captures:
        1: keyword.operator
        2: constant.numeric
    # String literals
    - match: '"[^"]*"'
      scope: string
    # Bool literals
    - match: '\b(true|false)\b'
      scope: constant.language

  forEach:
    - match: '\b(forEach)\b\s*\('
      captures:
        1: keyword.control
      push:
        - include: comments
        - match: '\bin\b'
          scope: keyword.other
          set:
            - include: comments
            - match: '\)'
              pop: true
            - include: exprs
        - match: ':'
          scope: punctuation.separator
          set:
            - include: comments
            - match: '\bin\b'
              scope: keyword.other
              set:
                - include: comments
                - match: '\)'
                  pop: true
                - include: exprs
            - include: type
        - include: matchPattern

  matchPattern:
    - include: comments
    - match: '\bwhen\b'
      scope: keyword.other
      set: matchWhenGuard
    - match: '-\>'
      scope: keyword.operator
      pop: true
    - include: literals
    # Tuple variant patterns
    - match: '({{ident}})\s*\('
      captures:
        1: entity.name.type
    # Record variant patterns
    - match: '({{ident}})\s*{'
      captures:
        1: entity.name.type
      push: matchRecordPattern
    # Capital identifiers are variant names
    - match: '{{capIdent}}'
      scope: entity.name.type
    # All other identifiers are new variables created by the pattern
    - match: '{{ident}}'
      scope: variable.parameter
    # Grouped patterns
    - match: '\('
      push:
        - match: '\)'
          pop: true
        - include: matchPattern
    # Map patterns
    - match: '\[\|'
      push:
        - match: '\|\]'
          pop: true
        - match: '-\>'
          scope: punctuation.separator
        - match: ','
          scope: punctuation.separator
        - include: matchPattern
    # Set patterns
    - match: '{\|'
      push:
        - match: '\|}'
          pop: true
        - match: ','
          scope: punctuation.separator
        - include: matchPattern
    # Vector patterns
    - match: '\['
      push:
        - match: '\]'
          pop: true
        - match: ','
          scope: punctuation.separator
        - include: matchPattern

  matchRecordPattern:
    - include: comments
    - match: '}'
      pop: true
    - match: '({{ident}})\s*(:)'
      captures:
        1: variable.other.member
        2: punctuation.separator
      set:
        - include: comments
        - match: ','
          scope: punctuation.separator
          set: matchRecordPattern
        - match: '}'
          pop: true
        - include: matchPattern

  matchWhenGuard:
    - include: comments
    - match: '-\>'
      scope: keyword.operator
      pop: true

  lambdaExpressionArgs:
    - include: comments
    - match: '\('
      set:
        - include: comments
        - match: '\)'
          set:
          - include: comments
          - match: '-\>'
            scope: keyword.other
            set:
              - match: '{{endOfExpression}}'
                pop: true
              - include: exprs

        - include: lambdaExpressionInnerArgs
    - match: ''
      set: lambdaExpressionInnerArgs

  lambdaExpressionInnerArgs:
    - include: comments
    - match: ','
      scope: punctuation.separator
    - match: ({{ident}})\s*(:)
      captures:
        1: variable.parameter
        2: punctuation.separator
      set:
        - include: comments
        - match: ','
          scope: punctuation.separator
          set: lambdaExpressionInnerArgs
        - match: '\)|(?=-\>)'
          set: functionDefinitionReturnType
        - include: type
    - match: '{{ident}}'
      scope: variable.parameter
    - match: '-\>'
      scope: keyword.other
      set:
        - match: '{{endOfExpression}}'
          pop: true
        - include: exprs

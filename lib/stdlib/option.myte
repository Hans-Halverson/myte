module std.option

import std.bool.Bool

pub type Option<T> =
  | None
  | Some (T)

methods Option<T> {
  fun isNone(): Bool =
    match (this) {
      | None -> true
      | Some _ -> false
    }

  fun isSome(): Bool =
    match (this) {
      | None -> false
      | Some _ -> true
    }
  
  fun getOrDefault(default: T): T =
    match (this) {
      | None -> default
      | Some (x) -> x
    }

  fun map<U>(f: (T) -> U): Option<U> =
    match (this) {
      | None -> None
      | Some (x) -> Some (f(x))
    }
  
  fun flatMap<U>(f: (T) -> Option<U>): Option<U> =
    match (this) {
      | None -> None
      | Some (x) -> f(x)
    }
  
  fun filter(predicate: (T) -> Bool): Option<T> =
    match (this) {
      | None -> this
      | Some (x) ->
        if (predicate(x)) {
          this
        } else {
          None
        }
    }
}
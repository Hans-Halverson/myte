module std.long

import std.bool.Bool
import std.byte.Byte
import std.double.Double
import std.hash.Hashable
import std.int.Int
import std.iterator.Iterator
import std.ops.Equatable
import std.option.{None, Option, Some}
import std.string.{String, ToString}

pub builtin type Long

pub val LONG_MIN: Long = -9223372036854775808

pub val LONG_MAX: Long = 9223372036854775807

methods Long {
  implements Equatable

  pub builtin override fun equals(other: Long): Bool
}

methods Long {
  implements Hashable

  pub override fun hash(): Int = this.toInt() ^ (this >>> 32).toInt()
}

methods Long {
  implements ToString

  pub builtin fun toByte(): Byte

  pub builtin fun toInt(): Int

  pub builtin fun toDouble(): Double

  pub override fun toString(): String {
    var n = this;
    // Special case max long, as it cannot be negated
    if (n == LONG_MIN) {
      return "-9223372036854775808";
    }

    val str = String.new();
    val isNegative = n < 0;
    if (isNegative) {
      n = -n;
    }

    // Add digits one at a time to string
    while (n > 9) {
      str.push((n % 10).toByte() + '0');
      n /= 10;
    }

    // Add last digit to string
    str.push(n.toByte() + '0');

    // Add negative sign
    if (isNegative) {
      str.push('-');
    }

    str.reverse();

    return str;
  }
}

methods Long {
  /**
   * Create an iterator starting at this number and ending at the end number, exclusive.
   */
  pub fun to(end: Long): LongRange = LongRange { current: this, end }

  /**
   * Create an iterator starting at this number and ending at the end number, inclusive.
   */
  pub fun toInclusive(end: Long): LongRangeInclusive = LongRangeInclusive { current: this, end }

  /**
   * Create an iterator starting at this number and ending at the end number, exclusive,
   * stepping by the given amount each iteration.
   */
  pub fun stepTo(end: Long, step: Long): LongRangeWithStep {
    return LongRangeWithStep { current: this, end, step };
  }

  /**
   * Create an iterator starting at this number and ending at the end number, exclusive,
   * stepping down by the given amount each iteration.
   */
  pub fun stepDownTo(end: Long, step: Long): LongRangeWithStepDown {
    return LongRangeWithStepDown { current: this, end, step };
  }
}

pub type LongRange {
  var current: Long,
  end: Long,
}

methods LongRange {
  implements Iterator<Long>

  pub override fun next(): Option<Long> {
    val current = this.current;
    if (current >= this.end) {
      return None;
    }

    this.current = current + 1;

    return Some (current);
  }
}

pub type LongRangeInclusive {
  var current: Long,
  end: Long,
}

methods LongRangeInclusive {
  implements Iterator<Long>

  pub override fun next(): Option<Long> {
    val current = this.current;
    if (current > this.end) {
      return None;
    }

    this.current = current + 1;

    return Some (current);
  }
}

pub type LongRangeWithStep {
  var current: Long,
  end: Long,
  step: Long,
}

methods LongRangeWithStep {
  implements Iterator<Long>

  pub override fun next(): Option<Long> {
    val current = this.current;
    if (current >= this.end) {
      return None;
    }

    this.current = current + this.step;

    return Some (current);
  }
}

pub type LongRangeWithStepDown {
  var current: Long,
  end: Long,
  step: Long,
}

methods LongRangeWithStepDown {
  implements Iterator<Long>

  pub override fun next(): Option<Long> {
    val current = this.current;
    if (current <= this.end) {
      return None;
    }

    this.current = current - this.step;

    return Some (current);
  }
}
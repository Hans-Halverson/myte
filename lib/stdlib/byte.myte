module std.byte

import std.bool.Bool
import std.double.Double
import std.hash.Hashable
import std.int.Int
import std.iterator.Iterator
import std.long.Long
import std.ops.Equatable
import std.option.{None, Option, Some}
import std.string.{String, ToString}

pub builtin type Byte

pub val BYTE_MIN: Byte = -128

pub val BYTE_MAX: Byte = 127

methods Byte {
  implements Equatable

  pub builtin override fun equals(other: Byte): Bool
}

methods Byte {
  implements Hashable

  pub override fun hash(): Int = this.toInt()
}

methods Byte {
  implements ToString

  pub builtin fun toInt(): Int

  pub builtin fun toLong(): Long

  pub builtin fun toDouble(): Double

  pub override fun toString(): String {
    var n = this;
    // Special case min byte, as it cannot be negated
    if (n == BYTE_MIN) {
      return "-128";
    }

    val str = String.new();
    val isNegative = n < 0;
    if (isNegative) {
      n = -n;
    }

    // Add digits one at a time to string
    while (n > 9) {
      str.push((n % 10) + '0');
      n /= 10;
    }

    // Add last digit to string
    str.push(n + '0');

    // Add negative sign
    if (isNegative) {
      str.push('-');
    }

    str.reverse();

    return str;
  }
}

methods Byte {
  /**
   * Create an iterator starting at this number and ending at the end number, exclusive.
   */
  pub fun to(end: Byte): ByteRange = ByteRange { current: this, end }

  /**
   * Create an iterator starting at this number and ending at the end number, inclusive.
   */
  pub fun toInclusive(end: Byte): ByteRangeInclusive = ByteRangeInclusive { current: this, end }

  /**
   * Create an iterator starting at this number and ending at the end number, exclusive,
   * stepping by the given amount each iteration.
   */
  pub fun stepTo(end: Byte, step: Byte): ByteRangeWithStep {
    return ByteRangeWithStep { current: this, end, step };
  }

  /**
   * Create an iterator starting at this number and ending at the end number, exclusive,
   * stepping down by the given amount each iteration.
   */
  pub fun stepDownTo(end: Byte, step: Byte): ByteRangeWithStepDown {
    return ByteRangeWithStepDown { current: this, end, step };
  }
}

type ByteRange {
  var current: Byte,
  end: Byte,
}

methods ByteRange {
  implements Iterator<Byte>

  pub override fun next(): Option<Byte> {
    val current = this.current;
    if (current >= this.end) {
      return None;
    }

    this.current = current + 1;

    return Some (current);
  }
}

type ByteRangeInclusive {
  var current: Byte,
  end: Byte,
}

methods ByteRangeInclusive {
  implements Iterator<Byte>

  pub override fun next(): Option<Byte> {
    val current = this.current;
    if (current > this.end) {
      return None;
    }

    this.current = current + 1;

    return Some (current);
  }
}

type ByteRangeWithStep {
  var current: Byte,
  end: Byte,
  step: Byte,
}

methods ByteRangeWithStep {
  implements Iterator<Byte>

  pub override fun next(): Option<Byte> {
    val current = this.current;
    if (current >= this.end) {
      return None;
    }

    this.current = current + this.step;

    return Some (current);
  }
}

type ByteRangeWithStepDown {
  var current: Byte,
  end: Byte,
  step: Byte,
}

methods ByteRangeWithStepDown {
  implements Iterator<Byte>

  pub override fun next(): Option<Byte> {
    val current = this.current;
    if (current <= this.end) {
      return None;
    }

    this.current = current - this.step;

    return Some (current);
  }
}
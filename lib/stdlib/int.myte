module std.int

import std.bool.Bool
import std.byte.Byte
import std.double.Double
import std.hash.Hashable
import std.iterator.Iterator
import std.long.Long
import std.ops.Equatable
import std.option.{None, Option, Some}
import std.string.{String, ToString}

@(Builtin)
pub type Int

pub val INT_MIN: Int = -2147483648

pub val INT_MAX: Int = 2147483647

methods Int {
  implements Equatable

  @(Builtin)
  pub override fun equals(other: Int): Bool
}

methods Int {
  implements Hashable

  pub override fun hash(): Int = this
}

methods Int {
  @(Builtin)
  pub fun toByte(): Byte

  @(Builtin)
  pub fun toLong(): Long

  @(Builtin)
  pub fun toDouble(): Double
}

methods Int {
  implements ToString

  pub override fun toString(): String {
    var n = this;
    // Special case max int, as it cannot be negated
    if (n == INT_MIN) {
      return "-2147483648";
    }

    val str = String.new();
    val isNegative = n < 0;
    if (isNegative) {
      n = -n;
    }

    // Add digits one at a time to string
    while (n > 9) {
      str.push((n % 10).toByte() + '0');
      n /= 10;
    }

    // Add last digit to string
    str.push(n.toByte() + '0');

    // Add negative sign
    if (isNegative) {
      str.push('-');
    }

    str.reverse();

    return str;
  }
}

methods Int {
  /**
   * Create an iterator starting at this number and ending at the end number, exclusive.
   */
  pub fun to(end: Int): IntRange = IntRange { current: this, end }

  /**
   * Create an iterator starting at this number and ending at the end number, inclusive.
   */
  pub fun toInclusive(end: Int): IntRangeInclusive = IntRangeInclusive { current: this, end }

  /**
   * Create an iterator starting at this number and ending at the end number, exclusive,
   * stepping by the given amount each iteration.
   */
  pub fun stepTo(end: Int, step: Int): IntRangeWithStep {
    return IntRangeWithStep { current: this, end, step };
  }

  /**
   * Create an iterator starting at this number and ending at the end number, exclusive,
   * stepping down by the given amount each iteration.
   */
  pub fun stepDownTo(end: Int, step: Int): IntRangeWithStepDown {
    return IntRangeWithStepDown { current: this, end, step };
  }
}

// TODO: Make these types private once return type of function can be a trait to hide type
pub type IntRange {
  var current: Int,
  end: Int,
}

methods IntRange {
  implements Iterator<Int>

  pub override fun next(): Option<Int> {
    val current = this.current;
    if (current >= this.end) {
      return None;
    }

    this.current = current + 1;

    return Some (current);
  }
}

pub type IntRangeInclusive {
  var current: Int,
  end: Int,
}

methods IntRangeInclusive {
  implements Iterator<Int>

  pub override fun next(): Option<Int> {
    val current = this.current;
    if (current > this.end) {
      return None;
    }

    this.current = current + 1;

    return Some (current);
  }
}

pub type IntRangeWithStep {
  var current: Int,
  end: Int,
  step: Int,
}

methods IntRangeWithStep {
  implements Iterator<Int>

  pub override fun next(): Option<Int> {
    val current = this.current;
    if (current >= this.end) {
      return None;
    }

    this.current = current + this.step;

    return Some (current);
  }
}

pub type IntRangeWithStepDown {
  var current: Int,
  end: Int,
  step: Int,
}

methods IntRangeWithStepDown {
  implements Iterator<Int>

  pub override fun next(): Option<Int> {
    val current = this.current;
    if (current <= this.end) {
      return None;
    }

    this.current = current - this.step;

    return Some (current);
  }
}

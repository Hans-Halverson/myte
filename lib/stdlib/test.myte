module std.test

import std.bool.Bool
import std.hash.Hashable
import std.map.Map
import std.never.Never
import std.ops.Equatable
import std.option.{None, Option, Some}
import std.result.{Error, Ok, Result}
import std.set.Set
import std.sys.exit
import std.vec.Vec

pub fun fail(): Never {
  exit(1);
}

pub fun assertEqual<T: Equatable>(actual: T, expected: T) {
  if (actual != expected) {
    fail();
  }
}

pub fun assertNotEqual<T: Equatable>(actual: T, expected: T) {
  if (actual == expected) {
    fail();
  }
}

pub fun assertTrue(expr: Bool) {
  if (!expr) {
    fail();
  }
}

pub fun assertFalse(expr: Bool) {
  if (expr) {
    fail();
  }
}

pub fun assertSome<T: Equatable>(actual: Option<T>, expected: T) {
  match (actual) {
    | None -> fail()
    | Some (actual) ->
      if (actual != expected) {
        fail();
      }
  }
}

pub fun assertNone<T>(actual: Option<T>) {
  if (actual.isSome()) {
    fail();
  }
}

pub fun assertOk<T: Equatable, E>(actual: Result<T, E>, expected: T) {
  match (actual) {
    | Error _ -> fail()
    | Ok (actual) ->
      if (actual != expected) {
        fail();
      }
  }
}

pub fun assertError<T, E: Equatable>(actual: Result<T, E>, expected: E) {
  match (actual) {
    | Ok _ -> fail()
    | Error (actual) ->
      if (actual != expected) {
        fail();
      }
  }
}

pub fun assertVecEqual<T: Equatable>(actual: Vec<T>, expected: Vec<T>) {
  assertEqual(actual.size, expected.size);

  for (i in 0.to(actual.size)) {
    assertEqual(actual[i], expected[i]);
  }
}

pub fun assertMapEqual<K: Equatable & Hashable, V: Equatable>(actual: Map<K, V>, expected: Map<K, V>) {
  assertEqual(actual.size, expected.size);

  for ((key, expectedValue) in expected.entries()) {
    match (actual[key]) {
      | None -> fail()
      | Some (actualValue) -> assertEqual(actualValue, expectedValue)
    }
  }
}

pub fun assertSetEqual<T: Equatable & Hashable>(actual: Set<T>, expected: Set<T>) {
  assertEqual(actual.size(), expected.size());

  for (element in expected) {
    assertTrue(actual.contains(element));
  }
}
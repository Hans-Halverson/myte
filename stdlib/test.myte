module std.test

import std.bool.Bool
import std.ops.Equatable
import std.option.{None, Option, Some}
import std.sys.exit
import std.vec.Vec

fun fail() {
  exit(1);
}

fun assertEqual<T: Equatable>(actual: T, expected: T) {
  if (actual != expected) {
    fail();
  }
}

fun assertNotEqual<T: Equatable>(actual: T, expected: T) {
  if (actual == expected) {
    fail();
  }
}

fun assertTrue(expr: Bool) {
  if (!expr) {
    fail();
  }
}

fun assertFalse(expr: Bool) {
  if (expr) {
    fail();
  }
}

fun assertSome<T: Equatable>(actual: Option<T>, expected: T) {
  match (actual) {
    | None -> fail()
    | Some (actual) ->
      if (actual != expected) {
        fail();
      }
  }
}

fun assertNone<T>(actual: Option<T>) {
  if (actual.isSome()) {
    fail();
  }
}

fun assertVecEqual<T: Equatable>(actual: Vec<T>, expected: Vec<T>) {
  assertEqual(actual.size, expected.size);

  for (i in 0.to(actual.size)) {
    assertEqual(actual[i], expected[i]);
  }
}
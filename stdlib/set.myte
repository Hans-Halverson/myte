module std.set

import std.bool.Bool
import std.int.Int
import std.iterator.{Iterable, Iterator}
import std.hash.Hashable
import std.map.{Map, MapIterator, MapKeysIterator}
import std.ops.Equatable
import std.unit.Unit

/**
 * Set that supports membership operations. Implemented as a hash set.
 */
type Set<T: Equatable & Hashable> (Map<T, Unit>)

methods Set<T: Equatable & Hashable> {

  /**
   * Create a new, empty set.
   */
  static fun new<T: Equatable & Hashable>(): Set<T> = Set (Map.new())

  /**
   * Return the number of items in the set.
   */
  fun size(): Int = this[0].size

  /**
   * Return whether the set contains the specified item.
   */
  fun contains(item: T): Bool = this[0].containsKey(item)

  /**
   * Add an item to the set.
   */
  fun add(item: T) = this[0].add(item, ())

  /**
   * Remove an item from the set, if such an item exists. Return whether the item was present in
   * the map.
   */
  fun remove(item: T): Bool = this[0].remove(item)
}

methods Set<T: Equatable & Hashable> {
  implements Iterable<T>

  override fun toIterator(): MapKeysIterator<T, Unit> {
    val Map { data, capacity, ... } = this[0];
    return MapKeysIterator (MapIterator { data, capacity, index: 0 });
  }
}
module test

fun paramTypes() {
  fn (x: Int, y: Bool) {
    // Failure to print type
    (x: Unit);
    (y: Unit);

    // Success
    (x: Int);
    (y: Bool);

    fn (x: String, z: Byte) {
      // Failure to print type
      (x: Unit);
      (y: Unit);
      (z: Unit);

      // Success
      (x: String);
      (y: Bool);
      (z: Byte);
    };
  };
}

fun inferParamTypes() {
  // Intentionally print type to check inference through params and return
  ((fn (x) -> x)(true): Unit);
  ((fn (x, y) -> (y, x))(true, 1): Unit);
  ((fn (x, y) -> (y, x))(1, true): Unit);

  // Success
  val x: (Int) -> Bool = fn (x) -> x == 1;

  // Failure
  val x: (Int) -> Bool = fn (x) -> x == (1: Byte);
}

fun testHigherOrderFunction() {
  val x: Vec<Int> = [];
  val y = x.map(fn (x) -> x == 1);
  // Intentionally print type to verify inference
  (y: Unit);
}

fun main() {}
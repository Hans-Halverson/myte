module Exhaustive

import std.sys.abort

// Functions with Unit return type do not need exhaustive returns
fun unit1() {}

fun unit2(): Unit {}

fun unit3(): (((Unit))) {}

type alias UnitAlias = Unit

fun unit4(): UnitAlias {}

fun unit5() {
  fn () {};
  fn (): Unit {};
  fn (): (((Unit))) {};
  fn (): UnitAlias {};
}

// Functions with Never return type do not need exhaustive returns
fun never1(): Never {
  abort();
}

type alias NeverAlias = Never

fun never2(): NeverAlias {
  abort();
}

fun never3() {
  fn (): Never {
    abort();
  };

  fn (): NeverAlias {
    abort();
  };
}

// Functions with expression bodies do not need exhaustive returns
fun test4(): Int = 1

// All other functions require exhaustive returns
fun test5(): Int {
  return 1;
}

fun test6(): Int {
  1;
  2;
  return 3;
}

fun test7(): Int {
  {
    1;
    return 2;
  }
}

fun test8(): Int {
  if (true) {
    return 1;
  } else {
    return 2;
  }
}

fun test9(): Int {
  if (true) {
    return 1;
  }
  2;
  return 3;
}

fun test10(): Int {
  if (true) {}
  2;
  return 3;
}

fun testMatchSingleCase(): Int {
  val _ = 1;
  match (1) {
    | _ -> return 1
  }
}

fun testMatchMultipleCases(): Int {
  val _ = 1;

  match (1) {
    | _ -> return 1
    | _ -> return 2
    | _ -> return 3
  }
}

fun testMatchNested(): Int {
  val _ = 1;
  match (1) {
    | _ -> return 1
    | _ -> match (2) {
      | _ -> return 2
      | _ -> return 3
    }
  }
}

fun testExhaustiveAnonymousFunction() {
  fn (): Int {
    if (true) {
      return 1;
    } else {
      return 2;
    }
  };

  fn (): Int {
    match (1) {
      | _ -> return 1
      | _ -> match (2) {
        | _ -> return 2
        | _ -> return 3
      }
    }
  };
}

fun main() {}
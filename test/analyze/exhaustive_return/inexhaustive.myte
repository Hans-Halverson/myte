module Inexhaustive

fun test1(): Int {}

fun test2(): Int {
  1;
}

fun test3(): Int {
  if (true) {
    1;
  }
}

fun test4(): Int {
  if (true) {
    return 1;
  }
}

fun test5(): Int {
  if (true) {
    return 1;
  } else {
    2;
  }
}

fun test6(): Int {
  if (true) {
    1;
  } else {
    return 2;
  }
}

fun test7(): Int {
  val x = 1;
}

fun test8(): Int {
  fun bar(): Int = 1
}

fun test9(): Int {
  fun bar(): Int {}
  return 1;
}

fun test10(): Int {
  fun bar(): Int {
    fun baz(): Int {}
    return 1;
  }
  return 2;
}

fun testWhile1(): Int {
  while (true) {}
}

fun testWhile2(): Int {
  while (true) {
    return 1;
  }
}

fun testFor1(): Int {
  for (x in 1.to(2)) {}
}

fun testFor2(): Int {
  for (x in 1.to(2)) {
    return 1;
  }
}

fun testMatchSingleCase(): Int {
  val _ = 1;
  match (1) {
    | _ -> ()
  }
}

fun testMatchMultipleCases(): Int {
  val _ = 1;
  match (1) {
    | _ -> return 1
    | _ -> ()
    | _ -> return 3
  }
}

fun testMatchNested(): Int {
  val _ = 1;
  match (1) {
    | _ -> return 1
    | _ -> match (2) {
      | _ -> return 2
      | _ -> ()
    }
  }
}

type Unit (Int)

fun testShadowedUnitReturn() {}

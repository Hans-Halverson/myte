  .global _main

  .text
_main:
  leaq test.testBool(%rip), %rdi
  call test.use$Function$
  leaq test.testInt(%rip), %rdi
  call test.use$Function$
  leaq test.testLong(%rip), %rdi
  call test.use$Function$
  movl $0, %eax
  ret
test.testBool:
  push %rbx
  movl $8, %edi
  call _myte_alloc
  movq %rax, %rbx
  movl $1, (%rbx)
  movb $1, 4(%rbx)
  movb $0, 5(%rbx)
  movl (%rbx), %edi
  call test.useInt
  movb 4(%rbx), %dil
  call test.useBool
  movb 5(%rbx), %dil
  call test.useBool
  pop %rbx
  ret
test.testInt:
  push %rbx
  movl $12, %edi
  call _myte_alloc
  movq %rax, %rbx
  movl $1, (%rbx)
  movl $2, 4(%rbx)
  movl $3, 8(%rbx)
  movl (%rbx), %edi
  call test.useInt
  movl 4(%rbx), %edi
  call test.useInt
  movl 8(%rbx), %edi
  call test.useInt
  pop %rbx
  ret
test.testLong:
  push %rbx
  movl $24, %edi
  call _myte_alloc
  movq %rax, %rbx
  movl $1, (%rbx)
  movq $5, 8(%rbx)
  movq $6, 16(%rbx)
  movl (%rbx), %edi
  call test.useInt
  movq 8(%rbx), %rdi
  call test.useLong
  movq 16(%rbx), %rdi
  call test.useLong
  pop %rbx
  ret
test.use$Function$:
  movq %rdi, %rax
  ret
test.useBool:
  ret
test.useInt:
  ret
test.useLong:
  ret
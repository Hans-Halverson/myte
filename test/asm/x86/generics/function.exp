  .global _main

  .text
test.buildOption$Bool$:
  push %rbx
  movl %edi, %ebx
  movl $1, %edi
  call _myte_alloc
  movb %bl, (%rax)
  pop %rbx
  ret
test.buildOption$Int$:
  push %rbx
  movl %edi, %ebx
  movl $4, %edi
  call _myte_alloc
  movl %ebx, (%rax)
  pop %rbx
  ret
test.buildOption$Long$:
  push %rbx
  movq %rdi, %rbx
  movl $8, %edi
  call _myte_alloc
  movq %rbx, (%rax)
  pop %rbx
  ret
test.buildPair$Bool$Bool$:
  push %rbx
  push %r12
  movl %edi, %r12d
  movl %esi, %ebx
  movl $2, %edi
  call _myte_alloc
  movb %r12b, (%rax)
  movb %bl, 1(%rax)
  pop %r12
  pop %rbx
  ret
test.buildPair$Bool$Int$:
  push %rbx
  push %r12
  movl %edi, %r12d
  movl %esi, %ebx
  movl $8, %edi
  call _myte_alloc
  movb %r12b, (%rax)
  movl %ebx, 4(%rax)
  pop %r12
  pop %rbx
  ret
test.buildPair$Int$Int$:
  push %rbx
  push %r12
  movl %edi, %r12d
  movl %esi, %ebx
  movl $8, %edi
  call _myte_alloc
  movl %r12d, (%rax)
  movl %ebx, 4(%rax)
  pop %r12
  pop %rbx
  ret
_main:
  leaq test.testSingleTypeArg(%rip), %rdi
  call test.use$Function$
  leaq test.testTwoTypeArgs(%rip), %rdi
  call test.use$Function$
  movl $0, %eax
  ret
test.testSingleTypeArg:
  movb $1, %dil
  call test.buildOption$Bool$
  movl $5, %edi
  call test.buildOption$Int$
  movq $6, %rdi
  call test.buildOption$Long$
  ret
test.testTwoTypeArgs:
  movl $1, %edi
  movl $1, %esi
  call test.buildPair$Int$Int$
  movb $1, %dil
  movl $1, %esi
  call test.buildPair$Bool$Int$
  movb $1, %dil
  movb $1, %sil
  call test.buildPair$Bool$Bool$
  ret
test.use$Function$:
  movq %rdi, %rax
  ret
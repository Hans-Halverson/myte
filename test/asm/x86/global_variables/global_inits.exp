  .global _main
  .lcomm test.b, 1
  .lcomm test.f, 8
  .lcomm test.i, 4
  .lcomm test.l, 8

  .data
test.constantB:
  .byte 123
test.constantF:
  .quad test.getByte
test.constantI:
  .long 123
test.constantL:
  .quad 123

  .text
_init:
  call test.getByte
  movb %al, test.b(%rip)
  call test.getFunction
  movq %rax, test.f(%rip)
  call test.getInt
  movl %eax, test.i(%rip)
  call test.getLong
  movq %rax, test.l(%rip)
  ret
test.getByte:
  movb $22, %al
  ret
test.getFunction:
  leaq test.getByte(%rip), %rax
  ret
test.getInt:
  movl $23, %eax
  ret
test.getLong:
  movq $24, %rax
  ret
_main:
  movb $125, %dil
  call test.use$Byte$
  movl $125, %edi
  call test.use$Int$
  movl $125, %edi
  call test.use$Int$
  leaq test.getByte(%rip), %rdi
  call test.use$Function$
  movb test.constantB(%rip), %dil
  call test.use$Byte$
  movl test.constantI(%rip), %edi
  call test.use$Int$
  movq test.constantL(%rip), %rdi
  call test.use$Long$
  movq test.constantF(%rip), %rdi
  call test.use$Function$
  movb test.b(%rip), %dil
  call test.use$Byte$
  movl test.i(%rip), %edi
  call test.use$Int$
  movq test.l(%rip), %rdi
  call test.use$Long$
  movq test.f(%rip), %rdi
  call test.use$Function$
  leaq test.getByte(%rip), %rdi
  call test.use$Function$
  leaq test.getInt(%rip), %rdi
  call test.use$Function$
  leaq test.getLong(%rip), %rdi
  call test.use$Function$
  leaq test.getFunction(%rip), %rdi
  call test.use$Function$
  movl $0, %eax
  ret
test.use$Byte$:
  ret
test.use$Function$:
  ret
test.use$Int$:
  ret
test.use$Long$:
  ret
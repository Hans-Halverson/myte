  .global _main

  .text
_main:
  leaq test.testCompareRegisterImmediate(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareImmediateRegister(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareMemoryImmediate(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareImmediateMemory(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareMemoryMemory(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareMemoryRegister(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareRegisterMemory(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareRegisterRegister(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareByteRegs(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareByteRegImm(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareByteImmReg(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareLongRegs(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareLongRegImm(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareLongImmReg(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareBoolRegs(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareBoolRegImm(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareBoolImmReg(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareUnitRegs(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareUnitRegImm(%rip), %rdi
  call test.use$Function$
  leaq test.testCompareUnitImmReg(%rip), %rdi
  call test.use$Function$
  movl $0, %eax
  ret
test.testCompareBoolImmReg:
  xorl %eax, %eax
  cmpq $3, %rdi
  sete %al
  leal 1(, %rax, 2), %eax
  ret
test.testCompareBoolRegImm:
  xorl %eax, %eax
  cmpq $3, %rdi
  sete %al
  leal 1(, %rax, 2), %eax
  ret
test.testCompareBoolRegs:
  xorl %eax, %eax
  cmpq %rsi, %rdi
  sete %al
  leal 1(, %rax, 2), %eax
  ret
test.testCompareByteImmReg:
  xorl %eax, %eax
  cmpb $63, %dil
  setg %al
  leal 1(, %rax, 2), %eax
  ret
test.testCompareByteRegImm:
  xorl %eax, %eax
  cmpb $63, %dil
  setl %al
  leal 1(, %rax, 2), %eax
  ret
test.testCompareByteRegs:
  xorl %eax, %eax
  cmpb %sil, %dil
  setl %al
  leal 1(, %rax, 2), %eax
  ret
test.testCompareImmediateMemory:
  cmpl $3, 8(%rsp)
  jne .L0
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L0:
  xorl %ecx, %ecx
  cmpl $3, 8(%rsp)
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  testb %al, %al
  je .L1
  xorl %ecx, %ecx
  cmpl $3, 8(%rsp)
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L1:
  cmpl $3, 8(%rsp)
  jle .L2
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setg %al
  leal 1(, %rax, 2), %eax
  ret
.L2:
  cmpl $3, 8(%rsp)
  jl .L3
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setge %al
  leal 1(, %rax, 2), %eax
  ret
.L3:
  cmpl $3, 8(%rsp)
  jge .L4
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setl %al
  leal 1(, %rax, 2), %eax
  ret
.L4:
  cmpl $3, 8(%rsp)
  jg .L5
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setle %al
  leal 1(, %rax, 2), %eax
  ret
.L5:
  movq $3, %rax
  ret
test.testCompareImmediateRegister:
  cmpl $3, %edi
  jne .L6
  xorl %eax, %eax
  cmpl $3, %edi
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L6:
  xorl %ecx, %ecx
  cmpl $3, %edi
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  testb %al, %al
  je .L7
  xorl %ecx, %ecx
  cmpl $3, %edi
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L7:
  cmpl $3, %edi
  jle .L8
  xorl %eax, %eax
  cmpl $3, %edi
  setg %al
  leal 1(, %rax, 2), %eax
  ret
.L8:
  cmpl $3, %edi
  jl .L9
  xorl %eax, %eax
  cmpl $3, %edi
  setge %al
  leal 1(, %rax, 2), %eax
  ret
.L9:
  cmpl $3, %edi
  jge .L10
  xorl %eax, %eax
  cmpl $3, %edi
  setl %al
  leal 1(, %rax, 2), %eax
  ret
.L10:
  cmpl $3, %edi
  jg .L11
  xorl %eax, %eax
  cmpl $3, %edi
  setle %al
  leal 1(, %rax, 2), %eax
  ret
.L11:
  movq $3, %rax
  ret
test.testCompareLongImmReg:
  xorl %eax, %eax
  movq $2147483648, %rax
  cmpq %rdi, %rax
  setl %al
  leal 1(, %rax, 2), %eax
  ret
test.testCompareLongRegImm:
  xorl %eax, %eax
  movq $2147483648, %rax
  cmpq %rax, %rdi
  setl %al
  leal 1(, %rax, 2), %eax
  ret
test.testCompareLongRegs:
  xorl %eax, %eax
  cmpq %rsi, %rdi
  setl %al
  leal 1(, %rax, 2), %eax
  ret
test.testCompareMemoryImmediate:
  cmpl $3, 8(%rsp)
  jne .L12
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L12:
  xorl %ecx, %ecx
  cmpl $3, 8(%rsp)
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  testb %al, %al
  je .L13
  xorl %ecx, %ecx
  cmpl $3, 8(%rsp)
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L13:
  cmpl $3, 8(%rsp)
  jge .L14
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setl %al
  leal 1(, %rax, 2), %eax
  ret
.L14:
  cmpl $3, 8(%rsp)
  jg .L15
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setle %al
  leal 1(, %rax, 2), %eax
  ret
.L15:
  cmpl $3, 8(%rsp)
  jle .L16
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setg %al
  leal 1(, %rax, 2), %eax
  ret
.L16:
  cmpl $3, 8(%rsp)
  jl .L17
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setge %al
  leal 1(, %rax, 2), %eax
  ret
.L17:
  movq $3, %rax
  ret
test.testCompareMemoryMemory:
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  jne .L18
  xorl %eax, %eax
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L18:
  xorl %ecx, %ecx
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  testb %al, %al
  je .L19
  xorl %ecx, %ecx
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L19:
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  jge .L20
  xorl %eax, %eax
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  setl %al
  leal 1(, %rax, 2), %eax
  ret
.L20:
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  jg .L21
  xorl %eax, %eax
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  setle %al
  leal 1(, %rax, 2), %eax
  ret
.L21:
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  jle .L22
  xorl %eax, %eax
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  setg %al
  leal 1(, %rax, 2), %eax
  ret
.L22:
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  jl .L23
  xorl %eax, %eax
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  setge %al
  leal 1(, %rax, 2), %eax
  ret
.L23:
  movq $3, %rax
  ret
test.testCompareMemoryRegister:
  cmpl %edi, 8(%rsp)
  jne .L24
  xorl %eax, %eax
  cmpl %edi, 8(%rsp)
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L24:
  xorl %ecx, %ecx
  cmpl %edi, 8(%rsp)
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  testb %al, %al
  je .L25
  xorl %ecx, %ecx
  cmpl %edi, 8(%rsp)
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L25:
  cmpl %edi, 8(%rsp)
  jge .L26
  xorl %eax, %eax
  cmpl %edi, 8(%rsp)
  setl %al
  leal 1(, %rax, 2), %eax
  ret
.L26:
  cmpl %edi, 8(%rsp)
  jg .L27
  xorl %eax, %eax
  cmpl %edi, 8(%rsp)
  setle %al
  leal 1(, %rax, 2), %eax
  ret
.L27:
  cmpl %edi, 8(%rsp)
  jle .L28
  xorl %eax, %eax
  cmpl %edi, 8(%rsp)
  setg %al
  leal 1(, %rax, 2), %eax
  ret
.L28:
  cmpl %edi, 8(%rsp)
  jl .L29
  xorl %eax, %eax
  cmpl %edi, 8(%rsp)
  setge %al
  leal 1(, %rax, 2), %eax
  ret
.L29:
  movq $3, %rax
  ret
test.testCompareRegisterImmediate:
  cmpl $3, %edi
  jne .L30
  xorl %eax, %eax
  cmpl $3, %edi
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L30:
  xorl %ecx, %ecx
  cmpl $3, %edi
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  testb %al, %al
  je .L31
  xorl %ecx, %ecx
  cmpl $3, %edi
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L31:
  cmpl $3, %edi
  jge .L32
  xorl %eax, %eax
  cmpl $3, %edi
  setl %al
  leal 1(, %rax, 2), %eax
  ret
.L32:
  cmpl $3, %edi
  jg .L33
  xorl %eax, %eax
  cmpl $3, %edi
  setle %al
  leal 1(, %rax, 2), %eax
  ret
.L33:
  cmpl $3, %edi
  jle .L34
  xorl %eax, %eax
  cmpl $3, %edi
  setg %al
  leal 1(, %rax, 2), %eax
  ret
.L34:
  cmpl $3, %edi
  jl .L35
  xorl %eax, %eax
  cmpl $3, %edi
  setge %al
  leal 1(, %rax, 2), %eax
  ret
.L35:
  movq $3, %rax
  ret
test.testCompareRegisterMemory:
  cmpl 8(%rsp), %edi
  jne .L36
  xorl %eax, %eax
  cmpl 8(%rsp), %edi
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L36:
  xorl %ecx, %ecx
  cmpl 8(%rsp), %edi
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  testb %al, %al
  je .L37
  xorl %ecx, %ecx
  cmpl 8(%rsp), %edi
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L37:
  cmpl 8(%rsp), %edi
  jge .L38
  xorl %eax, %eax
  cmpl 8(%rsp), %edi
  setl %al
  leal 1(, %rax, 2), %eax
  ret
.L38:
  cmpl 8(%rsp), %edi
  jg .L39
  xorl %eax, %eax
  cmpl 8(%rsp), %edi
  setle %al
  leal 1(, %rax, 2), %eax
  ret
.L39:
  cmpl 8(%rsp), %edi
  jle .L40
  xorl %eax, %eax
  cmpl 8(%rsp), %edi
  setg %al
  leal 1(, %rax, 2), %eax
  ret
.L40:
  cmpl 8(%rsp), %edi
  jl .L41
  xorl %eax, %eax
  cmpl 8(%rsp), %edi
  setge %al
  leal 1(, %rax, 2), %eax
  ret
.L41:
  movq $3, %rax
  ret
test.testCompareRegisterRegister:
  cmpl %esi, %edi
  jne .L42
  xorl %eax, %eax
  cmpl %esi, %edi
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L42:
  xorl %ecx, %ecx
  cmpl %esi, %edi
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  testb %al, %al
  je .L43
  xorl %ecx, %ecx
  cmpl %esi, %edi
  sete %cl
  xorl %eax, %eax
  testb %cl, %cl
  sete %al
  leal 1(, %rax, 2), %eax
  ret
.L43:
  cmpl %esi, %edi
  jge .L44
  xorl %eax, %eax
  cmpl %esi, %edi
  setl %al
  leal 1(, %rax, 2), %eax
  ret
.L44:
  cmpl %esi, %edi
  jg .L45
  xorl %eax, %eax
  cmpl %esi, %edi
  setle %al
  leal 1(, %rax, 2), %eax
  ret
.L45:
  cmpl %esi, %edi
  jle .L46
  xorl %eax, %eax
  cmpl %esi, %edi
  setg %al
  leal 1(, %rax, 2), %eax
  ret
.L46:
  cmpl %esi, %edi
  jl .L47
  xorl %eax, %eax
  cmpl %esi, %edi
  setge %al
  leal 1(, %rax, 2), %eax
  ret
.L47:
  movq $3, %rax
  ret
test.testCompareUnitImmReg:
  call std.unit.Unit.equals
  ret
test.testCompareUnitRegImm:
  call std.unit.Unit.equals
  ret
test.testCompareUnitRegs:
  call std.unit.Unit.equals
  ret
test.use$Function$:
  movq %rdi, %rax
  ret
  .global _main

  .text
test.callerSavedRegistersDoubleSavedAcrossFunctionCalls:
  str x30, [sp, #-48]!
  stp d11, d12, [sp, #8]
  stp d9, d10, [sp, #24]
  str d8, [sp, #40]
  fmov d12, d0
  fmov d11, d1
  fmov d10, d2
  fmov d9, d3
  fmov d8, d4
  movz w0, #3
  bl test.use$Int$
  fadd d0, d12, d11
  fadd d0, d0, d10
  fadd d0, d0, d9
  fadd d0, d0, d8
  ldr d8, [sp, #40]
  ldp d9, d10, [sp, #24]
  ldp d11, d12, [sp, #8]
  ldr x30, [sp], #48
  ret
test.callerSavedRegistersIntSavedAcrossFunctionCalls:
  stp x23, x30, [sp, #-48]!
  stp x21, x22, [sp, #16]
  stp x19, x20, [sp, #32]
  mov w23, w0
  mov w22, w1
  mov w21, w2
  mov w20, w3
  mov w19, w4
  movz w0, #3
  bl test.use$Int$
  add w0, w23, w22
  add w0, w0, w21
  add w0, w0, w20
  add w0, w0, w19
  ldp x19, x20, [sp, #32]
  ldp x21, x22, [sp, #16]
  ldp x23, x30, [sp], #48
  ret
test.callerSavedRegistersSavedAcrossFunctionCallsWithSpills:
  stp x29, x30, [sp, #-96]!
  stp x27, x28, [sp, #16]
  stp x25, x26, [sp, #32]
  stp x23, x24, [sp, #48]
  stp x21, x22, [sp, #64]
  stp x19, x20, [sp, #80]
  sub sp, sp, #24
  mov w27, w0
  str w1, [sp]
  str w2, [sp, #8]
  str w3, [sp, #16]
  mov w29, w4
  mov w28, w5
  mov w26, w6
  mov w25, w7
  cmp w27, #1
  b.ne .L0
  movz w24, #101
  movz w23, #102
  movz w22, #103
  movz w21, #104
  movz w20, #105
  movz w19, #106
  b .L1
.L0:
  movz w24, #1
  movz w23, #2
  movz w22, #3
  movz w21, #4
  movz w20, #5
  movz w19, #6
.L1:
  movz w0, #3
  bl test.use$Int$
  add w0, w24, w23
  add w0, w0, w22
  add w0, w0, w21
  add w0, w0, w20
  add w0, w0, w19
  add w1, w0, w27
  ldr w0, [sp]
  add w1, w1, w0
  ldr w0, [sp, #8]
  add w1, w1, w0
  ldr w0, [sp, #16]
  add w0, w1, w0
  add w0, w0, w29
  add w0, w0, w28
  add w0, w0, w26
  add w0, w0, w25
  add sp, sp, #24
  ldp x19, x20, [sp, #80]
  ldp x21, x22, [sp, #64]
  ldp x23, x24, [sp, #48]
  ldp x25, x26, [sp, #32]
  ldp x27, x28, [sp, #16]
  ldp x29, x30, [sp], #96
  ret
_main:
  mov w0, wzr
  ret
test.testDefaultToCalleeSaveRegistersIfAcrossFunctionCall:
  stp x20, x30, [sp, #-32]!
  str x19, [sp, #16]
  cbz w0, .L2
  movz w20, #101
  movz w19, #102
  b .L3
.L2:
  movz w20, #1
  movz w19, #2
.L3:
  movz w0, #3
  bl test.use$Int$
  mov w0, w20
  bl test.use$Int$
  mov w0, w19
  bl test.use$Int$
  ldr x19, [sp, #16]
  ldp x20, x30, [sp], #32
  ret
test.testDefaultToCallerSaveRegisters:
  cbz w1, .L4
  movz w16, #101
  movz w15, #102
  movz w14, #103
  movz w13, #104
  movz w12, #105
  movz w11, #106
  movz w10, #107
  movz w9, #108
  movz w8, #109
  movz w7, #110
  movz w6, #111
  movz w5, #112
  movz w4, #113
  movz w0, #114
  mov w17, w0
  movz w3, #115
  movz w2, #116
  movz w1, #117
  movz w0, #118
  b .L5
.L4:
  movz w16, #1
  movz w15, #2
  movz w14, #3
  movz w13, #4
  movz w12, #5
  movz w11, #6
  movz w10, #7
  movz w9, #8
  movz w8, #9
  movz w7, #10
  movz w6, #11
  movz w5, #12
  movz w4, #13
  movz w0, #14
  mov w17, w0
  movz w3, #15
  movz w2, #16
  movz w1, #17
  movz w0, #18
.L5:
  add w15, w16, w15
  add w14, w15, w14
  add w13, w14, w13
  add w12, w13, w12
  add w11, w12, w11
  add w10, w11, w10
  add w9, w10, w9
  add w8, w9, w8
  add w7, w8, w7
  add w6, w7, w6
  add w5, w6, w5
  add w4, w5, w4
  add w4, w4, w17
  add w3, w4, w3
  add w2, w3, w2
  add w1, w2, w1
  add w0, w1, w0
  ret
test.use$Int$:
  ret
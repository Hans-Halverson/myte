module test

fun divByteRegs(x: Byte, y: Byte): Byte = x / y
fun divByteImmReg(x: Byte): Byte = 60 / x
fun divByteRegImm(x: Byte): Byte = x / 60

fun divIntRegs(x: Int, y: Int): Int = x / y
fun divIntRegImm(x: Int): Int = x / 257
fun divIntImmReg(x: Int): Int = 257 / x

fun divLongRegs(x: Long, y: Long): Long = x / y
// First have to load long to register
fun divLongRegImm(x: Long): Long = x / 2147483648
fun divLongImmReg(x: Long): Long = 2147483648 / x

fun remByteRegs(x: Byte, y: Byte): Byte = x % y
fun remByteImmReg(x: Byte): Byte = 60 % x
fun remByteRegImm(x: Byte): Byte = x % 60

fun remIntRegs(x: Int, y: Int): Int = x % y
fun remIntRegImm(x: Int): Int = x % 257
fun remIntImmReg(x: Int): Int = 257 % x

fun remLongRegs(x: Long, y: Long): Long = x % y
// First have to load long to register
fun remLongRegImm(x: Long): Long = x % 2147483648
fun remLongImmReg(x: Long): Long = 2147483648 % x

fun remDoubleRegs(x: Double, y: Double): Double = x / y
fun remDoubleRegImm(x: Double): Double = x / 60.0
fun remDoublImmReg(x: Double): Double = 60.0 / x

fun main() {}
  .global _main

  .text
_main:
  xorl %eax, %eax
  ret
test.testCompareBoolImmReg:
  xorl %eax, %eax
  cmpb $1, %dil
  sete %al
  ret
test.testCompareBoolRegImm:
  xorl %eax, %eax
  cmpb $1, %dil
  sete %al
  ret
test.testCompareBoolRegs:
  xorl %eax, %eax
  cmpb %sil, %dil
  sete %al
  ret
test.testCompareByteImmReg:
  xorl %eax, %eax
  cmpb $63, %dil
  setg %al
  ret
test.testCompareByteRegImm:
  xorl %eax, %eax
  cmpb $63, %dil
  setl %al
  ret
test.testCompareByteRegs:
  xorl %eax, %eax
  cmpb %sil, %dil
  setl %al
  ret
test.testCompareImmediateMemory:
  cmpl $3, 8(%rsp)
  jne .L0
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  sete %al
  jmp .L6
.L0:
  cmpl $3, 8(%rsp)
  je .L1
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setne %al
  jmp .L6
.L1:
  cmpl $3, 8(%rsp)
  jle .L2
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setg %al
  jmp .L6
.L2:
  cmpl $3, 8(%rsp)
  jl .L3
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setge %al
  jmp .L6
.L3:
  cmpl $3, 8(%rsp)
  jge .L4
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setl %al
  jmp .L6
.L4:
  cmpl $3, 8(%rsp)
  jg .L5
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setle %al
  jmp .L6
.L5:
  movb $1, %al
.L6:
  ret
test.testCompareImmediateRegister:
  cmpl $3, %edi
  jne .L7
  xorl %eax, %eax
  cmpl $3, %edi
  sete %al
  jmp .L13
.L7:
  cmpl $3, %edi
  je .L8
  xorl %eax, %eax
  cmpl $3, %edi
  setne %al
  jmp .L13
.L8:
  cmpl $3, %edi
  jle .L9
  xorl %eax, %eax
  cmpl $3, %edi
  setg %al
  jmp .L13
.L9:
  cmpl $3, %edi
  jl .L10
  xorl %eax, %eax
  cmpl $3, %edi
  setge %al
  jmp .L13
.L10:
  cmpl $3, %edi
  jge .L11
  xorl %eax, %eax
  cmpl $3, %edi
  setl %al
  jmp .L13
.L11:
  cmpl $3, %edi
  jg .L12
  xorl %eax, %eax
  cmpl $3, %edi
  setle %al
  jmp .L13
.L12:
  movb $1, %al
.L13:
  ret
test.testCompareLongImmReg:
  xorl %eax, %eax
  movq $2147483648, %rax
  cmpq %rdi, %rax
  setl %al
  ret
test.testCompareLongRegImm:
  xorl %eax, %eax
  movq $2147483648, %rax
  cmpq %rax, %rdi
  setl %al
  ret
test.testCompareLongRegs:
  xorl %eax, %eax
  cmpq %rsi, %rdi
  setl %al
  ret
test.testCompareMemoryImmediate:
  cmpl $3, 8(%rsp)
  jne .L14
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  sete %al
  jmp .L20
.L14:
  cmpl $3, 8(%rsp)
  je .L15
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setne %al
  jmp .L20
.L15:
  cmpl $3, 8(%rsp)
  jge .L16
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setl %al
  jmp .L20
.L16:
  cmpl $3, 8(%rsp)
  jg .L17
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setle %al
  jmp .L20
.L17:
  cmpl $3, 8(%rsp)
  jle .L18
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setg %al
  jmp .L20
.L18:
  cmpl $3, 8(%rsp)
  jl .L19
  xorl %eax, %eax
  cmpl $3, 8(%rsp)
  setge %al
  jmp .L20
.L19:
  movb $1, %al
.L20:
  ret
test.testCompareMemoryMemory:
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  jne .L21
  xorl %eax, %eax
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  sete %al
  jmp .L27
.L21:
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  je .L22
  xorl %eax, %eax
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  setne %al
  jmp .L27
.L22:
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  jge .L23
  xorl %eax, %eax
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  setl %al
  jmp .L27
.L23:
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  jg .L24
  xorl %eax, %eax
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  setle %al
  jmp .L27
.L24:
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  jle .L25
  xorl %eax, %eax
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  setg %al
  jmp .L27
.L25:
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  jl .L26
  xorl %eax, %eax
  movl 8(%rsp), %eax
  cmpl 16(%rsp), %eax
  setge %al
  jmp .L27
.L26:
  movb $1, %al
.L27:
  ret
test.testCompareMemoryRegister:
  cmpl %edi, 8(%rsp)
  jne .L28
  xorl %eax, %eax
  cmpl %edi, 8(%rsp)
  sete %al
  jmp .L34
.L28:
  cmpl %edi, 8(%rsp)
  je .L29
  xorl %eax, %eax
  cmpl %edi, 8(%rsp)
  setne %al
  jmp .L34
.L29:
  cmpl %edi, 8(%rsp)
  jge .L30
  xorl %eax, %eax
  cmpl %edi, 8(%rsp)
  setl %al
  jmp .L34
.L30:
  cmpl %edi, 8(%rsp)
  jg .L31
  xorl %eax, %eax
  cmpl %edi, 8(%rsp)
  setle %al
  jmp .L34
.L31:
  cmpl %edi, 8(%rsp)
  jle .L32
  xorl %eax, %eax
  cmpl %edi, 8(%rsp)
  setg %al
  jmp .L34
.L32:
  cmpl %edi, 8(%rsp)
  jl .L33
  xorl %eax, %eax
  cmpl %edi, 8(%rsp)
  setge %al
  jmp .L34
.L33:
  movb $1, %al
.L34:
  ret
test.testCompareRegisterImmediate:
  cmpl $3, %edi
  jne .L35
  xorl %eax, %eax
  cmpl $3, %edi
  sete %al
  jmp .L41
.L35:
  cmpl $3, %edi
  je .L36
  xorl %eax, %eax
  cmpl $3, %edi
  setne %al
  jmp .L41
.L36:
  cmpl $3, %edi
  jge .L37
  xorl %eax, %eax
  cmpl $3, %edi
  setl %al
  jmp .L41
.L37:
  cmpl $3, %edi
  jg .L38
  xorl %eax, %eax
  cmpl $3, %edi
  setle %al
  jmp .L41
.L38:
  cmpl $3, %edi
  jle .L39
  xorl %eax, %eax
  cmpl $3, %edi
  setg %al
  jmp .L41
.L39:
  cmpl $3, %edi
  jl .L40
  xorl %eax, %eax
  cmpl $3, %edi
  setge %al
  jmp .L41
.L40:
  movb $1, %al
.L41:
  ret
test.testCompareRegisterMemory:
  cmpl 8(%rsp), %edi
  jne .L42
  xorl %eax, %eax
  cmpl 8(%rsp), %edi
  sete %al
  jmp .L48
.L42:
  cmpl 8(%rsp), %edi
  je .L43
  xorl %eax, %eax
  cmpl 8(%rsp), %edi
  setne %al
  jmp .L48
.L43:
  cmpl 8(%rsp), %edi
  jge .L44
  xorl %eax, %eax
  cmpl 8(%rsp), %edi
  setl %al
  jmp .L48
.L44:
  cmpl 8(%rsp), %edi
  jg .L45
  xorl %eax, %eax
  cmpl 8(%rsp), %edi
  setle %al
  jmp .L48
.L45:
  cmpl 8(%rsp), %edi
  jle .L46
  xorl %eax, %eax
  cmpl 8(%rsp), %edi
  setg %al
  jmp .L48
.L46:
  cmpl 8(%rsp), %edi
  jl .L47
  xorl %eax, %eax
  cmpl 8(%rsp), %edi
  setge %al
  jmp .L48
.L47:
  movb $1, %al
.L48:
  ret
test.testCompareRegisterRegister:
  cmpl %esi, %edi
  jne .L49
  xorl %eax, %eax
  cmpl %esi, %edi
  sete %al
  jmp .L55
.L49:
  cmpl %esi, %edi
  je .L50
  xorl %eax, %eax
  cmpl %esi, %edi
  setne %al
  jmp .L55
.L50:
  cmpl %esi, %edi
  jge .L51
  xorl %eax, %eax
  cmpl %esi, %edi
  setl %al
  jmp .L55
.L51:
  cmpl %esi, %edi
  jg .L52
  xorl %eax, %eax
  cmpl %esi, %edi
  setle %al
  jmp .L55
.L52:
  cmpl %esi, %edi
  jle .L53
  xorl %eax, %eax
  cmpl %esi, %edi
  setg %al
  jmp .L55
.L53:
  cmpl %esi, %edi
  jl .L54
  xorl %eax, %eax
  cmpl %esi, %edi
  setge %al
  jmp .L55
.L54:
  movb $1, %al
.L55:
  ret
test.testCompareUnitImmReg:
  movb $1, %al
  ret
test.testCompareUnitRegImm:
  movb $1, %al
  ret
test.testCompareUnitRegs:
  movb $1, %al
  ret
  .global _main

  .text
test.longArgs:
  addq 8(%rsp), %rdi
  movq %rdi, %rax
  ret
_main:
  movl $0, %eax
  ret
test.passedInRegistersAndStack:
  subq $24, %rsp
  movl $7, (%rsp)
  movl $8, 8(%rsp)
  movl $9, 16(%rsp)
  movl $1, %edi
  movl $2, %esi
  movl $3, %edx
  movl $4, %ecx
  movl $5, %r8d
  movl $6, %r9d
  call test.testNineArgFunction
  addq $24, %rsp
  ret
test.testEightArgFunction:
  addl %edi, %esi
  addl %esi, %edx
  addl %edx, %ecx
  addl %ecx, %r8d
  addl %r8d, %r9d
  addl 8(%rsp), %r9d
  addl 16(%rsp), %r9d
  movl %r9d, %eax
  ret
test.testFiveArgFunction:
  addl %edi, %esi
  addl %esi, %edx
  addl %edx, %ecx
  addl %ecx, %r8d
  movl %r8d, %eax
  ret
test.testFourArgFunction:
  addl %edi, %esi
  addl %esi, %edx
  addl %edx, %ecx
  movl %ecx, %eax
  ret
test.testFunctionStackParamsOffsetByPushedCalleeSavedRegisters:
  push %rbx
  movl %edi, %ebx
  movl $3, %edi
  call test.use$Int$
  addl 16(%rsp), %ebx
  movl %ebx, %eax
  pop %rbx
  ret
test.testFunctionStackParamsOffsetByStackFrameAndPushedCalleeSavedRegisters:
  push %rbx
  push %r12
  push %r13
  push %r14
  push %r15
  subq $8, %rsp
  movl %edi, (%rsp)
  movl %esi, %r15d
  movl %edx, %r14d
  movl %ecx, %r13d
  movl %r8d, %r12d
  movl %r9d, %ebx
  movl $3, %edi
  call test.use$Int$
  addl (%rsp), %r15d
  addl %r15d, %r14d
  addl %r14d, %r13d
  addl %r13d, %r12d
  movl %ebx, %eax
  addl %r12d, %eax
  addl 56(%rsp), %eax
  addl 64(%rsp), %eax
  addq $8, %rsp
  pop %r15
  pop %r14
  pop %r13
  pop %r12
  pop %rbx
  ret
test.testLongArgs:
  subq $8, %rsp
  movq $7, (%rsp)
  movq $1, %rdi
  movl $2, %esi
  movl $3, %edx
  movl $4, %ecx
  movl $5, %r8d
  movl $6, %r9d
  call test.longArgs
  movq $2147483648, %rax
  movq %rax, (%rsp)
  movq $2147483648, %rdi
  movl $2, %esi
  movl $3, %edx
  movl $4, %ecx
  movl $5, %r8d
  movl $6, %r9d
  call test.longArgs
  addq $8, %rsp
  ret
test.testNineArgFunction:
  addl %edi, %esi
  addl %esi, %edx
  addl %edx, %ecx
  addl %ecx, %r8d
  addl %r8d, %r9d
  addl 8(%rsp), %r9d
  addl 16(%rsp), %r9d
  addl 24(%rsp), %r9d
  movl %r9d, %eax
  ret
test.testOneArgFunction:
  movl %edi, %eax
  ret
test.testSevenArgFunction:
  addl %edi, %esi
  addl %esi, %edx
  addl %edx, %ecx
  addl %ecx, %r8d
  addl %r8d, %r9d
  addl 8(%rsp), %r9d
  movl %r9d, %eax
  ret
test.testSixArgFunction:
  addl %edi, %esi
  addl %esi, %edx
  addl %edx, %ecx
  addl %ecx, %r8d
  addl %r8d, %r9d
  movl %r9d, %eax
  ret
test.testThreeArgFunction:
  addl %edi, %esi
  addl %esi, %edx
  movl %edx, %eax
  ret
test.testTwoArgFunction:
  addl %edi, %esi
  movl %esi, %eax
  ret
test.use$Int$:
  movl %edi, %eax
  ret
test.zeroArgFunction:
  movl $1, %eax
  ret
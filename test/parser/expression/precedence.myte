module Test

fun main() {
  // Full precedence
  +a() * b + c << d & e ^ f | g < h == i && j || k;
  a || b && c == d < e | f ^ g & h << i + j * k;

  // Group precedence
  a((b)(c));
  (a(b))(c);
  (a.b).c;
  a * (b * c);
  (a * b) * c;
  a + (b + c);
  (a + b) + c;
  a << (b << c);
  (a << b) << c;
  a & (b & c);
  (a & b) & c;
  a ^ (b ^ c);
  (a ^ b) ^ c;
  a | (b | c);
  (a | b) | c;
  a < (b < c);
  (a < b) < c;
  a == (b == c);
  (a == b) == c;
  a && (b && c);
  (a && b) && c;
  a || (b || c);
  (a || b) || c;

  // Call precedence
  +a();
  a().b();
  a * b();
  a + b();
  a << b();
  a & b();
  a ^ b();
  a | b();
  a < b();
  a == b();
  a && b();
  a || b();

  // Access precedence
  +a.b;
  a.b * c;
  a * b.c;
  a.b + c;
  a + b.c;
  a.b << c;
  a << b.c;
  a.b & c;
  a & b.c;
  a.b ^ c;
  a ^ b.c;
  a.b | c;
  a | b.c;
  a.b < c;
  a < b.c;
  a.b == c;
  a == b.c;
  a.b && c;
  a && b.c;
  a.b || c;
  a || b.c;

  +a[b];
  a[b] * c;
  a * b[c];
  a[b] + c;
  a + b[c];
  a[b] << c;
  a << b[c];
  a[b] & c;
  a & b[c];
  a[b] ^ c;
  a ^ b[c];
  a[b] | c;
  a | b[c];
  a[b] < c;
  a < b[c];
  a[b] == c;
  a == b[c];
  a[b] && c;
  a && b[c];
  a[b] || c;
  a || b[c];

  // Unary precedence
  +(a + b);
  +a * b;
  +a + b;
  +a << +b;
  +a & +b;
  +a ^ +b;
  +a | +b;
  +a < b;
  +a == b;
  +a && b;
  +a || b;

  // Multiplication precedence
  a * b + c;
  a + b * c;
  a * b << c;
  a << b * c;
  a * b & c;
  a & b * c;
  a * b ^ c;
  a ^ b * c;
  a * b | c;
  a | b * c;
  a * b < c;
  a < b * c;
  a * b == c;
  a == b * c;
  a * b && c;
  a && b * c;
  a * b || c;
  a || b * c;

  // Addition precedence
  a + b << c;
  a << b + c;
  a + b & c;
  a & b + c;
  a + b ^ c;
  a ^ b + c;
  a + b | c;
  a | b + c;
  a + b < c;
  a < b + c;
  a + b == c;
  a == b + c;
  a + b && c;
  a && b + c;
  a + b || c;
  a || b + c;

  // Bitwise shift precedence
  a << b & c;
  a & b << c;
  a << b ^ c;
  a ^ b << c;
  a << b | c;
  a | b << c;
  a << b < c;
  a < b << c;
  a << b == c;
  a == b << c;
  a << b && c;
  a && b << c;
  a << b || c;
  a || b << c;

  // Bitwise and precedence
  a & b ^ c;
  a ^ b & c;
  a & b | c;
  a | b & c;
  a & b < c;
  a < b & c;
  a & b == c;
  a == b & c;
  a & b && c;
  a && b & c;
  a & b || c;
  a || b & c;

  // Bitwise xor precedence
  a ^ b | c;
  a | b ^ c;
  a ^ b < c;
  a < b ^ c;
  a ^ b == c;
  a == b ^ c;
  a ^ b && c;
  a && b & c;
  a ^ b || c;
  a || b ^ c;

  // Bitwise or precedence
  a | b < c;
  a < b | c;
  a | b == c;
  a == b | c;
  a | b && c;
  a && b & c;
  a | b || c;
  a || b | c;

  // Comparison precedence
  a < b == c;
  a == b < c;
  a < b && c;
  a && b < c;
  a < b || c;
  a || b < c;

  // Equality precedence
  a == b && c;
  a && b == c;
  a == b || c;
  a || b == c;

  // Logical and precedence
  a && b || c;
  a || b && c;
}

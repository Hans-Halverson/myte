type $tuple<Int,test.RecWithZeroSizeField> {int, test.RecWithZeroSizeField*}

func void @test.getUnit() {
  Ret
}

func void @test.testAssignGlobal() {
  Call void @test.getUnit()
  Call void @test.id<test.ZeroSize>()
  Call void @test.use<test.ZeroSize>()
  Ret
}

func void @test.testAssignLocal() {
  Call void @test.use<test.ZeroSize>()
  Call void @test.getUnit()
  Call void @test.id<test.ZeroSize>()
  Call void @test.use<test.ZeroSize>()
  Ret
}

func void @test.testAssignDestructuring() {
  Call void @test.getUnit()
  Call void @test.id<test.MultiFieldZeroSize>()
  Call void @test.use<Unit>()
  Call void @test.use<Unit>()
  Call void @test.use<Unit>()
  Ret
}

func void @test.testAssignVecIndexing(std.vec.Vec<test.ZeroSize>* %0) {
  Call void @test.getUnit()
  Call void @test.id<test.ZeroSize>()
  Call void @std.vec.Vec.set<test.ZeroSize>(%0, 3)
  Ret
}

func void @test.testAssignMapIndexing(std.map.Map<Bool,test.ZeroSize>* %0) {
  Call void @test.getUnit()
  Call void @test.id<test.ZeroSize>()
  Call void @std.map.Map.add<Bool,test.ZeroSize>(%0, true)
  Ret
}

type test.RecWithZeroSizeField {int}

func void @test.testAssignAccessChainIndexing(test.RecWithZeroSizeField* %0, $tuple<Int,test.RecWithZeroSizeField>* %1, std.vec.Vec<test.RecWithZeroSizeField>* %2) {
  Call void @test.getUnit()
  Call void @test.id<test.ZeroSize>()
  Call void @test.getUnit()
  Call void @test.id<test.ZeroSize>()
  %3 := GetPointer test.RecWithZeroSizeField*, $tuple<Int,test.RecWithZeroSizeField>* %1.1
  %4 := Load test.RecWithZeroSizeField* %3
  Call void @test.getUnit()
  Call void @test.id<test.ZeroSize>()
  %5 := Call int @test.id<Int>(8)
  %6 := Call test.RecWithZeroSizeField* @std.vec.Vec.get<test.RecWithZeroSizeField>(%2, %5)
  Ret
}

func int @test.id<Int>(int %0) {
  Ret %0
}

func void @test.id<test.MultiFieldZeroSize>() {
  Ret
}

func void @test.id<test.ZeroSize>() {
  Ret
}

func void @test.use<Unit>() {
  Ret
}

func void @test.use<test.ZeroSize>() {
  Ret
}

func int @test.main() {
  Ret 0
}
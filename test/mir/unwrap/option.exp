func std.option.Option<Int>* @test.testUnwrapOption(std.option.Option<Int>* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 1
  branch %2, @0, @1
label @0:
  %3 := GetPointer int, std.option.Option<Int>::Some* %0.2
  %4 := Load int %3
  Call void @test.use<Int>(%4)
  %5 := Call std.option.Option<Int>::Some* myte.builtin.alloc(1)
  Store byte %5, 1
  %6 := GetPointer int, std.option.Option<Int>::Some* %5.2
  Store int %6, 1
  Ret %5
label @1:
  %7 := Call std.option.Option<Int>* myte.builtin.alloc(1)
  Store byte %7, 0
  Ret %7
}

func std.option.Option<Int>* @test.testUnwrapOptionDifferentType(std.option.Option<Bool>* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 1
  branch %2, @0, @1
label @0:
  %3 := GetPointer bool, std.option.Option<Bool>::Some* %0.1
  %4 := Load bool %3
  Call void @test.use<Bool>(%4)
  %5 := Call std.option.Option<Int>::Some* myte.builtin.alloc(1)
  Store byte %5, 1
  %6 := GetPointer int, std.option.Option<Int>::Some* %5.2
  Store int %6, 1
  Ret %5
label @1:
  %7 := Call std.option.Option<Int>* myte.builtin.alloc(1)
  Store byte %7, 0
  Ret %7
}

func std.option.Option<Int>* @test.testDoubleUnwrap(std.option.Option<Option<Int>>* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 1
  branch %2, @0, @3
label @0:
  %3 := GetPointer std.option.Option<Int>*, std.option.Option<Option<Int>>::Some* %0.2
  %4 := Load std.option.Option<Int>* %3
  %5 := Load byte %4
  %6 := Eq byte %5, 1
  branch %6, @1, @2
label @1:
  %7 := GetPointer int, std.option.Option<Int>::Some* %4.2
  %8 := Load int %7
  Call void @test.use<Int>(%8)
  %9 := Call std.option.Option<Int>::Some* myte.builtin.alloc(1)
  Store byte %9, 1
  %10 := GetPointer int, std.option.Option<Int>::Some* %9.2
  Store int %10, 1
  Ret %9
label @2:
  %11 := Call std.option.Option<Int>* myte.builtin.alloc(1)
  Store byte %11, 0
  Ret %11
label @3:
  %12 := Call std.option.Option<Int>* myte.builtin.alloc(1)
  Store byte %12, 0
  Ret %12
}

func std.option.Option<Int>* @test.testZeroSizeUnwrap(std.option.Option<test.ZeroSize>* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 1
  branch %2, @0, @1
label @0:
  Call void @test.use<test.ZeroSize>()
  %3 := Call std.option.Option<Int>::Some* myte.builtin.alloc(1)
  Store byte %3, 1
  %4 := GetPointer int, std.option.Option<Int>::Some* %3.2
  Store int %4, 1
  Ret %3
label @1:
  %5 := Call std.option.Option<Int>* myte.builtin.alloc(1)
  Store byte %5, 0
  Ret %5
}

func void @test.use<Bool>(bool %0) {
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func void @test.use<Int>(int %0) {
  Ret
}

func void @test.use<test.ZeroSize>() {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testUnwrapOption)
  Call void @test.use<Function>(@test.testUnwrapOptionDifferentType)
  Call void @test.use<Function>(@test.testDoubleUnwrap)
  Call void @test.use<Function>(@test.testZeroSizeUnwrap)
  Ret 0
}
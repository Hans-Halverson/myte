func std.option.Option<Int>* @test.testUnwrapOption(std.option.Option<Int>* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 1
  branch %2, @0, @1
label @0:
  %3 := GetPointer int, std.option.Option<Int>::Some* %0.2
  %4 := Load int %3
  Call void @test.use<Int>(%4)
  %5 := CallBuiltin std.option.Option<Int>::Some* myte_alloc(1)
  Store byte %5, 1
  %6 := GetPointer int, std.option.Option<Int>::Some* %5.2
  Store int %6, 1
  Ret %5
label @1:
  %7 := CallBuiltin std.option.Option<Int>* myte_alloc(1)
  Store byte %7, 0
  Ret %7
}

func std.option.Option<Int>* @test.testUnwrapOptionDifferentType(std.option.Option<Bool>* %8) {
  %9 := Load byte %8
  %10 := Eq byte %9, 1
  branch %10, @2, @3
label @2:
  %11 := GetPointer bool, std.option.Option<Bool>::Some* %8.1
  %12 := Load bool %11
  Call void @test.use<Bool>(%12)
  %13 := CallBuiltin std.option.Option<Int>::Some* myte_alloc(1)
  Store byte %13, 1
  %14 := GetPointer int, std.option.Option<Int>::Some* %13.2
  Store int %14, 1
  Ret %13
label @3:
  %15 := CallBuiltin std.option.Option<Int>* myte_alloc(1)
  Store byte %15, 0
  Ret %15
}

func std.option.Option<Int>* @test.testDoubleUnwrap(std.option.Option<Option<Int>>* %16) {
  %17 := Load byte %16
  %18 := Eq byte %17, 1
  branch %18, @4, @7
label @4:
  %19 := GetPointer std.option.Option<Int>*, std.option.Option<Option<Int>>::Some* %16.2
  %20 := Load std.option.Option<Int>* %19
  %21 := Load byte %20
  %22 := Eq byte %21, 1
  branch %22, @5, @6
label @5:
  %23 := GetPointer int, std.option.Option<Int>::Some* %20.2
  %24 := Load int %23
  Call void @test.use<Int>(%24)
  %25 := CallBuiltin std.option.Option<Int>::Some* myte_alloc(1)
  Store byte %25, 1
  %26 := GetPointer int, std.option.Option<Int>::Some* %25.2
  Store int %26, 1
  Ret %25
label @6:
  %27 := CallBuiltin std.option.Option<Int>* myte_alloc(1)
  Store byte %27, 0
  Ret %27
label @7:
  %28 := CallBuiltin std.option.Option<Int>* myte_alloc(1)
  Store byte %28, 0
  Ret %28
}

func void @test.use<Bool>(bool %29) {
  Ret
}

func void @test.use<Function>(fn %30) {
  Ret
}

func void @test.use<Int>(int %31) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testUnwrapOption)
  Call void @test.use<Function>(@test.testUnwrapOptionDifferentType)
  Call void @test.use<Function>(@test.testDoubleUnwrap)
  Ret 0
}
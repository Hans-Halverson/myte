module test

type Rec1 { foo: Int }

type Rec2 { foo: String, bar: Bool, baz: Int }

type Rec3 { foo: Byte, bar: Rec2, baz: Long }

type Rec4 { foo: Int, bar: Int, baz: Rec3 }

type Tup1 (Rec4)

fun makeRec(foo: Int): Rec1 = Rec1 { foo }

fun testIndexing(r1: Rec1, r2: Rec2, r3: Rec3, r4: Rec4, t1: Tup1) {
  // Simple accesses
  r1.foo;

  r2.foo;
  r2.bar;

  // Nested accesses
  r3.foo;
  r3.bar.baz;

  r4.baz.bar.foo;

  // Accessing after expression
  makeRec(2 * 3).foo;

  // Named access after indexed access
  t1[0].baz.bar;
 }

fun main() {}
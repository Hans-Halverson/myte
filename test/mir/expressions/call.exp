func void @test.noArgsFunc() {
  Ret
}

func int @test.singleArgFunc(int %0) {
  Ret %0
}

func int @test.singleArgFunc2(int %0) {
  %1 := Add int %0, 1
  Ret %1
}

func void @test.multiArgsFunc(int %0, int %1, std.string.String* %2) {
  Ret
}

func void @test.directCalls() {
  %0 := CallBuiltin std.string.String* myte_alloc(1)
  %1 := GetPointer byte*, std.string.String* %0.2
  Store byte* %1, @.S0
  %2 := GetPointer int, std.string.String* %0.0
  Store int %2, 3
  %3 := GetPointer int, std.string.String* %0.1
  Store int %3, 3
  Call void @test.noArgsFunc()
  %4 := Call int @test.singleArgFunc(33)
  %5 := CallBuiltin std.string.String* myte_alloc(1)
  %6 := GetPointer byte*, std.string.String* %5.2
  Store byte* %6, @.S1
  %7 := GetPointer int, std.string.String* %5.0
  Store int %7, 4
  %8 := GetPointer int, std.string.String* %5.1
  Store int %8, 4
  Call void @test.multiArgsFunc(29, 98, %5)
  %9 := Call int @test.singleArgFunc(%4)
  %10 := Call int @test.singleArgFunc(45)
  %11 := Mul int 5, 6
  %12 := Add int 2, %11
  Call void @test.multiArgsFunc(%10, %12, %0)
  Ret
}

global byte[3] @.S0 = "str"

global byte[4] @.S1 = "test"

func void @test.indirectCalls() {
  branch true, @0, @1
label @0:
  continue @1
label @1:
  %0 := Phi fn @test.indirectCalls:@test.singleArgFunc, @0:@test.singleArgFunc2
  %1 := Call int %0(10)
  %2 := Add int 1, 2
  %3 := Call int %0(%2)
  %4 := Add int 3, %3
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.directCalls)
  Call void @test.use<Function>(@test.indirectCalls)
  Ret 0
}
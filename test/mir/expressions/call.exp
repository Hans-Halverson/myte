func void @test.noArgsFunc() {
  Ret
}

func int @test.singleArgFunc(int %0) {
  Ret %0
}

func int @test.singleArgFunc2(int %1) {
  %2 := Add int %1, 1
  Ret %2
}

func void @test.multiArgsFunc(int %3, int %4, std.string.String* %5) {
  Ret
}

func void @test.directCalls() {
  %6 := CallBuiltin std.string.String* myte_alloc(1)
  %7 := GetPointer byte*, std.string.String* %6.0
  Store byte* %7, @.S1
  %8 := GetPointer int, std.string.String* %6.1
  Store int %8, 3
  %9 := GetPointer int, std.string.String* %6.2
  Store int %9, 3
  Call void @test.noArgsFunc()
  %10 := Call int @test.singleArgFunc(33)
  %11 := CallBuiltin std.string.String* myte_alloc(1)
  %12 := GetPointer byte*, std.string.String* %11.0
  Store byte* %12, @.S2
  %13 := GetPointer int, std.string.String* %11.1
  Store int %13, 4
  %14 := GetPointer int, std.string.String* %11.2
  Store int %14, 4
  Call void @test.multiArgsFunc(29, 98, %11)
  %15 := Call int @test.singleArgFunc(%10)
  %16 := Call int @test.singleArgFunc(45)
  %17 := Mul int 5, 6
  %18 := Add int 2, %17
  Call void @test.multiArgsFunc(%16, %18, %6)
  Ret
}

global byte[3] @.S1 = "str"

global byte[4] @.S2 = "test"

func void @test.indirectCalls() {
  branch true, @0, @1
label @0:
  continue @1
label @1:
  %19 := Phi fn @test.indirectCalls:@test.singleArgFunc, @0:@test.singleArgFunc2
  %20 := Call int %19(10)
  %21 := Add int 1, 2
  %22 := Call int %19(%21)
  %23 := Add int 3, %22
  Ret
}

func void @test.use<Function>(fn %24) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.directCalls)
  Call void @test.use<Function>(@test.indirectCalls)
  Ret 0
}
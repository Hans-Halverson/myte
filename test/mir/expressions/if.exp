func bool @test.bool() {
  Ret true
}

func int @test.testSimpleIf() {
  %0 := Call bool @test.bool()
  branch %0, @1, @0
label @0:
  continue @1
label @1:
  %1 := Phi int @test.testSimpleIf:1, @0:2
  Ret %1
}

func int @test.testIfWithExpressions(int %2, int %3) {
  %4 := Call bool @test.bool()
  branch %4, @2, @3
label @2:
  %5 := Add int %2, %3
  continue @4
label @3:
  %6 := Mul int %2, %3
  %7 := Add int %6, %2
  continue @4
label @4:
  %8 := Phi int @2:%5, @3:%7
  Ret %8
}

func int @test.testNestedIfStatementInExpressionPosition() {
  %9 := Call bool @test.bool()
  branch %9, @5, @8
label @5:
  %10 := Call bool @test.bool()
  branch %10, @7, @6
label @6:
  continue @7
label @7:
  %11 := Phi int @5:1, @6:2
  continue @11
label @8:
  %12 := Call bool @test.bool()
  branch %12, @10, @9
label @9:
  continue @10
label @10:
  %13 := Phi int @8:3, @9:4
  continue @11
label @11:
  %14 := Phi int @7:%11, @10:%13
  Ret %14
}

func void @test.testZeroSizeIfExpression() {
  %15 := Call bool @test.bool()
  branch %15, @12, @13
label @12:
  Call void @test.use<Bool>(true)
  continue @14
label @13:
  Call void @test.use<Bool>(false)
  continue @14
label @14:
  Call void @test.use<test.ZeroSize>()
  Ret
}

func void @test.testReturnBranch(bool %16) {
  branch %16, @15, @18
label @15:
  Call void @test.use<Int>(1)
  branch %16, @16, @17
label @16:
  Ret
label @17:
  Call void @test.use<Int>(2)
  Ret
label @18:
  Ret
}

func void @test.testReturnBlockBranch(bool %17) {
  branch %17, @19, @20
label @19:
  Call void @test.use<Int>(1)
  Ret
label @20:
  Call void @test.use<Bool>(true)
  Ret
}

func void @test.testDivergentExpressionBranch(bool %18) {
  branch %18, @22, @21
label @21:
  CallBuiltin void myte_exit(1)
  continue @22
label @22:
  Call void @test.use<Int>(1)
  Ret
}

func void @test.testContinueBranch(bool %19) {
  branch true, @23, @26
label @23:
  branch %19, @24, @25
label @24:
  Call void @test.use<Int>(1)
  continue @test.testContinueBranch
label @25:
  Call void @test.use<Bool>(false)
  continue @test.testContinueBranch
label @26:
  Ret
}

func void @test.testBreakBranch(bool %20) {
  branch true, @27, @30
label @27:
  branch %20, @28, @29
label @28:
  Call void @test.use<Int>(1)
  continue @test.testBreakBranch
label @29:
  Call void @test.use<Bool>(false)
  continue @30
label @30:
  Ret
}

func void @test.use<Bool>(bool %21) {
  Ret
}

func void @test.use<Function>(fn %22) {
  Ret
}

func void @test.use<Int>(int %23) {
  Ret
}

func void @test.use<test.ZeroSize>() {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testSimpleIf)
  Call void @test.use<Function>(@test.testIfWithExpressions)
  Call void @test.use<Function>(@test.testNestedIfStatementInExpressionPosition)
  Call void @test.use<Function>(@test.testZeroSizeIfExpression)
  Call void @test.use<Function>(@test.testReturnBranch)
  Call void @test.use<Function>(@test.testReturnBlockBranch)
  Call void @test.use<Function>(@test.testDivergentExpressionBranch)
  Call void @test.use<Function>(@test.testContinueBranch)
  Call void @test.use<Function>(@test.testBreakBranch)
  Ret 0
}
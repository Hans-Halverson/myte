func bool @test.bool() {
  Ret true
}

func int @test.testSimpleIf() {
  %0 := Call bool @test.bool()
  branch %0, @1, @0
label @0:
  continue @1
label @1:
  %1 := Phi int @test.testSimpleIf:1, @0:2
  Ret %1
}

func int @test.testIfWithExpressions(int %0, int %1) {
  %2 := Call bool @test.bool()
  branch %2, @0, @1
label @0:
  %3 := Add int %0, %1
  continue @2
label @1:
  %4 := Mul int %0, %1
  %5 := Add int %4, %0
  continue @2
label @2:
  %6 := Phi int @0:%3, @1:%5
  Ret %6
}

func int @test.testNestedIfStatementInExpressionPosition() {
  %0 := Call bool @test.bool()
  branch %0, @0, @3
label @0:
  %1 := Call bool @test.bool()
  branch %1, @2, @1
label @1:
  continue @2
label @2:
  %2 := Phi int @0:1, @1:2
  continue @6
label @3:
  %3 := Call bool @test.bool()
  branch %3, @5, @4
label @4:
  continue @5
label @5:
  %4 := Phi int @3:3, @4:4
  continue @6
label @6:
  %5 := Phi int @2:%2, @5:%4
  Ret %5
}

func void @test.testZeroSizeIfExpression() {
  %0 := Call bool @test.bool()
  branch %0, @0, @1
label @0:
  Call void @test.use<Bool>(true)
  continue @2
label @1:
  Call void @test.use<Bool>(false)
  continue @2
label @2:
  Call void @test.use<test.ZeroSize>()
  Ret
}

func void @test.testReturnBranch(bool %0) {
  branch %0, @0, @2
label @0:
  Call void @test.use<Int>(1)
  branch %0, @2, @1
label @1:
  Call void @test.use<Int>(2)
  continue @2
label @2:
  Ret
}

func void @test.testReturnBlockBranch(bool %0) {
  branch %0, @0, @1
label @0:
  Call void @test.use<Int>(1)
  continue @2
label @1:
  Call void @test.use<Bool>(true)
  continue @2
label @2:
  Ret
}

func void @test.testDivergentExpressionBranch(bool %0) {
  branch %0, @1, @0
label @0:
  Call void myte.builtin.exit(1)
  continue @1
label @1:
  Call void @test.use<Int>(1)
  Ret
}

func void @test.testContinueBranch(bool %0) {
  branch true, @0, @3
label @0:
  branch %0, @1, @2
label @1:
  Call void @test.use<Int>(1)
  continue @test.testContinueBranch
label @2:
  Call void @test.use<Bool>(false)
  continue @test.testContinueBranch
label @3:
  Ret
}

func void @test.testBreakBranch(bool %0) {
  branch true, @0, @3
label @0:
  branch %0, @1, @2
label @1:
  Call void @test.use<Int>(1)
  continue @test.testBreakBranch
label @2:
  Call void @test.use<Bool>(false)
  continue @3
label @3:
  Ret
}

func void @test.use<Bool>(bool %0) {
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func void @test.use<Int>(int %0) {
  Ret
}

func void @test.use<test.ZeroSize>() {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testSimpleIf)
  Call void @test.use<Function>(@test.testIfWithExpressions)
  Call void @test.use<Function>(@test.testNestedIfStatementInExpressionPosition)
  Call void @test.use<Function>(@test.testZeroSizeIfExpression)
  Call void @test.use<Function>(@test.testReturnBranch)
  Call void @test.use<Function>(@test.testReturnBlockBranch)
  Call void @test.use<Function>(@test.testDivergentExpressionBranch)
  Call void @test.use<Function>(@test.testContinueBranch)
  Call void @test.use<Function>(@test.testBreakBranch)
  Ret 0
}
type _ZeroSize {}

global _ZeroSize @_ZeroSize = uninitialized

func void @test.ints() {
  %0 := Eq int 1, 2
  %1 := Eq int 1, 2
  %2 := Eq int 1, 2
  %3 := LogNot %2
  Ret
}

func void @test.bytes(byte %4, byte %5) {
  %6 := Eq byte %4, %5
  %7 := Eq byte %4, %5
  %8 := Eq byte %4, %5
  %9 := LogNot %8
  Ret
}

func void @test.longs(long %10, long %11) {
  %12 := Eq long %10, %11
  %13 := Eq long %10, %11
  %14 := Eq long %10, %11
  %15 := LogNot %14
  Ret
}

func void @test.units() {
  %16 := Call bool @std.unit.Unit.equals(@_ZeroSize)
  %17 := Call bool @std.unit.Unit.equals(@_ZeroSize)
  %18 := Call bool @std.unit.Unit.equals(@_ZeroSize)
  %19 := LogNot %18
  Ret
}

func void @test.bools(bool %20, bool %21) {
  %22 := Eq bool %20, %21
  %23 := Eq bool %20, %21
  %24 := Eq bool %20, %21
  %25 := LogNot %24
  Ret
}

func void @test.equatableType(std.string.String* %26, std.string.String* %27) {
  %28 := Call bool @std.string.String.equals(%26, %27)
  %29 := Call bool @std.string.String.equals(%26, %27)
  %30 := LogNot %29
  Ret
}

func void @test.use<Function>(fn %31) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.ints)
  Call void @test.use<Function>(@test.bytes)
  Call void @test.use<Function>(@test.longs)
  Call void @test.use<Function>(@test.units)
  Call void @test.use<Function>(@test.bools)
  Call void @test.use<Function>(@test.equatableType)
  Ret 0
}
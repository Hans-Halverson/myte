type _ZeroSize {}

global _ZeroSize @_ZeroSize = uninitialized

func void @test.ints() {
  %0 := Eq int 1, 2
  %1 := Eq int 1, 2
  %2 := Eq int 1, 2
  %3 := LogNot %2
  Ret
}

func void @test.bytes(byte %0, byte %1) {
  %2 := Eq byte %0, %1
  %3 := Eq byte %0, %1
  %4 := Eq byte %0, %1
  %5 := LogNot %4
  Ret
}

func void @test.longs(long %0, long %1) {
  %2 := Eq long %0, %1
  %3 := Eq long %0, %1
  %4 := Eq long %0, %1
  %5 := LogNot %4
  Ret
}

func void @test.units() {
  %0 := Call long @std.unit.Unit.equals(@_ZeroSize)
  %1 := Call long @std.unit.Unit.equals(@_ZeroSize)
  %2 := Call long @std.unit.Unit.equals(@_ZeroSize)
  %3 := BitXor long, %2 2
  Ret
}

func void @test.bools(long %0, long %1) {
  %2 := Eq long %0, %1
  %3 := Eq long %0, %1
  %4 := Eq long %0, %1
  %5 := LogNot %4
  Ret
}

func void @test.equatableType(std.string.String* %0, std.string.String* %1) {
  %2 := Call long @std.string.String.equals(%0, %1)
  %3 := Call long @std.string.String.equals(%0, %1)
  %4 := BitXor long, %3 2
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.ints)
  Call void @test.use<Function>(@test.bytes)
  Call void @test.use<Function>(@test.longs)
  Call void @test.use<Function>(@test.units)
  Call void @test.use<Function>(@test.bools)
  Call void @test.use<Function>(@test.equatableType)
  Ret 0
}
type $tuple<Bool,Unit> {bool}

type $tuple<Byte,Long> {byte, long}

type $tuple<Int,Byte,(Bool,Unit)> {int, byte, $tuple<Bool,Unit>*}

type $tuple<Int,Int> {int, int}

type $tuple<Long,Long> {long, long}

type $tuple<Unit,Byte> {byte}

type test.Tup1<(Unit,Byte)> {int, $tuple<Unit,Byte>*}

type test.Tup1<Bool> {bool, int}

type test.Tup1<Byte> {byte, int}

type test.Tup1<Int> {int, int}

type test.Tup1<test.Rec1<Int,Long>> {int, test.Rec1<Int,Long>*}

func void @test.useTup1(test.Tup1<Int>* %0, test.Tup1<Bool>* %1) {
  Ret
}

func void @test.duplicateInstances(test.Tup1<Int>* %0, test.Tup1<Int>* %1) {
  Ret
}

type test.Rec1<Int,Bool> {bool, int}

type test.Rec1<Int,Long> {int, long}

type test.Rec1<Long,Long> {long, long}

type test.Rec1<test.Tup1<Byte>,Long> {test.Tup1<Byte>*, long}

func void @test.useRec1(test.Rec1<Int,Bool>* %0, test.Rec1<Long,Long>* %1) {
  Ret
}

func void @test.adtTypeArgs(test.Tup1<test.Rec1<Int,Long>>* %0, test.Rec1<test.Tup1<Byte>,Long>* %1) {
  Ret
}

func void @test.tupleTypeArgs(test.Tup1<(Unit,Byte)>* %0) {
  Ret
}

func void @test.useAnonTup($tuple<Int,Int>* %0, $tuple<Byte,Long>* %1, $tuple<Int,Byte,(Bool,Unit)>* %2) {
  Ret
}

type test.TestVec<Int> {int, int, $tuple<Int,Int>*}

type test.TestVec<Long> {int, int, $tuple<Long,Long>*}

func void @test.useTestVec(test.TestVec<Int>* %0, test.TestVec<Long>* %1) {
  Ret
}

func int @test.main() {
  Ret 0
}
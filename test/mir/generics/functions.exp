type _closure {fn, byte*}

type test.Tup1<Bool> {bool, byte[3], int}

type test.Tup1<Byte> {byte, byte[3], int}

type test.Tup1<Int> {int, int}

type test.Tup1<test.Tup1<Byte>> {int, byte[4], test.Tup1<Byte>*}

func bool @test.id<Bool>(bool %0) {
  Ret %0
}

func int @test.id<Int>(int %0) {
  Ret %0
}

func void @test.id<Unit>() {
  Ret
}

func test.Tup1<Byte>* @test.id<test.Tup1<Byte>>(test.Tup1<Byte>* %0) {
  Ret %0
}

func test.Tup1<Bool>* @test.singleParameter<Bool>(bool %0) {
  %1 := Call bool @test.id<Bool>(%0)
  %2 := Call test.Tup1<Bool>* myte.builtin.alloc(1)
  %3 := GetPointer int, test.Tup1<Bool>* %2.2
  Store int %3, 1
  %4 := GetPointer bool, test.Tup1<Bool>* %2.0
  Store bool %4, %1
  Ret %2
}

func test.Tup1<Int>* @test.singleParameter<Int>(int %0) {
  %1 := Call int @test.id<Int>(%0)
  %2 := Call test.Tup1<Int>* myte.builtin.alloc(1)
  %3 := GetPointer int, test.Tup1<Int>* %2.0
  Store int %3, 1
  %4 := GetPointer int, test.Tup1<Int>* %2.1
  Store int %4, %1
  Ret %2
}

func test.Tup1<test.Tup1<Byte>>* @test.singleParameter<test.Tup1<Byte>>(test.Tup1<Byte>* %0) {
  %1 := Call test.Tup1<Byte>* @test.id<test.Tup1<Byte>>(%0)
  %2 := Call test.Tup1<test.Tup1<Byte>>* myte.builtin.alloc(1)
  %3 := GetPointer int, test.Tup1<test.Tup1<Byte>>* %2.0
  Store int %3, 1
  %4 := GetPointer test.Tup1<Byte>*, test.Tup1<test.Tup1<Byte>>* %2.2
  Store test.Tup1<Byte>* %4, %1
  Ret %2
}

func void @test.testSingleParameter() {
  %0 := Call test.Tup1<Int>* @test.singleParameter<Int>(1)
  %1 := Call test.Tup1<Bool>* @test.singleParameter<Bool>(true)
  %2 := Call test.Tup1<Byte>* myte.builtin.alloc(1)
  %3 := GetPointer int, test.Tup1<Byte>* %2.2
  Store int %3, 1
  %4 := GetPointer byte, test.Tup1<Byte>* %2.0
  Store byte %4, 1
  %5 := Call test.Tup1<test.Tup1<Byte>>* @test.singleParameter<test.Tup1<Byte>>(%2)
  Ret
}

func _closure* @test.testInstantiationFromNonCallUse() {
  Ret @_closure$test.id<Unit>
}

global _closure @_closure$test.id<Unit> = {@test.id<Unit>, null}

func int @test.main() {
  Ret 0
}
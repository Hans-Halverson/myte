type $tuple<Int,Bool> {int, bool}

type $tuple<Int,Byte,(Int,Bool)> {int, byte, $tuple<Int,Bool>*}

type $tuple<Int,Int> {int, int}

type test.Tup1<Bool> {bool, int}

type test.Tup1<Int> {int, int}

func void @test.testConstructor() {
  %0 := Call test.Tup1<Int>* myte.builtin.alloc(1)
  %1 := GetPointer int, test.Tup1<Int>* %0.0
  Store int %1, 1
  %2 := GetPointer int, test.Tup1<Int>* %0.1
  Store int %2, 2
  %3 := Call test.Tup1<Bool>* myte.builtin.alloc(1)
  %4 := GetPointer int, test.Tup1<Bool>* %3.1
  Store int %4, 1
  %5 := GetPointer bool, test.Tup1<Bool>* %3.0
  Store bool %5, true
  Ret
}

func void @test.testAnonymousConstructor() {
  %0 := Call $tuple<Int,Int>* myte.builtin.alloc(1)
  %1 := GetPointer int, $tuple<Int,Int>* %0.0
  Store int %1, 1
  %2 := GetPointer int, $tuple<Int,Int>* %0.1
  Store int %2, 2
  %3 := Call $tuple<Int,Bool>* myte.builtin.alloc(1)
  %4 := GetPointer int, $tuple<Int,Bool>* %3.0
  Store int %4, 1
  %5 := GetPointer bool, $tuple<Int,Bool>* %3.1
  Store bool %5, true
  %6 := Call $tuple<Int,Byte,(Int,Bool)>* myte.builtin.alloc(1)
  %7 := GetPointer int, $tuple<Int,Byte,(Int,Bool)>* %6.0
  Store int %7, 1
  %8 := GetPointer byte, $tuple<Int,Byte,(Int,Bool)>* %6.1
  Store byte %8, 2
  %9 := Call $tuple<Int,Bool>* myte.builtin.alloc(1)
  %10 := GetPointer int, $tuple<Int,Bool>* %9.0
  Store int %10, 3
  %11 := GetPointer bool, $tuple<Int,Bool>* %9.1
  Store bool %11, false
  %12 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Byte,(Int,Bool)>* %6.2
  Store $tuple<Int,Bool>* %12, %9
  Ret
}

func void @test.testIndexing(test.Tup1<Int>* %0, test.Tup1<Bool>* %1) {
  %2 := GetPointer int, test.Tup1<Int>* %0.1
  %3 := Load int %2
  %4 := GetPointer bool, test.Tup1<Bool>* %1.0
  %5 := Load bool %4
  Ret
}

func void @test.testAnonymousIndexing($tuple<Int,Int>* %0, $tuple<Int,Bool>* %1) {
  %2 := GetPointer int, $tuple<Int,Int>* %0.1
  %3 := Load int %2
  %4 := GetPointer bool, $tuple<Int,Bool>* %1.1
  %5 := Load bool %4
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testConstructor)
  Call void @test.use<Function>(@test.testAnonymousConstructor)
  Call void @test.use<Function>(@test.testIndexing)
  Call void @test.use<Function>(@test.testAnonymousIndexing)
  Ret 0
}
type $tuple<int,bool> {int, bool}

type $tuple<int,byte,$tuple<int,bool>*> {int, byte, $tuple<int,bool>*}

type $tuple<int,int> {int, int}

type test.Tup1<bool> {int, bool}

type test.Tup1<int> {int, int}

func unit @test.testConstructor() {
  %0 := CallBuiltin test.Tup1<int>* myte_alloc(1)
  %1 := GetPointer int, test.Tup1<int>* %0.0
  Store int %1, 1
  %2 := GetPointer int, test.Tup1<int>* %0.1
  Store int %2, 2
  %3 := CallBuiltin test.Tup1<bool>* myte_alloc(1)
  %4 := GetPointer int, test.Tup1<bool>* %3.0
  Store int %4, 1
  %5 := GetPointer bool, test.Tup1<bool>* %3.1
  Store bool %5, true
  Ret
}

func unit @test.testAnonymousConstructor() {
  %6 := CallBuiltin $tuple<int,int>* myte_alloc(1)
  %7 := GetPointer int, $tuple<int,int>* %6.0
  Store int %7, 1
  %8 := GetPointer int, $tuple<int,int>* %6.1
  Store int %8, 2
  %9 := CallBuiltin $tuple<int,bool>* myte_alloc(1)
  %10 := GetPointer int, $tuple<int,bool>* %9.0
  Store int %10, 1
  %11 := GetPointer bool, $tuple<int,bool>* %9.1
  Store bool %11, true
  %12 := CallBuiltin $tuple<int,byte,$tuple<int,bool>*>* myte_alloc(1)
  %13 := GetPointer int, $tuple<int,byte,$tuple<int,bool>*>* %12.0
  Store int %13, 1
  %14 := GetPointer byte, $tuple<int,byte,$tuple<int,bool>*>* %12.1
  Store byte %14, 2
  %15 := CallBuiltin $tuple<int,bool>* myte_alloc(1)
  %16 := GetPointer int, $tuple<int,bool>* %15.0
  Store int %16, 3
  %17 := GetPointer bool, $tuple<int,bool>* %15.1
  Store bool %17, false
  %18 := GetPointer $tuple<int,bool>*, $tuple<int,byte,$tuple<int,bool>*>* %12.2
  Store $tuple<int,bool>* %18, %15
  Ret
}

func unit @test.testIndexing(test.Tup1<int>* %19, test.Tup1<bool>* %20) {
  %21 := GetPointer int, test.Tup1<int>* %19.1
  %22 := Load int %21
  %23 := GetPointer bool, test.Tup1<bool>* %20.1
  %24 := Load bool %23
  Ret
}

func unit @test.testAnonymousIndexing($tuple<int,int>* %25, $tuple<int,bool>* %26) {
  %27 := GetPointer int, $tuple<int,int>* %25.1
  %28 := Load int %27
  %29 := GetPointer bool, $tuple<int,bool>* %26.1
  %30 := Load bool %29
  Ret
}

func int @test.main() {
  Ret 0
}
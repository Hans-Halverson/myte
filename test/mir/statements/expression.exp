func unit @test.testSimpleExpressionStatements() {
  %0 := Mul int 2, 3
  %1 := Div int %0, 4
  %2 := Add int 1, %1
  Ret
}

func unit @test.testExpressionStatementSingleValue(bool %3) {
  branch %3, @1, @0
label @0:
  continue @1
label @1:
  %4 := Phi int @test.testExpressionStatementSingleValue:1, @0:2
  %5 := Call unit @test.use<Int>(%4)
  Ret
}

func unit @test.testExpressionStatementsBeforeValue(bool %6) {
  branch %6, @2, @3
label @2:
  %7 := Call unit @test.use<Int>(1)
  %8 := Call unit @test.use<Int>(2)
  continue @4
label @3:
  %9 := Call unit @test.use<Bool>(%6)
  continue @4
label @4:
  %10 := Phi int @2:1, @3:2
  %11 := Call unit @test.use<Int>(%10)
  Ret
}

func unit @test.testExpressionStatementUnitValue(bool %12) {
  %13 := Call unit @test.use<Unit>(())
  branch %12, @5, @6
label @5:
  %14 := Call unit @test.use<Int>(2)
  continue @6
label @6:
  %15 := Call unit @test.use<Unit>(())
  Ret
}

func unit @test.testWhileUnitValue(bool %16) {
  branch %16, @7, @9
label @7:
  branch %16, @8, @9
label @8:
  %17 := Call unit @test.use<Int>(1)
  continue @7
label @9:
  %18 := Call unit @test.use<Unit>(())
  Ret
}

func unit @test.testForUnitValue(bool %19, std.vec.Vec<Int>* %20) {
  branch %19, @10, @13
label @10:
  %21 := Call std.vec.VecIterator<Int>* @std.vec.Vec.toIterator<Int>(%20)
  continue @11
label @11:
  %22 := Call std.option.Option<Int>* @std.vec.VecIterator.next<Int>(%21)
  %23 := Load byte %22
  %24 := Eq byte %23, 1
  branch %24, @12, @13
label @12:
  %25 := GetPointer int, std.option.Option<Int>::Some* %22.2
  %26 := Load int %25
  %27 := Call unit @test.use<Int>(%26)
  continue @11
label @13:
  %28 := Call unit @test.use<Unit>(())
  Ret
}

func unit @test.testVariableDeclarationUnitValue(bool %29) {
  %30 := Call unit @test.use<Unit>(())
  Ret
}

func unit @test.testAssignmentUnitValue(bool %31) {
  branch %31, @14, @15
label @14:
  %32 := Call unit @test.use<Int>(1)
  continue @15
label @15:
  %33 := Call unit @test.use<Unit>(())
  Ret
}

func unit @test.use<Bool>(bool %34) {
  Ret
}

func unit @test.use<Function>(fn %35) {
  Ret
}

func unit @test.use<Int>(int %36) {
  Ret
}

func unit @test.use<Unit>(unit %37) {
  Ret
}

func int @test.main() {
  %38 := Call unit @test.use<Function>(@test.testSimpleExpressionStatements)
  %39 := Call unit @test.use<Function>(@test.testExpressionStatementSingleValue)
  %40 := Call unit @test.use<Function>(@test.testExpressionStatementsBeforeValue)
  %41 := Call unit @test.use<Function>(@test.testExpressionStatementUnitValue)
  %42 := Call unit @test.use<Function>(@test.testWhileUnitValue)
  %43 := Call unit @test.use<Function>(@test.testForUnitValue)
  %44 := Call unit @test.use<Function>(@test.testVariableDeclarationUnitValue)
  %45 := Call unit @test.use<Function>(@test.testAssignmentUnitValue)
  Ret 0
}
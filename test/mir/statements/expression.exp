func void @test.testSimpleExpressionStatements() {
  %0 := Mul int 2, 3
  %1 := Div int %0, 4
  %2 := Add int 1, %1
  Ret
}

func void @test.testExpressionStatementSingleValue(bool %0) {
  branch %0, @1, @0
label @0:
  continue @1
label @1:
  %1 := Phi int @test.testExpressionStatementSingleValue:1, @0:2
  Call void @test.use<Int>(%1)
  Ret
}

func void @test.testExpressionStatementsBeforeValue(bool %0) {
  branch %0, @0, @1
label @0:
  Call void @test.use<Int>(1)
  Call void @test.use<Int>(2)
  continue @2
label @1:
  Call void @test.use<Bool>(%0)
  continue @2
label @2:
  %1 := Phi int @0:1, @1:2
  Call void @test.use<Int>(%1)
  Ret
}

func void @test.testExpressionStatementUnitValue(bool %0) {
  Call void @test.use<Unit>()
  branch %0, @0, @1
label @0:
  Call void @test.use<Int>(2)
  continue @1
label @1:
  Call void @test.use<Unit>()
  Ret
}

func void @test.testWhileUnitValue(bool %0) {
  branch %0, @0, @2
label @0:
  branch %0, @1, @2
label @1:
  Call void @test.use<Int>(1)
  continue @0
label @2:
  Call void @test.use<Unit>()
  Ret
}

func void @test.testForUnitValue(bool %0, std.vec.Vec<Int>* %1) {
  branch %0, @0, @3
label @0:
  %2 := Call std.vec.VecIterator<Int>* @std.vec.Vec.toIterator<Int>(%1)
  continue @1
label @1:
  %3 := Call std.option.Option<Int>* @std.vec.VecIterator.next<Int>(%2)
  %4 := Cast std.option.Option<Int>* %3 to byte*
  %5 := Load byte %4
  %6 := Eq byte %5, 1
  branch %6, @2, @3
label @2:
  %7 := Cast std.option.Option<Int>* %3 to std.option.Option<Int>::Some*
  %8 := GetPointer int, std.option.Option<Int>::Some* %7.2
  %9 := Load int %8
  Call void @test.use<Int>(%9)
  continue @1
label @3:
  Call void @test.use<Unit>()
  Ret
}

func void @test.testVariableDeclarationUnitValue(bool %0) {
  Call void @test.use<Unit>()
  Ret
}

func void @test.testAssignmentUnitValue(bool %0) {
  branch %0, @0, @1
label @0:
  Call void @test.use<Int>(1)
  continue @1
label @1:
  Call void @test.use<Unit>()
  Ret
}

func void @test.use<Bool>(bool %0) {
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func void @test.use<Int>(int %0) {
  Ret
}

func void @test.use<Unit>() {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testSimpleExpressionStatements)
  Call void @test.use<Function>(@test.testExpressionStatementSingleValue)
  Call void @test.use<Function>(@test.testExpressionStatementsBeforeValue)
  Call void @test.use<Function>(@test.testExpressionStatementUnitValue)
  Call void @test.use<Function>(@test.testWhileUnitValue)
  Call void @test.use<Function>(@test.testForUnitValue)
  Call void @test.use<Function>(@test.testVariableDeclarationUnitValue)
  Call void @test.use<Function>(@test.testAssignmentUnitValue)
  Ret 0
}
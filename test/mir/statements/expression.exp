func void @test.testSimpleExpressionStatements() {
  %0 := Mul int 2, 3
  %1 := Div int %0, 4
  %2 := Add int 1, %1
  Ret
}

func void @test.testExpressionStatementSingleValue(bool %3) {
  branch %3, @1, @0
label @0:
  continue @1
label @1:
  %4 := Phi int @test.testExpressionStatementSingleValue:1, @0:2
  Call void @test.use<Int>(%4)
  Ret
}

func void @test.testExpressionStatementsBeforeValue(bool %5) {
  branch %5, @2, @3
label @2:
  Call void @test.use<Int>(1)
  Call void @test.use<Int>(2)
  continue @4
label @3:
  Call void @test.use<Bool>(%5)
  continue @4
label @4:
  %6 := Phi int @2:1, @3:2
  Call void @test.use<Int>(%6)
  Ret
}

func void @test.testExpressionStatementUnitValue(bool %7) {
  Call void @test.use<Unit>()
  branch %7, @5, @6
label @5:
  Call void @test.use<Int>(2)
  continue @6
label @6:
  Call void @test.use<Unit>()
  Ret
}

func void @test.testWhileUnitValue(bool %8) {
  branch %8, @7, @9
label @7:
  branch %8, @8, @9
label @8:
  Call void @test.use<Int>(1)
  continue @7
label @9:
  Call void @test.use<Unit>()
  Ret
}

func void @test.testForUnitValue(bool %9, std.vec.Vec<Int>* %10) {
  branch %9, @10, @13
label @10:
  %11 := Call std.vec.VecIterator<Int>* @std.vec.Vec.toIterator<Int>(%10)
  continue @11
label @11:
  %12 := Call std.option.Option<Int>* @std.vec.VecIterator.next<Int>(%11)
  %13 := Load byte %12
  %14 := Eq byte %13, 1
  branch %14, @12, @13
label @12:
  %15 := GetPointer int, std.option.Option<Int>::Some* %12.2
  %16 := Load int %15
  Call void @test.use<Int>(%16)
  continue @11
label @13:
  Call void @test.use<Unit>()
  Ret
}

func void @test.testVariableDeclarationUnitValue(bool %17) {
  Call void @test.use<Unit>()
  Ret
}

func void @test.testAssignmentUnitValue(bool %18) {
  branch %18, @14, @15
label @14:
  Call void @test.use<Int>(1)
  continue @15
label @15:
  Call void @test.use<Unit>()
  Ret
}

func void @test.use<Bool>(bool %19) {
  Ret
}

func void @test.use<Function>(fn %20) {
  Ret
}

func void @test.use<Int>(int %21) {
  Ret
}

func void @test.use<Unit>() {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testSimpleExpressionStatements)
  Call void @test.use<Function>(@test.testExpressionStatementSingleValue)
  Call void @test.use<Function>(@test.testExpressionStatementsBeforeValue)
  Call void @test.use<Function>(@test.testExpressionStatementUnitValue)
  Call void @test.use<Function>(@test.testWhileUnitValue)
  Call void @test.use<Function>(@test.testForUnitValue)
  Call void @test.use<Function>(@test.testVariableDeclarationUnitValue)
  Call void @test.use<Function>(@test.testAssignmentUnitValue)
  Ret 0
}
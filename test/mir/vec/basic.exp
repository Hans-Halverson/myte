func void @_init() {
  %0 := Call std.vec.Vec<String>* @std.vec.Vec.new<String>()
  Store std.vec.Vec<String>* @std.sys.args, %0
  Ret
}

type std.vec.Vec<Bool> {bool*, int, int}

type std.vec.Vec<Int> {int*, int, int}

type std.vec.Vec<String> {std.string.String**, int, int}

func std.vec.Vec<String>* @std.vec.Vec.new<String>() {
  %1 := CallBuiltin std.vec.Vec<String>* myte_alloc(1)
  %2 := GetPointer std.string.String**, std.vec.Vec<String>* %1.0
  Store std.string.String** %2, 0
  %3 := GetPointer int, std.vec.Vec<String>* %1.1
  Store int %3, 0
  %4 := GetPointer int, std.vec.Vec<String>* %1.2
  Store int %4, 0
  Ret %1
}

func bool @std.vec.Vec.get<Bool>(std.vec.Vec<Bool>* %5, int %6) {
  %7 := Lt int %6, 0
  branch %7, @1, @0
label @0:
  %8 := GetPointer int, std.vec.Vec<Bool>* %5.1
  %9 := Load int %8
  %10 := GtEq int %6, %9
  continue @1
label @1:
  %11 := Phi bool @std.vec.Vec.get<Bool>:true, @0:%10
  branch %11, @2, @3
label @2:
  Call void @std.sys.abort()
  continue @3
label @3:
  %12 := GetPointer bool*, std.vec.Vec<Bool>* %5.0
  %13 := Load bool* %12
  %14 := GetPointer bool, bool* %13[int %6]
  %15 := Load bool %14
  Ret %15
}

func int @std.vec.Vec.get<Int>(std.vec.Vec<Int>* %16, int %17) {
  %18 := Lt int %17, 0
  branch %18, @5, @4
label @4:
  %19 := GetPointer int, std.vec.Vec<Int>* %16.1
  %20 := Load int %19
  %21 := GtEq int %17, %20
  continue @5
label @5:
  %22 := Phi bool @std.vec.Vec.get<Int>:true, @4:%21
  branch %22, @6, @7
label @6:
  Call void @std.sys.abort()
  continue @7
label @7:
  %23 := GetPointer int*, std.vec.Vec<Int>* %16.0
  %24 := Load int* %23
  %25 := GetPointer int, int* %24[int %17]
  %26 := Load int %25
  Ret %26
}

func void @std.vec.Vec.set<Bool>(std.vec.Vec<Bool>* %27, int %28, bool %29) {
  %30 := Lt int %28, 0
  branch %30, @9, @8
label @8:
  %31 := GetPointer int, std.vec.Vec<Bool>* %27.1
  %32 := Load int %31
  %33 := GtEq int %28, %32
  continue @9
label @9:
  %34 := Phi bool @std.vec.Vec.set<Bool>:true, @8:%33
  branch %34, @10, @11
label @10:
  Call void @std.sys.abort()
  continue @11
label @11:
  %35 := GetPointer bool*, std.vec.Vec<Bool>* %27.0
  %36 := Load bool* %35
  %37 := GetPointer bool, bool* %36[int %28]
  Store bool %37, %29
  Ret
}

func void @std.vec.Vec.set<Int>(std.vec.Vec<Int>* %38, int %39, int %40) {
  %41 := Lt int %39, 0
  branch %41, @13, @12
label @12:
  %42 := GetPointer int, std.vec.Vec<Int>* %38.1
  %43 := Load int %42
  %44 := GtEq int %39, %43
  continue @13
label @13:
  %45 := Phi bool @std.vec.Vec.set<Int>:true, @12:%44
  branch %45, @14, @15
label @14:
  Call void @std.sys.abort()
  continue @15
label @15:
  %46 := GetPointer int*, std.vec.Vec<Int>* %38.0
  %47 := Load int* %46
  %48 := GetPointer int, int* %47[int %39]
  Store int %48, %40
  Ret
}

func void @std.vec.Vec.push<Bool>(std.vec.Vec<Bool>* %49, bool %50) {
  %51 := GetPointer int, std.vec.Vec<Bool>* %49.1
  %52 := Load int %51
  %53 := GetPointer int, std.vec.Vec<Bool>* %49.2
  %54 := Load int %53
  %55 := Eq int %52, %54
  branch %55, @16, @17
label @16:
  Call void @std.vec.Vec.resize<Bool>(%49)
  continue @17
label @17:
  %56 := GetPointer bool*, std.vec.Vec<Bool>* %49.0
  %57 := Load bool* %56
  %58 := GetPointer int, std.vec.Vec<Bool>* %49.1
  %59 := Load int %58
  %60 := GetPointer bool, bool* %57[int %59]
  Store bool %60, %50
  %61 := GetPointer int, std.vec.Vec<Bool>* %49.1
  %62 := Load int %61
  %63 := Add int %62, 1
  %64 := GetPointer int, std.vec.Vec<Bool>* %49.1
  Store int %64, %63
  Ret
}

func void @std.vec.Vec.push<Int>(std.vec.Vec<Int>* %65, int %66) {
  %67 := GetPointer int, std.vec.Vec<Int>* %65.1
  %68 := Load int %67
  %69 := GetPointer int, std.vec.Vec<Int>* %65.2
  %70 := Load int %69
  %71 := Eq int %68, %70
  branch %71, @18, @19
label @18:
  Call void @std.vec.Vec.resize<Int>(%65)
  continue @19
label @19:
  %72 := GetPointer int*, std.vec.Vec<Int>* %65.0
  %73 := Load int* %72
  %74 := GetPointer int, std.vec.Vec<Int>* %65.1
  %75 := Load int %74
  %76 := GetPointer int, int* %73[int %75]
  Store int %76, %66
  %77 := GetPointer int, std.vec.Vec<Int>* %65.1
  %78 := Load int %77
  %79 := Add int %78, 1
  %80 := GetPointer int, std.vec.Vec<Int>* %65.1
  Store int %80, %79
  Ret
}

func void @std.vec.Vec.push<String>(std.vec.Vec<String>* %81, std.string.String* %82) {
  %83 := GetPointer int, std.vec.Vec<String>* %81.1
  %84 := Load int %83
  %85 := GetPointer int, std.vec.Vec<String>* %81.2
  %86 := Load int %85
  %87 := Eq int %84, %86
  branch %87, @20, @21
label @20:
  Call void @std.vec.Vec.resize<String>(%81)
  continue @21
label @21:
  %88 := GetPointer std.string.String**, std.vec.Vec<String>* %81.0
  %89 := Load std.string.String** %88
  %90 := GetPointer int, std.vec.Vec<String>* %81.1
  %91 := Load int %90
  %92 := GetPointer std.string.String*, std.string.String** %89[int %91]
  Store std.string.String* %92, %82
  %93 := GetPointer int, std.vec.Vec<String>* %81.1
  %94 := Load int %93
  %95 := Add int %94, 1
  %96 := GetPointer int, std.vec.Vec<String>* %81.1
  Store int %96, %95
  Ret
}

func void @std.vec.Vec.resize<Bool>(std.vec.Vec<Bool>* %97) {
  %98 := GetPointer int, std.vec.Vec<Bool>* %97.2
  %99 := Load int %98
  %100 := Eq int %99, 0
  branch %100, @23, @22
label @22:
  %101 := Mul int %99, 2
  continue @23
label @23:
  %102 := Phi int @std.vec.Vec.resize<Bool>:1, @22:%101
  %103 := GetPointer int, std.vec.Vec<Bool>* %97.2
  Store int %103, %102
  %104 := CallBuiltin bool* myte_alloc(%102)
  %105 := GetPointer bool*, std.vec.Vec<Bool>* %97.0
  %106 := Load bool* %105
  CallBuiltin void myte_copy(%104, %106, %99)
  %107 := GetPointer bool*, std.vec.Vec<Bool>* %97.0
  Store bool* %107, %104
  Ret
}

func void @std.vec.Vec.resize<Int>(std.vec.Vec<Int>* %108) {
  %109 := GetPointer int, std.vec.Vec<Int>* %108.2
  %110 := Load int %109
  %111 := Eq int %110, 0
  branch %111, @25, @24
label @24:
  %112 := Mul int %110, 2
  continue @25
label @25:
  %113 := Phi int @std.vec.Vec.resize<Int>:1, @24:%112
  %114 := GetPointer int, std.vec.Vec<Int>* %108.2
  Store int %114, %113
  %115 := CallBuiltin int* myte_alloc(%113)
  %116 := GetPointer int*, std.vec.Vec<Int>* %108.0
  %117 := Load int* %116
  CallBuiltin void myte_copy(%115, %117, %110)
  %118 := GetPointer int*, std.vec.Vec<Int>* %108.0
  Store int* %118, %115
  Ret
}

func void @std.vec.Vec.resize<String>(std.vec.Vec<String>* %119) {
  %120 := GetPointer int, std.vec.Vec<String>* %119.2
  %121 := Load int %120
  %122 := Eq int %121, 0
  branch %122, @27, @26
label @26:
  %123 := Mul int %121, 2
  continue @27
label @27:
  %124 := Phi int @std.vec.Vec.resize<String>:1, @26:%123
  %125 := GetPointer int, std.vec.Vec<String>* %119.2
  Store int %125, %124
  %126 := CallBuiltin std.string.String** myte_alloc(%124)
  %127 := GetPointer std.string.String**, std.vec.Vec<String>* %119.0
  %128 := Load std.string.String** %127
  CallBuiltin void myte_copy(%126, %128, %121)
  %129 := GetPointer std.string.String**, std.vec.Vec<String>* %119.0
  Store std.string.String** %129, %126
  Ret
}

func int @test.getInt() {
  Ret 1
}

func void @test.testVecGet(std.vec.Vec<Int>* %130, std.vec.Vec<Bool>* %131) {
  %132 := Call int @std.vec.Vec.get<Int>(%130, 7)
  %133 := Call bool @std.vec.Vec.get<Bool>(%131, 7)
  Ret
}

func void @test.testVecSet(std.vec.Vec<Int>* %134, std.vec.Vec<Bool>* %135) {
  Call void @std.vec.Vec.set<Int>(%134, 7, 8)
  Call void @std.vec.Vec.set<Bool>(%135, 7, true)
  Ret
}

func void @test.testVecPush(std.vec.Vec<Int>* %136, std.vec.Vec<Bool>* %137) {
  Call void @std.vec.Vec.push<Int>(%136, 1)
  Call void @std.vec.Vec.push<Bool>(%137, true)
  Ret
}

func void @test.testVecOperatorAssign(std.vec.Vec<Int>* %138) {
  %139 := Call int @std.vec.Vec.get<Int>(%138, 7)
  %140 := Add int %139, 8
  Call void @std.vec.Vec.set<Int>(%138, 7, %140)
  %141 := Call int @std.vec.Vec.get<Int>(%138, 7)
  %142 := Call int @test.getInt()
  %143 := Add int %141, %142
  Call void @std.vec.Vec.set<Int>(%138, 7, %143)
  Ret
}

func void @test.use<Function>(fn %144) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testVecGet)
  Call void @test.use<Function>(@test.testVecSet)
  Call void @test.use<Function>(@test.testVecPush)
  Call void @test.use<Function>(@test.testVecOperatorAssign)
  Ret 0
}
type _ZeroSize {}

func void @_init() {
  %0 := Call std.vec.Vec<String>* @std.vec.Vec.new<String>()
  Store std.vec.Vec<String>* @std.sys.args, %0
  Ret
}

type std.vec.Vec<Bool> {long*, int, int}

type std.vec.Vec<Int> {int*, int, int}

type std.vec.Vec<String> {std.string.String**, int, int}

type std.vec.Vec<test.ZeroSize> {_ZeroSize*, int, int}

func std.vec.Vec<String>* @std.vec.Vec.new<String>() {
  %0 := CallBuiltin std.vec.Vec<String>* myte_alloc(1)
  %1 := GetPointer std.string.String**, std.vec.Vec<String>* %0.0
  Store std.string.String** %1, 0
  %2 := GetPointer int, std.vec.Vec<String>* %0.1
  Store int %2, 0
  %3 := GetPointer int, std.vec.Vec<String>* %0.2
  Store int %3, 0
  Ret %0
}

func long @std.vec.Vec.get<Bool>(std.vec.Vec<Bool>* %0, int %1) {
  %2 := Lt int %1, 0
  branch %2, @1, @0
label @0:
  %3 := GetPointer int, std.vec.Vec<Bool>* %0.1
  %4 := Load int %3
  %5 := GtEq int %1, %4
  %6 := BoolToValue %5
  continue @1
label @1:
  %7 := Phi long @std.vec.Vec.get<Bool>:3, @0:%6
  %8 := Eq long %7, 3
  branch %8, @2, @3
label @2:
  Call void @std.sys.abort()
  continue @3
label @3:
  %9 := GetPointer long*, std.vec.Vec<Bool>* %0.0
  %10 := Load long* %9
  %11 := GetPointer long, long* %10[int %1]
  %12 := Load long %11
  Ret %12
}

func int @std.vec.Vec.get<Int>(std.vec.Vec<Int>* %0, int %1) {
  %2 := Lt int %1, 0
  branch %2, @1, @0
label @0:
  %3 := GetPointer int, std.vec.Vec<Int>* %0.1
  %4 := Load int %3
  %5 := GtEq int %1, %4
  %6 := BoolToValue %5
  continue @1
label @1:
  %7 := Phi long @std.vec.Vec.get<Int>:3, @0:%6
  %8 := Eq long %7, 3
  branch %8, @2, @3
label @2:
  Call void @std.sys.abort()
  continue @3
label @3:
  %9 := GetPointer int*, std.vec.Vec<Int>* %0.0
  %10 := Load int* %9
  %11 := GetPointer int, int* %10[int %1]
  %12 := Load int %11
  Ret %12
}

func void @std.vec.Vec.get<test.ZeroSize>(std.vec.Vec<test.ZeroSize>* %0, int %1) {
  %2 := Lt int %1, 0
  branch %2, @1, @0
label @0:
  %3 := GetPointer int, std.vec.Vec<test.ZeroSize>* %0.1
  %4 := Load int %3
  %5 := GtEq int %1, %4
  %6 := BoolToValue %5
  continue @1
label @1:
  %7 := Phi long @std.vec.Vec.get<test.ZeroSize>:3, @0:%6
  %8 := Eq long %7, 3
  branch %8, @2, @3
label @2:
  Call void @std.sys.abort()
  continue @3
label @3:
  %9 := GetPointer _ZeroSize*, std.vec.Vec<test.ZeroSize>* %0.0
  %10 := Load _ZeroSize* %9
  Ret
}

func void @std.vec.Vec.set<Bool>(std.vec.Vec<Bool>* %0, int %1, long %2) {
  %3 := Lt int %1, 0
  branch %3, @1, @0
label @0:
  %4 := GetPointer int, std.vec.Vec<Bool>* %0.1
  %5 := Load int %4
  %6 := GtEq int %1, %5
  %7 := BoolToValue %6
  continue @1
label @1:
  %8 := Phi long @std.vec.Vec.set<Bool>:3, @0:%7
  %9 := Eq long %8, 3
  branch %9, @2, @3
label @2:
  Call void @std.sys.abort()
  continue @3
label @3:
  %10 := GetPointer long*, std.vec.Vec<Bool>* %0.0
  %11 := Load long* %10
  %12 := GetPointer long, long* %11[int %1]
  Store long %12, %2
  Ret
}

func void @std.vec.Vec.set<Int>(std.vec.Vec<Int>* %0, int %1, int %2) {
  %3 := Lt int %1, 0
  branch %3, @1, @0
label @0:
  %4 := GetPointer int, std.vec.Vec<Int>* %0.1
  %5 := Load int %4
  %6 := GtEq int %1, %5
  %7 := BoolToValue %6
  continue @1
label @1:
  %8 := Phi long @std.vec.Vec.set<Int>:3, @0:%7
  %9 := Eq long %8, 3
  branch %9, @2, @3
label @2:
  Call void @std.sys.abort()
  continue @3
label @3:
  %10 := GetPointer int*, std.vec.Vec<Int>* %0.0
  %11 := Load int* %10
  %12 := GetPointer int, int* %11[int %1]
  Store int %12, %2
  Ret
}

func void @std.vec.Vec.push<Bool>(std.vec.Vec<Bool>* %0, long %1) {
  %2 := GetPointer int, std.vec.Vec<Bool>* %0.1
  %3 := Load int %2
  %4 := GetPointer int, std.vec.Vec<Bool>* %0.2
  %5 := Load int %4
  %6 := Eq int %3, %5
  branch %6, @0, @1
label @0:
  Call void @std.vec.Vec.resize<Bool>(%0)
  continue @1
label @1:
  %7 := GetPointer long*, std.vec.Vec<Bool>* %0.0
  %8 := Load long* %7
  %9 := GetPointer int, std.vec.Vec<Bool>* %0.1
  %10 := Load int %9
  %11 := GetPointer long, long* %8[int %10]
  Store long %11, %1
  %12 := GetPointer int, std.vec.Vec<Bool>* %0.1
  %13 := Load int %12
  %14 := Add int %13, 1
  %15 := GetPointer int, std.vec.Vec<Bool>* %0.1
  Store int %15, %14
  Ret
}

func void @std.vec.Vec.push<Int>(std.vec.Vec<Int>* %0, int %1) {
  %2 := GetPointer int, std.vec.Vec<Int>* %0.1
  %3 := Load int %2
  %4 := GetPointer int, std.vec.Vec<Int>* %0.2
  %5 := Load int %4
  %6 := Eq int %3, %5
  branch %6, @0, @1
label @0:
  Call void @std.vec.Vec.resize<Int>(%0)
  continue @1
label @1:
  %7 := GetPointer int*, std.vec.Vec<Int>* %0.0
  %8 := Load int* %7
  %9 := GetPointer int, std.vec.Vec<Int>* %0.1
  %10 := Load int %9
  %11 := GetPointer int, int* %8[int %10]
  Store int %11, %1
  %12 := GetPointer int, std.vec.Vec<Int>* %0.1
  %13 := Load int %12
  %14 := Add int %13, 1
  %15 := GetPointer int, std.vec.Vec<Int>* %0.1
  Store int %15, %14
  Ret
}

func void @std.vec.Vec.push<String>(std.vec.Vec<String>* %0, std.string.String* %1) {
  %2 := GetPointer int, std.vec.Vec<String>* %0.1
  %3 := Load int %2
  %4 := GetPointer int, std.vec.Vec<String>* %0.2
  %5 := Load int %4
  %6 := Eq int %3, %5
  branch %6, @0, @1
label @0:
  Call void @std.vec.Vec.resize<String>(%0)
  continue @1
label @1:
  %7 := GetPointer std.string.String**, std.vec.Vec<String>* %0.0
  %8 := Load std.string.String** %7
  %9 := GetPointer int, std.vec.Vec<String>* %0.1
  %10 := Load int %9
  %11 := GetPointer std.string.String*, std.string.String** %8[int %10]
  Store std.string.String* %11, %1
  %12 := GetPointer int, std.vec.Vec<String>* %0.1
  %13 := Load int %12
  %14 := Add int %13, 1
  %15 := GetPointer int, std.vec.Vec<String>* %0.1
  Store int %15, %14
  Ret
}

func void @std.vec.Vec.resize<Bool>(std.vec.Vec<Bool>* %0) {
  %1 := GetPointer int, std.vec.Vec<Bool>* %0.2
  %2 := Load int %1
  %3 := Eq int %2, 0
  branch %3, @1, @0
label @0:
  %4 := Mul int %2, 2
  continue @1
label @1:
  %5 := Phi int @std.vec.Vec.resize<Bool>:1, @0:%4
  %6 := GetPointer int, std.vec.Vec<Bool>* %0.2
  Store int %6, %5
  %7 := CallBuiltin long* myte_alloc(%5)
  %8 := GetPointer long*, std.vec.Vec<Bool>* %0.0
  %9 := Load long* %8
  CallBuiltin void myte_copy(%7, %9, %2)
  %10 := GetPointer long*, std.vec.Vec<Bool>* %0.0
  Store long* %10, %7
  Ret
}

func void @std.vec.Vec.resize<Int>(std.vec.Vec<Int>* %0) {
  %1 := GetPointer int, std.vec.Vec<Int>* %0.2
  %2 := Load int %1
  %3 := Eq int %2, 0
  branch %3, @1, @0
label @0:
  %4 := Mul int %2, 2
  continue @1
label @1:
  %5 := Phi int @std.vec.Vec.resize<Int>:1, @0:%4
  %6 := GetPointer int, std.vec.Vec<Int>* %0.2
  Store int %6, %5
  %7 := CallBuiltin int* myte_alloc(%5)
  %8 := GetPointer int*, std.vec.Vec<Int>* %0.0
  %9 := Load int* %8
  CallBuiltin void myte_copy(%7, %9, %2)
  %10 := GetPointer int*, std.vec.Vec<Int>* %0.0
  Store int* %10, %7
  Ret
}

func void @std.vec.Vec.resize<String>(std.vec.Vec<String>* %0) {
  %1 := GetPointer int, std.vec.Vec<String>* %0.2
  %2 := Load int %1
  %3 := Eq int %2, 0
  branch %3, @1, @0
label @0:
  %4 := Mul int %2, 2
  continue @1
label @1:
  %5 := Phi int @std.vec.Vec.resize<String>:1, @0:%4
  %6 := GetPointer int, std.vec.Vec<String>* %0.2
  Store int %6, %5
  %7 := CallBuiltin std.string.String** myte_alloc(%5)
  %8 := GetPointer std.string.String**, std.vec.Vec<String>* %0.0
  %9 := Load std.string.String** %8
  CallBuiltin void myte_copy(%7, %9, %2)
  %10 := GetPointer std.string.String**, std.vec.Vec<String>* %0.0
  Store std.string.String** %10, %7
  Ret
}

func int @test.getInt() {
  Ret 1
}

func void @test.testVecGet(std.vec.Vec<Int>* %0, std.vec.Vec<Bool>* %1) {
  %2 := Call int @std.vec.Vec.get<Int>(%0, 7)
  %3 := Call long @std.vec.Vec.get<Bool>(%1, 7)
  Ret
}

func void @test.testVecSet(std.vec.Vec<Int>* %0, std.vec.Vec<Bool>* %1) {
  Call void @std.vec.Vec.set<Int>(%0, 7, 8)
  Call void @std.vec.Vec.set<Bool>(%1, 7, 3)
  Ret
}

func void @test.testVecPush(std.vec.Vec<Int>* %0, std.vec.Vec<Bool>* %1) {
  Call void @std.vec.Vec.push<Int>(%0, 1)
  Call void @std.vec.Vec.push<Bool>(%1, 3)
  Ret
}

func void @test.testVecOperatorAssign(std.vec.Vec<Int>* %0) {
  %1 := Call int @std.vec.Vec.get<Int>(%0, 7)
  %2 := Add int %1, 8
  Call void @std.vec.Vec.set<Int>(%0, 7, %2)
  %3 := Call int @std.vec.Vec.get<Int>(%0, 7)
  %4 := Call int @test.getInt()
  %5 := Add int %3, %4
  Call void @std.vec.Vec.set<Int>(%0, 7, %5)
  Ret
}

func void @test.testVecGetZeroSize(std.vec.Vec<test.ZeroSize>* %0) {
  %1 := Call int @test.getInt()
  Call void @std.vec.Vec.get<test.ZeroSize>(%0, %1)
  Call void @test.use<test.ZeroSize>()
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func void @test.use<test.ZeroSize>() {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testVecGet)
  Call void @test.use<Function>(@test.testVecSet)
  Call void @test.use<Function>(@test.testVecPush)
  Call void @test.use<Function>(@test.testVecOperatorAssign)
  Call void @test.use<Function>(@test.testVecGetZeroSize)
  Ret 0
}
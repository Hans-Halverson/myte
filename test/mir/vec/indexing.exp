type test.Rec1 {int, std.vec.Vec<Int>*}

func int @test.getInt() {
  Ret 1
}

func void @test.testIndexRec1(test.Rec1* %0) {
  %1 := GetPointer std.vec.Vec<Int>*, test.Rec1* %0.1
  %2 := Load std.vec.Vec<Int>* %1
  %3 := Call int @std.vec.Vec.get<Int>(%2, 7)
  %4 := GetPointer std.vec.Vec<Int>*, test.Rec1* %0.1
  %5 := Load std.vec.Vec<Int>* %4
  Call void @std.vec.Vec.set<Int>(%5, 7, 1)
  Ret
}

type test.Rec2 {bool, long}

func void @test.testIndexVecRec2(std.vec.Vec<test.Rec2>* %0) {
  %1 := Call test.Rec2* @std.vec.Vec.get<test.Rec2>(%0, 7)
  %2 := GetPointer bool, test.Rec2* %1.0
  %3 := Load bool %2
  %4 := Call test.Rec2* @std.vec.Vec.get<test.Rec2>(%0, 7)
  %5 := GetPointer bool, test.Rec2* %4.0
  Store bool %5, true
  Ret
}

type test.Rec3 {int, std.vec.Vec<test.Rec2>*}

func void @test.testIndexRec3(test.Rec3* %0) {
  %1 := GetPointer std.vec.Vec<test.Rec2>*, test.Rec3* %0.1
  %2 := Load std.vec.Vec<test.Rec2>* %1
  %3 := Call test.Rec2* @std.vec.Vec.get<test.Rec2>(%2, 7)
  %4 := GetPointer bool, test.Rec2* %3.0
  %5 := Load bool %4
  %6 := GetPointer std.vec.Vec<test.Rec2>*, test.Rec3* %0.1
  %7 := Load std.vec.Vec<test.Rec2>* %6
  %8 := Call test.Rec2* @std.vec.Vec.get<test.Rec2>(%7, 7)
  %9 := GetPointer bool, test.Rec2* %8.0
  Store bool %9, true
  Ret
}

func void @test.testIndexOperatorAssign(test.Rec1* %0) {
  %1 := GetPointer std.vec.Vec<Int>*, test.Rec1* %0.1
  %2 := Load std.vec.Vec<Int>* %1
  %3 := Call int @std.vec.Vec.get<Int>(%2, 7)
  %4 := Add int %3, 1
  Call void @std.vec.Vec.set<Int>(%2, 7, %4)
  %5 := GetPointer std.vec.Vec<Int>*, test.Rec1* %0.1
  %6 := Load std.vec.Vec<Int>* %5
  %7 := Call int @std.vec.Vec.get<Int>(%6, 7)
  %8 := Call int @test.getInt()
  %9 := Add int %7, %8
  Call void @std.vec.Vec.set<Int>(%6, 7, %9)
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testIndexRec1)
  Call void @test.use<Function>(@test.testIndexVecRec2)
  Call void @test.use<Function>(@test.testIndexRec3)
  Call void @test.use<Function>(@test.testIndexOperatorAssign)
  Ret 0
}
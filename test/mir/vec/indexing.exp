type test.Rec1 {int, std.vec.Vec<Int>*}

func int @test.getInt() {
  Ret 1
}

func void @test.testIndexRec1(test.Rec1* %0) {
  %1 := GetPointer std.vec.Vec<Int>*, test.Rec1* %0.1
  %2 := Load std.vec.Vec<Int>* %1
  %3 := Call int @std.vec.Vec.get<Int>(%2, 7)
  %4 := GetPointer std.vec.Vec<Int>*, test.Rec1* %0.1
  %5 := Load std.vec.Vec<Int>* %4
  Call void @std.vec.Vec.set<Int>(%5, 7, 1)
  Ret
}

type test.Rec2 {long, bool}

func void @test.testIndexVecRec2(std.vec.Vec<test.Rec2>* %6) {
  %7 := Call test.Rec2* @std.vec.Vec.get<test.Rec2>(%6, 7)
  %8 := GetPointer bool, test.Rec2* %7.1
  %9 := Load bool %8
  %10 := Call test.Rec2* @std.vec.Vec.get<test.Rec2>(%6, 7)
  %11 := GetPointer bool, test.Rec2* %10.1
  Store bool %11, true
  Ret
}

type test.Rec3 {int, std.vec.Vec<test.Rec2>*}

func void @test.testIndexRec3(test.Rec3* %12) {
  %13 := GetPointer std.vec.Vec<test.Rec2>*, test.Rec3* %12.1
  %14 := Load std.vec.Vec<test.Rec2>* %13
  %15 := Call test.Rec2* @std.vec.Vec.get<test.Rec2>(%14, 7)
  %16 := GetPointer bool, test.Rec2* %15.1
  %17 := Load bool %16
  %18 := GetPointer std.vec.Vec<test.Rec2>*, test.Rec3* %12.1
  %19 := Load std.vec.Vec<test.Rec2>* %18
  %20 := Call test.Rec2* @std.vec.Vec.get<test.Rec2>(%19, 7)
  %21 := GetPointer bool, test.Rec2* %20.1
  Store bool %21, true
  Ret
}

func void @test.testIndexOperatorAssign(test.Rec1* %22) {
  %23 := GetPointer std.vec.Vec<Int>*, test.Rec1* %22.1
  %24 := Load std.vec.Vec<Int>* %23
  %25 := Call int @std.vec.Vec.get<Int>(%24, 7)
  %26 := Add int %25, 1
  Call void @std.vec.Vec.set<Int>(%24, 7, %26)
  %27 := GetPointer std.vec.Vec<Int>*, test.Rec1* %22.1
  %28 := Load std.vec.Vec<Int>* %27
  %29 := Call int @std.vec.Vec.get<Int>(%28, 7)
  %30 := Call int @test.getInt()
  %31 := Add int %29, %30
  Call void @std.vec.Vec.set<Int>(%28, 7, %31)
  Ret
}

func void @test.use<Function>(fn %32) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testIndexRec1)
  Call void @test.use<Function>(@test.testIndexVecRec2)
  Call void @test.use<Function>(@test.testIndexRec3)
  Call void @test.use<Function>(@test.testIndexOperatorAssign)
  Ret 0
}
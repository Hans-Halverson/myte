type _object$test.Trait {byte*, fn[2]*}

type _object$test.Type$test.Trait {test.Type*, fn[2]*}

type test.Type {int}

global fn[2] @_vtable$test.Type$test.Trait = [@test.Type.bar, @test.Type.foo]

func int @test.Type.foo(test.Type* %0) {
  Ret 1
}

func std.string.String* @test.Type.bar(test.Type* %1, int %2, bool %3) {
  %4 := CallBuiltin std.string.String* myte_alloc(1)
  %5 := GetPointer byte*, std.string.String* %4.0
  Store byte* %5, @.S1
  %6 := GetPointer int, std.string.String* %4.1
  Store int %6, 0
  %7 := GetPointer int, std.string.String* %4.2
  Store int %7, 0
  Ret %4
}

global byte[0] @.S1 = ""

func void @test.callSimpleMethod(_object$test.Trait* %8) {
  %9 := GetPointer byte*, _object$test.Trait* %8.0
  %10 := Load byte* %9
  %11 := GetPointer fn[2]*, _object$test.Trait* %8.1
  %12 := Load fn[2]* %11
  %13 := GetPointer fn, fn* %12[int 1]
  %14 := Load fn %13
  %15 := Call int %14(%10)
  Ret
}

func void @test.callMethodWithArgs(_object$test.Trait* %16) {
  %17 := GetPointer byte*, _object$test.Trait* %16.0
  %18 := Load byte* %17
  %19 := GetPointer fn[2]*, _object$test.Trait* %16.1
  %20 := Load fn[2]* %19
  %21 := GetPointer fn, fn* %20[int 0]
  %22 := Load fn %21
  %23 := Call std.string.String* %22(%18, 1, true)
  Ret
}

func void @test.test(test.Type* %24) {
  %25 := CallBuiltin _object$test.Type$test.Trait* myte_alloc(1)
  %26 := GetPointer test.Type*, _object$test.Type$test.Trait* %25.0
  Store test.Type* %26, %24
  %27 := GetPointer fn[2]*, _object$test.Type$test.Trait* %25.1
  Store fn[2]* %27, @_vtable$test.Type$test.Trait
  Call void @test.callSimpleMethod(%25)
  Call void @test.callMethodWithArgs(%25)
  Ret
}

func void @test.use<Function>(fn %28) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.test)
  Ret 0
}
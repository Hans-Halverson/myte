type _ZeroSize {}

func void @test.use<Bool>(bool %0) {
  Ret
}

func void @test.use<Byte>(byte %0) {
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func void @test.use<Int>(int %0) {
  Ret
}

func void @test.use<Unit>() {
  Ret
}

func void @test.testIterators(std.vec.Vec<Int>* %0, std.vec.Vec<Bool>* %1) {
  %2 := Call std.vec.VecIterator<Int>* @std.vec.Vec.toIterator<Int>(%0)
  continue @0
label @0:
  %3 := Call std.option.Option<Int>* @std.vec.VecIterator.next<Int>(%2)
  %4 := Cast std.option.Option<Int>* %3 to byte*
  %5 := Load byte %4
  %6 := Eq byte %5, 1
  branch %6, @1, @2
label @1:
  %7 := Cast std.option.Option<Int>* %3 to std.option.Option<Int>::Some*
  %8 := GetPointer int, std.option.Option<Int>::Some* %7.2
  %9 := Load int %8
  Call void @test.use<Int>(%9)
  continue @0
label @2:
  %10 := Call std.vec.VecIterator<Bool>* @std.vec.Vec.toIterator<Bool>(%1)
  continue @3
label @3:
  %12 := Phi bool @2:false, @4:%11
  %13 := Call std.option.Option<Bool>* @std.vec.VecIterator.next<Bool>(%10)
  %14 := Cast std.option.Option<Bool>* %13 to byte*
  %15 := Load byte %14
  %16 := Eq byte %15, 1
  branch %16, @4, @5
label @4:
  %17 := Cast std.option.Option<Bool>* %13 to std.option.Option<Bool>::Some*
  %18 := GetPointer bool, std.option.Option<Bool>::Some* %17.1
  %11 := Load bool %18
  Call void @test.use<Bool>(%11)
  continue @3
label @5:
  Call void @test.use<Bool>(%12)
  Ret
}

func void @test.testBreak(std.vec.Vec<Bool>* %0) {
  %1 := Call std.vec.VecIterator<Bool>* @std.vec.Vec.toIterator<Bool>(%0)
  continue @0
label @0:
  %2 := Phi int @test.testBreak:0, @2:2
  %3 := Call std.option.Option<Bool>* @std.vec.VecIterator.next<Bool>(%1)
  %4 := Cast std.option.Option<Bool>* %3 to byte*
  %5 := Load byte %4
  %6 := Eq byte %5, 1
  branch %6, @1, @4
label @1:
  %7 := Cast std.option.Option<Bool>* %3 to std.option.Option<Bool>::Some*
  %8 := GetPointer bool, std.option.Option<Bool>::Some* %7.1
  %9 := Load bool %8
  %10 := Not bool %9
  branch %10, @3, @2
label @2:
  Call void @test.use<Int>(2)
  continue @0
label @3:
  Call void @test.use<Int>(1)
  continue @4
label @4:
  %11 := Phi int @0:%2, @3:1
  Call void @test.use<Int>(%11)
  Ret
}

func void @test.testContinue(std.vec.Vec<Bool>* %0) {
  %1 := Call std.vec.VecIterator<Bool>* @std.vec.Vec.toIterator<Bool>(%0)
  continue @0
label @0:
  %2 := Phi int @test.testContinue:0, @2:1, @3:2
  %3 := Call std.option.Option<Bool>* @std.vec.VecIterator.next<Bool>(%1)
  %4 := Cast std.option.Option<Bool>* %3 to byte*
  %5 := Load byte %4
  %6 := Eq byte %5, 1
  branch %6, @1, @4
label @1:
  %7 := Cast std.option.Option<Bool>* %3 to std.option.Option<Bool>::Some*
  %8 := GetPointer bool, std.option.Option<Bool>::Some* %7.1
  %9 := Load bool %8
  %10 := Not bool %9
  branch %10, @2, @3
label @2:
  Call void @test.use<Int>(1)
  continue @0
label @3:
  Call void @test.use<Int>(2)
  continue @0
label @4:
  Call void @test.use<Int>(%2)
  Ret
}

func void @test.testStringIterator(std.string.String* %0) {
  %1 := Call std.string.StringByteIterator* @std.string.String.bytes(%0)
  %2 := Call std.string.StringByteIterator* @std.iterator.Iterator.toIterator<std.string.StringByteIterator,Byte>(%1)
  continue @0
label @0:
  %3 := Call std.option.Option<Byte>* @std.string.StringByteIterator.next(%2)
  %4 := Cast std.option.Option<Byte>* %3 to byte*
  %5 := Load byte %4
  %6 := Eq byte %5, 1
  branch %6, @1, @2
label @1:
  %7 := Cast std.option.Option<Byte>* %3 to std.option.Option<Byte>::Some*
  %8 := GetPointer byte, std.option.Option<Byte>::Some* %7.1
  %9 := Load byte %8
  Call void @test.use<Byte>(%9)
  continue @0
label @2:
  Ret
}

func void @test.testDestructureZeroSizeType(std.vec.Vec<test.ZeroSize>* %0) {
  %1 := Call std.vec.VecIterator<test.ZeroSize>* @std.vec.Vec.toIterator<test.ZeroSize>(%0)
  continue @0
label @0:
  %2 := Call std.option.Option<test.ZeroSize>* @std.vec.VecIterator.next<test.ZeroSize>(%1)
  %3 := Cast std.option.Option<test.ZeroSize>* %2 to byte*
  %4 := Load byte %3
  %5 := Eq byte %4, 1
  branch %5, @1, @2
label @1:
  Call void @test.use<Unit>()
  Call void @test.use<Unit>()
  Call void @test.use<Unit>()
  continue @0
label @2:
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testIterators)
  Call void @test.use<Function>(@test.testBreak)
  Call void @test.use<Function>(@test.testContinue)
  Call void @test.use<Function>(@test.testStringIterator)
  Call void @test.use<Function>(@test.testDestructureZeroSizeType)
  Ret 0
}
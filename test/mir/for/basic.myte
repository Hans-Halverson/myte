module test

import std.vec.Vec

fun use<T>(x: T) {}

fun testIterators(v1: Vec<Int>, v2: Vec<Bool>) {
  for (x in v1) {
    use(x);
  }

  var y = false;
  for (x in v2) {
    use(x);
    y = x;
  }

  use(y);
}

fun testBreak(v1: Vec<Bool>) {
  var y = 0;

  for (x in v1) {
    if (!x) {
      use(1);
      y = 1;
      break;
    }

    y = 2;
    use(2);
  }

  use(y);
}

fun testContinue(v1: Vec<Bool>) {
  var y = 0;

  for (x in v1) {
    if (!x) {
      use(1);
      y = 1;
      continue;
    }

    y = 2;
    use(2);
  }

  use(y);
}

fun testStringIterator(s: String) {
  for (byte in s.bytes()) {
    use(byte);
  }
}

type ZeroSize (Unit, Unit, Unit)

fun testDestructureZeroSizeType(x: Vec<ZeroSize>) {
  for (ZeroSize (x, y, z) in x) {
    use(x);
    use(y);
    use(z);
  }
}

fun main() {
  use(testIterators);
  use(testBreak);
  use(testContinue);
  use(testStringIterator);
  use(testDestructureZeroSizeType);
}
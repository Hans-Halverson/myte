type $tuple<Int,test.Rec5> {int, test.Rec5*}

type test.Rec1 {test.Rec1*}

func void @test.useSelfRecursive(test.Rec1* %0) {
  Ret
}

type test.Rec2 {test.Rec3*}

type test.Rec3 {test.Rec4*}

type test.Rec4 {test.Rec2*}

func void @test.useMutuallyRecursive(test.Rec3* %1) {
  Ret
}

type test.Rec5 {$tuple<Int,test.Rec5>*}

type test.Rec6 {test.Generic<test.Rec6>*}

type test.Generic<test.Rec6> {int, test.Rec6*}

func void @test.useNested(test.Rec5* %2, test.Rec6* %3) {
  Ret
}

func fn @test.use<Function>(fn %4) {
  Ret %4
}

func int @test.main() {
  %5 := Call fn @test.use<Function>(@test.useSelfRecursive)
  %6 := Call fn @test.use<Function>(@test.useMutuallyRecursive)
  %7 := Call fn @test.use<Function>(@test.useNested)
  Ret 0
}
module test

// Byte sign extension conversions
fun byteSignExtension() {
  use((1: Byte).toInt());
  use((-1: Byte).toInt());
  use((1: Byte).toLong());
  use((-1: Byte).toLong());
}

// Int sign extension conversions
fun intSignExtension() {
  use((1: Int).toLong());
  use((-1: Int).toLong());
}

fun boolZeroExtension() {
  val x: Option<Bool> = Some (false);
  use(x);
  val x: Option<Bool> = Some (true);
  use(x);
}

fun byteZeroExtension() {
  val x: Option<Byte> = Some (1);
  use(x);
  val x: Option<Byte> = Some (-1);
  use(x);
}

fun intZeroExtension() {
  val x: Option<Int> = Some (1);
  use(x);
  val x: Option<Int> = Some (-1);
  use(x);
}

// Int truncation conversions
fun intTruncation() {
  use((1: Int).toByte());
  use((127: Int).toByte());
  use((128: Int).toByte());
  use((-1: Int).toByte());
  use((-128: Int).toByte());
  use((-129: Int).toByte());
}

// Long truncation conversions
fun longTruncation() {
  use((1: Long).toByte());
  use((127: Long).toByte());
  use((128: Long).toByte());
  use((-1: Long).toByte());
  use((-128: Long).toByte());
  use((-129: Long).toByte());
  use((1: Long).toInt());
  use((2147483647: Long).toInt());
  use((2147483648: Long).toInt());
  use((-1: Long).toInt());
  use((-2147483648: Long).toInt());
  use((-2147483649: Long).toInt());
}

fun use<T>(x: T): T = x

fun main() {
  use(byteSignExtension);
  use(intSignExtension);
  use(boolZeroExtension);
  use(byteZeroExtension);
  use(intZeroExtension);
  use(intTruncation);
  use(longTruncation);
}
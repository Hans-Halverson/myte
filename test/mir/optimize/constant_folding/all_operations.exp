type _ZeroSize {}

global _ZeroSize @_ZeroSize = uninitialized

func bool @test.use<Bool>(bool %0) {
  Ret %0
}

func fn @test.use<Function>(fn %0) {
  Ret %0
}

func int @test.use<Int>(int %0) {
  Ret %0
}

func void @test.unit() {
  Ret
}

func void @test.testInt() {
  %0 := Call int @test.use<Int>(-56)
  %1 := Call int @test.use<Int>(3)
  %2 := Call int @test.use<Int>(-1)
  %3 := Call int @test.use<Int>(14)
  %4 := Call int @test.use<Int>(8)
  %5 := Call int @test.use<Int>(1)
  %6 := Call int @test.use<Int>(8)
  %7 := Call int @test.use<Int>(14)
  %8 := Call int @test.use<Int>(6)
  %9 := Call int @test.use<Int>(16)
  %10 := Call int @test.use<Int>(-1)
  %11 := Call int @test.use<Int>(1073741823)
  %12 := Call bool @test.use<Bool>(false)
  Ret
}

func void @test.testByte() {
  %0 := Call int @test.use<Int>(-56)
  %1 := Call int @test.use<Int>(3)
  %2 := Call int @test.use<Int>(-1)
  %3 := Call int @test.use<Int>(14)
  %4 := Call int @test.use<Int>(8)
  %5 := Call int @test.use<Int>(1)
  %6 := Call int @test.use<Int>(8)
  %7 := Call int @test.use<Int>(14)
  %8 := Call int @test.use<Int>(6)
  %9 := Call int @test.use<Int>(16)
  %10 := Call int @test.use<Int>(-1)
  %11 := Call int @test.use<Int>(1073741823)
  %12 := Call bool @test.use<Bool>(false)
  Ret
}

func void @test.testLong() {
  %0 := Call int @test.use<Int>(-56)
  %1 := Call int @test.use<Int>(3)
  %2 := Call int @test.use<Int>(-1)
  %3 := Call int @test.use<Int>(14)
  %4 := Call int @test.use<Int>(8)
  %5 := Call int @test.use<Int>(1)
  %6 := Call int @test.use<Int>(8)
  %7 := Call int @test.use<Int>(14)
  %8 := Call int @test.use<Int>(6)
  %9 := Call int @test.use<Int>(16)
  %10 := Call int @test.use<Int>(-1)
  %11 := Call int @test.use<Int>(1073741823)
  %12 := Call bool @test.use<Bool>(false)
  Ret
}

func void @test.testBool() {
  %0 := Call bool @test.use<Bool>(false)
  %1 := Call bool @test.use<Bool>(false)
  %2 := Call bool @test.use<Bool>(true)
  %3 := Call bool @test.use<Bool>(false)
  %4 := Call bool @test.use<Bool>(true)
  Ret
}

func void @test.testUnit() {
  %0 := Call bool @std.unit.Unit.equals(@_ZeroSize)
  %1 := Call bool @test.use<Bool>(%0)
  %2 := Call bool @std.unit.Unit.equals(@_ZeroSize)
  %3 := LogNot %2
  %4 := Call bool @test.use<Bool>(%3)
  Call void @test.unit()
  Call void @test.unit()
  %5 := Call bool @std.unit.Unit.equals(@_ZeroSize)
  %6 := Call bool @test.use<Bool>(%5)
  Call void @test.unit()
  Call void @test.unit()
  %7 := Call bool @std.unit.Unit.equals(@_ZeroSize)
  %8 := LogNot %7
  %9 := Call bool @test.use<Bool>(%8)
  Ret
}

func void @test.testShift() {
  %0 := Call int @test.use<Int>(4)
  %1 := Call int @test.use<Int>(4)
  Ret
}

func int @test.main() {
  %0 := Call fn @test.use<Function>(@test.testInt)
  %1 := Call fn @test.use<Function>(@test.testByte)
  %2 := Call fn @test.use<Function>(@test.testLong)
  %3 := Call fn @test.use<Function>(@test.testBool)
  %4 := Call fn @test.use<Function>(@test.testUnit)
  %5 := Call fn @test.use<Function>(@test.testShift)
  Ret 0
}
func void @test.byteSignExtension() {
  %0 := Call int @test.use<Int>(1)
  %1 := Call int @test.use<Int>(-1)
  %2 := Call long @test.use<Long>(1)
  %3 := Call long @test.use<Long>(-1)
  Ret
}

func void @test.intSignExtension() {
  %0 := Call long @test.use<Long>(1)
  %1 := Call long @test.use<Long>(-1)
  Ret
}

func void @test.intTruncation() {
  %0 := Call byte @test.use<Byte>(1)
  %1 := Call byte @test.use<Byte>(127)
  %2 := Call byte @test.use<Byte>(-128)
  %3 := Call byte @test.use<Byte>(-1)
  %4 := Call byte @test.use<Byte>(-128)
  %5 := Call byte @test.use<Byte>(127)
  Ret
}

func void @test.longTruncation() {
  %0 := Call byte @test.use<Byte>(1)
  %1 := Call byte @test.use<Byte>(127)
  %2 := Call byte @test.use<Byte>(-128)
  %3 := Call byte @test.use<Byte>(-1)
  %4 := Call byte @test.use<Byte>(-128)
  %5 := Call byte @test.use<Byte>(127)
  %6 := Call int @test.use<Int>(1)
  %7 := Call int @test.use<Int>(2147483647)
  %8 := Call int @test.use<Int>(-2147483648)
  %9 := Call int @test.use<Int>(-1)
  %10 := Call int @test.use<Int>(-2147483648)
  %11 := Call int @test.use<Int>(2147483647)
  Ret
}

func byte @test.use<Byte>(byte %0) {
  Ret %0
}

func fn @test.use<Function>(fn %0) {
  Ret %0
}

func int @test.use<Int>(int %0) {
  Ret %0
}

func long @test.use<Long>(long %0) {
  Ret %0
}

func int @test.main() {
  %0 := Call fn @test.use<Function>(@test.byteSignExtension)
  %1 := Call fn @test.use<Function>(@test.intSignExtension)
  %2 := Call fn @test.use<Function>(@test.intTruncation)
  %3 := Call fn @test.use<Function>(@test.longTruncation)
  Ret 0
}
func unit @test.byteSignExtension() {
  %0 := Call int @test.use<int>(1)
  %1 := Call int @test.use<int>(-1)
  %2 := Call long @test.use<long>(1)
  %3 := Call long @test.use<long>(-1)
  Ret
}

func unit @test.intSignExtension() {
  %4 := Call long @test.use<long>(1)
  %5 := Call long @test.use<long>(-1)
  Ret
}

func unit @test.intTruncation() {
  %6 := Call byte @test.use<byte>(1)
  %7 := Call byte @test.use<byte>(127)
  %8 := Call byte @test.use<byte>(-128)
  %9 := Call byte @test.use<byte>(-1)
  %10 := Call byte @test.use<byte>(-128)
  %11 := Call byte @test.use<byte>(127)
  Ret
}

func unit @test.longTruncation() {
  %12 := Call byte @test.use<byte>(1)
  %13 := Call byte @test.use<byte>(127)
  %14 := Call byte @test.use<byte>(-128)
  %15 := Call byte @test.use<byte>(-1)
  %16 := Call byte @test.use<byte>(-128)
  %17 := Call byte @test.use<byte>(127)
  %18 := Call int @test.use<int>(1)
  %19 := Call int @test.use<int>(2147483647)
  %20 := Call int @test.use<int>(-2147483648)
  %21 := Call int @test.use<int>(-1)
  %22 := Call int @test.use<int>(-2147483648)
  %23 := Call int @test.use<int>(2147483647)
  Ret
}

func byte @test.use<byte>(byte %24) {
  Ret %24
}

func fn @test.use<fn>(fn %25) {
  Ret %25
}

func int @test.use<int>(int %26) {
  Ret %26
}

func long @test.use<long>(long %27) {
  Ret %27
}

func int @test.main() {
  %28 := Call fn @test.use<fn>(@test.byteSignExtension)
  %29 := Call fn @test.use<fn>(@test.intSignExtension)
  %30 := Call fn @test.use<fn>(@test.intTruncation)
  %31 := Call fn @test.use<fn>(@test.longTruncation)
  Ret 0
}
func void @test.byteSignExtension() {
  %0 := Call int @test.use<Int>(1)
  %1 := Call int @test.use<Int>(-1)
  %2 := Call long @test.use<Long>(1)
  %3 := Call long @test.use<Long>(-1)
  Ret
}

func void @test.intSignExtension() {
  %0 := Call long @test.use<Long>(1)
  %1 := Call long @test.use<Long>(-1)
  Ret
}

func void @test.boolZeroExtension() {
  %0 := Call byte @test.use<Option<Bool>>(0)
  %1 := Call byte @test.use<Option<Bool>>(1)
  Ret
}

func void @test.byteZeroExtension() {
  %0 := Call int @test.use<Option<Byte>>(1)
  %1 := Call int @test.use<Option<Byte>>(255)
  Ret
}

func void @test.intZeroExtension() {
  %0 := Call long @test.use<Option<Int>>(1)
  %1 := Call long @test.use<Option<Int>>(4294967295)
  Ret
}

func void @test.intTruncation() {
  %0 := Call byte @test.use<Byte>(1)
  %1 := Call byte @test.use<Byte>(127)
  %2 := Call byte @test.use<Byte>(-128)
  %3 := Call byte @test.use<Byte>(-1)
  %4 := Call byte @test.use<Byte>(-128)
  %5 := Call byte @test.use<Byte>(127)
  Ret
}

func void @test.longTruncation() {
  %0 := Call byte @test.use<Byte>(1)
  %1 := Call byte @test.use<Byte>(127)
  %2 := Call byte @test.use<Byte>(-128)
  %3 := Call byte @test.use<Byte>(-1)
  %4 := Call byte @test.use<Byte>(-128)
  %5 := Call byte @test.use<Byte>(127)
  %6 := Call int @test.use<Int>(1)
  %7 := Call int @test.use<Int>(2147483647)
  %8 := Call int @test.use<Int>(-2147483648)
  %9 := Call int @test.use<Int>(-1)
  %10 := Call int @test.use<Int>(-2147483648)
  %11 := Call int @test.use<Int>(2147483647)
  Ret
}

func void @test.byteToDouble() {
  %0 := Call double @test.use<Double>(0.0)
  %1 := Call double @test.use<Double>(1.0)
  %2 := Call double @test.use<Double>(-1.0)
  %3 := Call double @test.use<Double>(127.0)
  %4 := Call double @test.use<Double>(-128.0)
  Ret
}

func void @test.intToDouble() {
  %0 := Call double @test.use<Double>(0.0)
  %1 := Call double @test.use<Double>(1.0)
  %2 := Call double @test.use<Double>(-1.0)
  %3 := Call double @test.use<Double>(2147483647.0)
  %4 := Call double @test.use<Double>(-2147483648.0)
  Ret
}

func void @test.longToDouble() {
  %0 := Call double @test.use<Double>(0.0)
  %1 := Call double @test.use<Double>(1.0)
  %2 := Call double @test.use<Double>(-1.0)
  %3 := Call double @test.use<Double>(9.22337203685e+18)
  %4 := Call double @test.use<Double>(-9.22337203685e+18)
  Ret
}

func void @test.doubleToByte() {
  %0 := Call byte @test.use<Byte>(0)
  %1 := Call byte @test.use<Byte>(1)
  %2 := Call byte @test.use<Byte>(-1)
  %3 := Call byte @test.use<Byte>(127)
  %4 := Call byte @test.use<Byte>(-128)
  %5 := Call byte @test.use<Byte>(-128)
  %6 := Call byte @test.use<Byte>(-127)
  %7 := Call byte @test.use<Byte>(127)
  %8 := Call byte @test.use<Byte>(126)
  Ret
}

func void @test.doubleToInt() {
  %0 := Call int @test.use<Int>(0)
  %1 := Call int @test.use<Int>(1)
  %2 := Call int @test.use<Int>(-1)
  %3 := Call int @test.use<Int>(2147483647)
  %4 := Call int @test.use<Int>(-2147483648)
  %5 := Call int @test.use<Int>(-2147483648)
  %6 := Call int @test.use<Int>(-2147483648)
  %7 := Call int @test.use<Int>(-2147483648)
  %8 := Call int @test.use<Int>(-2147483648)
  %9 := Call int @test.use<Int>(-2147483648)
  Ret
}

func void @test.doubleToLong() {
  %0 := Call long @test.use<Long>(0)
  %1 := Call long @test.use<Long>(1)
  %2 := Call long @test.use<Long>(-1)
  %3 := Call long @test.use<Long>(2147483648)
  %4 := Call long @test.use<Long>(-2147483649)
  %5 := Call long @test.use<Long>(9223372036854774784)
  %6 := Call long @test.use<Long>(9223372036854774784)
  %7 := Call long @test.use<Long>(-9223372036854775808)
  %8 := Call long @test.use<Long>(-9223372036854775808)
  %9 := Call long @test.use<Long>(-9223372036854775808)
  Ret
}

func byte @test.use<Byte>(byte %0) {
  Ret %0
}

func double @test.use<Double>(double %0) {
  Ret %0
}

func int @test.use<Int>(int %0) {
  Ret %0
}

func long @test.use<Long>(long %0) {
  Ret %0
}

func byte @test.use<Option<Bool>>(byte %0) {
  Ret %0
}

func int @test.use<Option<Byte>>(int %0) {
  Ret %0
}

func long @test.use<Option<Int>>(long %0) {
  Ret %0
}

func int @test.main() {
  Ret 0
}
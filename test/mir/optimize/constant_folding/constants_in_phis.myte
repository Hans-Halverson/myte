module test

// Different constants appear in same phi, so phi is not a constant.
fun test1(cond: Bool): Int {
  var x = 1;
  if (cond) {
    x = 2;
  } else {
    x = 3;
  }

  return x;
}

// Constant appears in phi but phi is not constant overall
fun test2(cond: Bool, i: Int): Int {
  var x = 1;
  var y = 2;
  if (cond) {
    x = 3;
  } else {
    x = i;
  }

  return x + y;
}

// The start block should not be merged into its previous block during normalization.
// Additionally, ensure that a constant phi that appears in a non-constant phi is converted to
// a move of a constant.
fun test3() {
  var x = 1;
  while (false) {
    x = x + 1;
  }

  -x;

  while (x == 2) {
    x = x + 1;
  }

  -x;
}

fun use<T>(x: T) {}

fun main() {
  use(test1);
  use(test2);
  use(test3);
}
func bool @test.use<Bool>(bool %0) {
  Ret %0
}

func double @test.use<Double>(double %0) {
  Ret %0
}

func int @test.use<Int>(int %0) {
  Ret %0
}

func byte @test.useByte(byte %0) {
  Ret %0
}

func long @test.useLong(long %0) {
  Ret %0
}

func void @test.unit() {
  Ret
}

func void @test.testInt() {
  %0 := Call int @test.use<Int>(-56)
  %1 := Call int @test.use<Int>(3)
  %2 := Call int @test.use<Int>(-1)
  %3 := Call int @test.use<Int>(14)
  %4 := Call int @test.use<Int>(8)
  %5 := Call int @test.use<Int>(1)
  %6 := Call int @test.use<Int>(8)
  %7 := Call int @test.use<Int>(14)
  %8 := Call int @test.use<Int>(6)
  %9 := Call int @test.use<Int>(16)
  %10 := Call int @test.use<Int>(-1)
  %11 := Call int @test.use<Int>(1073741823)
  %12 := Call bool @test.use<Bool>(false)
  Ret
}

func void @test.testByte() {
  %0 := Call byte @test.useByte(-56)
  %1 := Call byte @test.useByte(3)
  %2 := Call byte @test.useByte(-1)
  %3 := Call byte @test.useByte(14)
  %4 := Call byte @test.useByte(8)
  %5 := Call byte @test.useByte(1)
  %6 := Call byte @test.useByte(8)
  %7 := Call byte @test.useByte(14)
  %8 := Call byte @test.useByte(6)
  %9 := Call byte @test.useByte(16)
  %10 := Call byte @test.useByte(-128)
  %11 := Call byte @test.useByte(-1)
  %12 := Call byte @test.useByte(63)
  %13 := Call bool @test.use<Bool>(false)
  %14 := Call byte @test.useByte(-128)
  %15 := Call byte @test.useByte(-128)
  %16 := Call byte @test.useByte(125)
  %17 := Call byte @test.useByte(125)
  Ret
}

func void @test.testLong() {
  %0 := Call long @test.useLong(-56)
  %1 := Call long @test.useLong(3)
  %2 := Call long @test.useLong(-1)
  %3 := Call long @test.useLong(14)
  %4 := Call long @test.useLong(8)
  %5 := Call long @test.useLong(1)
  %6 := Call long @test.useLong(8)
  %7 := Call long @test.useLong(14)
  %8 := Call long @test.useLong(6)
  %9 := Call long @test.useLong(16)
  %10 := Call long @test.useLong(-9223372036854775808)
  %11 := Call long @test.useLong(-1)
  %12 := Call long @test.useLong(4611686018427387903)
  %13 := Call bool @test.use<Bool>(false)
  Ret
}

func void @test.testDouble() {
  %0 := Call double @test.use<Double>(-56.0)
  %1 := Call double @test.use<Double>(3.2)
  %2 := Call double @test.use<Double>(-1.1)
  %3 := Call double @test.use<Double>(14.91)
  %4 := Call double @test.use<Double>(7.77419354839)
  %5 := Call bool @test.use<Bool>(false)
  Ret
}

func void @test.testBool() {
  %0 := Call bool @test.use<Bool>(false)
  %1 := Call bool @test.use<Bool>(false)
  %2 := Call bool @test.use<Bool>(true)
  %3 := Call bool @test.use<Bool>(false)
  %4 := Call bool @test.use<Bool>(true)
  Ret
}

func void @test.testUnit() {
  %0 := Call bool @std.unit.Unit.equals(@std._ZeroSize)
  %1 := Call bool @test.use<Bool>(%0)
  %2 := Call bool @std.unit.Unit.equals(@std._ZeroSize)
  %3 := Not bool %2
  %4 := Call bool @test.use<Bool>(%3)
  Call void @test.unit()
  Call void @test.unit()
  %5 := Call bool @std.unit.Unit.equals(@std._ZeroSize)
  %6 := Call bool @test.use<Bool>(%5)
  Call void @test.unit()
  Call void @test.unit()
  %7 := Call bool @std.unit.Unit.equals(@std._ZeroSize)
  %8 := Not bool %7
  %9 := Call bool @test.use<Bool>(%8)
  Ret
}

func void @test.testShift() {
  %0 := Call int @test.use<Int>(4)
  %1 := Call int @test.use<Int>(4)
  Ret
}

func int @test.main() {
  Call void @test.testDouble()
  Ret 0
}
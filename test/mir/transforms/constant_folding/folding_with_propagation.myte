module t

// Simple constant folding
var int1: Int = 1 + 2
var bool1: Bool = true && false

// Complex constant folding
var int2: Int = 8 * -(34) - 2 * 7
var bool2: Bool = (true || false) && (!false || false)
var mixed: Bool = (2 * 6) == (3 * 4)

val boolConstant: Bool = true && false
val intConstant: Int = 1 + 2 * 3 + 4
var int4: Int = if (boolConstant) { 1 } else { intConstant }

fun useBool(b: Bool) {}
fun useInt(i: Int) {}
fun rand(): Bool = true

fun main() {
  // In function bodies
  val local1 = 2 * 3;
  useInt(local1);

  // Complex constant folding leads to branch pruning
  var local2 = (true && false || true);
  if (local2) {
    local2 = false;
  } else {
    local2 = true;
  }

  useBool(local2 || false);

  // Constant folding eliminates redundant statements/branches, but preserves call
  var local3 = false;
  if (rand()) {
    local3 = true;
  } else {
    local3 = true;
  }

  useBool(local3);

  useAllGlobals();
}

fun useAllGlobals() {
  useInt(int1);
  useBool(bool1);
  useInt(int2);
  useBool(bool2);
  useBool(mixed);
  useInt(int4);
}
func void @_init() {
  Ret
}

func void @split_incoming_edge.inexhaustiveIf() {
  branch true, @0, @1
label @0:
  %0 := Mov int 2
  continue @2
label @1:
  %0 := Mov int 1
  continue @2
label @2:
  %1 := Neg int %0
  Ret
}

func void @split_incoming_edge.loop() {
  %0 := Mov int 1
  continue @0
label @0:
  branch true, @1, @4
label @1:
  %1 := Neg int %0
  branch false, @2, @3
label @2:
  %0 := Mov int 2
  continue @0
label @3:
  %2 := Mov int 3
  continue @5
label @4:
  %2 := Mov int %0
  continue @5
label @5:
  %3 := Neg int %2
  Ret
}

func void @split_incoming_edge.multiple() {
  branch true, @0, @1
label @0:
  %0 := Mov int 3
  %1 := Mov int 4
  continue @2
label @1:
  %0 := Mov int 1
  %1 := Mov int 2
  continue @2
label @2:
  %2 := Add int %0, %1
  Ret
}

func void @split_incoming_edge.use<Function>(fn %0) {
  Ret
}

func int @split_incoming_edge.main() {
  Call void @split_incoming_edge.use<Function>(@split_incoming_edge.inexhaustiveIf)
  Call void @split_incoming_edge.use<Function>(@split_incoming_edge.loop)
  Call void @split_incoming_edge.use<Function>(@split_incoming_edge.multiple)
  Ret 0
}
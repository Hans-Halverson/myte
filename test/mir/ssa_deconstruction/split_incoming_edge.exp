func void @_init() {
  Ret
}

func void @split_incoming_edge.inexhaustiveIf() {
  branch true, @0, @1
label @0:
  %0 := Mov int 2
  continue @2
label @1:
  %0 := Mov int 1
  continue @2
label @2:
  %1 := Neg int %0
  Ret
}

func void @split_incoming_edge.loop() {
  %2 := Mov int 1
  continue @3
label @3:
  branch true, @4, @7
label @4:
  %3 := Neg int %2
  branch false, @5, @6
label @5:
  %2 := Mov int 2
  continue @3
label @6:
  %4 := Mov int 3
  continue @8
label @7:
  %4 := Mov int %2
  continue @8
label @8:
  %5 := Neg int %4
  Ret
}

func void @split_incoming_edge.multiple() {
  branch true, @9, @10
label @9:
  %6 := Mov int 3
  %7 := Mov int 4
  continue @11
label @10:
  %6 := Mov int 1
  %7 := Mov int 2
  continue @11
label @11:
  %8 := Add int %6, %7
  Ret
}

func void @split_incoming_edge.use<Function>(fn %9) {
  Ret
}

func int @split_incoming_edge.main() {
  Call void @split_incoming_edge.use<Function>(@split_incoming_edge.inexhaustiveIf)
  Call void @split_incoming_edge.use<Function>(@split_incoming_edge.loop)
  Call void @split_incoming_edge.use<Function>(@split_incoming_edge.multiple)
  Ret 0
}
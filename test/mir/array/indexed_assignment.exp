func void @test.simpleAccesses(int* %0) {
  %1 := GetPointer int, int* %0[int 90]
  Store int %1, 1
  Ret
}

func void @test.nestedAccesses(std.string.String**** %0, std.string.String** %1) {
  %2 := CallBuiltin std.string.String* myte_alloc(1)
  %3 := GetPointer byte*, std.string.String* %2.2
  Store byte* %3, @.S1
  %4 := GetPointer int, std.string.String* %2.0
  Store int %4, 4
  %5 := GetPointer int, std.string.String* %2.1
  Store int %5, 4
  %6 := GetPointer std.string.String***, std.string.String**** %0[int 5]
  %7 := Load std.string.String*** %6
  %8 := GetPointer std.string.String**, std.string.String*** %7[int 6]
  %9 := Load std.string.String** %8
  %10 := GetPointer std.string.String*, std.string.String** %9[int 7]
  Store std.string.String* %10, %2
  %11 := GetPointer std.string.String***, std.string.String**** %0[int 55]
  %12 := Load std.string.String*** %11
  %13 := GetPointer std.string.String**, std.string.String*** %12[int 66]
  Store std.string.String** %13, %1
  Ret
}

global byte[4] @.S1 = "test"

type test.Tup1 {byte, bool, test.Rec1**}

type test.Rec1 {bool, byte, std.string.String*}

type test.Rec2 {byte, long*}

func void @test.indexAndAccesses(test.Tup1* %0, test.Rec2** %1) {
  %2 := CallBuiltin std.string.String* myte_alloc(1)
  %3 := GetPointer byte*, std.string.String* %2.2
  Store byte* %3, @.S0
  %4 := GetPointer int, std.string.String* %2.0
  Store int %4, 4
  %5 := GetPointer int, std.string.String* %2.1
  Store int %5, 4
  %6 := GetPointer test.Rec1**, test.Tup1* %0.2
  %7 := Load test.Rec1** %6
  %8 := GetPointer test.Rec1*, test.Rec1** %7[int 500]
  %9 := Load test.Rec1* %8
  %10 := GetPointer std.string.String*, test.Rec1* %9.2
  Store std.string.String* %10, %2
  %11 := GetPointer test.Rec2*, test.Rec2** %1[int 999]
  %12 := Load test.Rec2* %11
  %13 := GetPointer long*, test.Rec2* %12.1
  %14 := Load long* %13
  %15 := GetPointer long, long* %14[int 888]
  Store long %15, 7
  Ret
}

global byte[4] @.S0 = "test"

func void @test.use<Function>(fn %0) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.simpleAccesses)
  Call void @test.use<Function>(@test.nestedAccesses)
  Call void @test.use<Function>(@test.indexAndAccesses)
  Ret 0
}
func unit @test.emptySet() {
  %0 := Call std.set.Set<int>* @std.set.Set.new<int>()
  %1 := Call std.set.Set<bool>* @std.set.Set.new<bool>()
  Ret
}

func unit @test.oneEntrySet() {
  %2 := Call std.set.Set<int>* @std.set.Set.new<int>()
  %3 := Call unit @std.set.Set.add<int>(%2, 1)
  %4 := Call std.set.Set<byte>* @std.set.Set.new<byte>()
  %5 := Call unit @std.set.Set.add<byte>(%4, 2)
  Ret
}

func unit @test.multiEntrySet() {
  %6 := Call std.set.Set<int>* @std.set.Set.new<int>()
  %7 := Call unit @std.set.Set.reserve<int>(%6, 3)
  %8 := Call unit @std.set.Set.add<int>(%6, 5)
  %9 := Call unit @std.set.Set.add<int>(%6, 6)
  %10 := Call unit @std.set.Set.add<int>(%6, 7)
  %11 := Call std.set.Set<bool>* @std.set.Set.new<bool>()
  %12 := Call unit @std.set.Set.reserve<bool>(%11, 4)
  %13 := Call unit @std.set.Set.add<bool>(%11, false)
  %14 := Call unit @std.set.Set.add<bool>(%11, true)
  %15 := Call unit @std.set.Set.add<bool>(%11, false)
  %16 := Call unit @std.set.Set.add<bool>(%11, true)
  Ret
}

func int @test.main() {
  Ret 0
}
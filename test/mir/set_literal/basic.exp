func void @test.emptySet() {
  %0 := Call std.set.Set<Int>* @std.set.Set.new<Int>()
  %1 := Call std.set.Set<Bool>* @std.set.Set.new<Bool>()
  Ret
}

func void @test.oneEntrySet() {
  %0 := Call std.set.Set<Int>* @std.set.Set.new<Int>()
  Call void @std.set.Set.add<Int>(%0, 1)
  %1 := Call std.set.Set<Byte>* @std.set.Set.new<Byte>()
  Call void @std.set.Set.add<Byte>(%1, 2)
  Ret
}

func void @test.multiEntrySet() {
  %0 := Call std.set.Set<Int>* @std.set.Set.new<Int>()
  Call void @std.set.Set.reserve<Int>(%0, 3)
  Call void @std.set.Set.add<Int>(%0, 5)
  Call void @std.set.Set.add<Int>(%0, 6)
  Call void @std.set.Set.add<Int>(%0, 7)
  %1 := Call std.set.Set<Bool>* @std.set.Set.new<Bool>()
  Call void @std.set.Set.reserve<Bool>(%1, 4)
  Call void @std.set.Set.add<Bool>(%1, 1)
  Call void @std.set.Set.add<Bool>(%1, 3)
  Call void @std.set.Set.add<Bool>(%1, 1)
  Call void @std.set.Set.add<Bool>(%1, 3)
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.emptySet)
  Call void @test.use<Function>(@test.oneEntrySet)
  Call void @test.use<Function>(@test.multiEntrySet)
  Ret 0
}
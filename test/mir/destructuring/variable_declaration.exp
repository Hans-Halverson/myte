type $tuple<Int,Bool,(Int,Bool)> {int, bool, $tuple<Int,Bool>*}

type $tuple<Int,Bool> {int, bool}

func unit @test.use<(Int,Bool)>($tuple<Int,Bool>* %0) {
  Ret
}

func unit @test.use<Bool>(bool %1) {
  Ret
}

func unit @test.use<Function>(fn %2) {
  Ret
}

func unit @test.use<Int>(int %3) {
  Ret
}

func unit @test.use<String>(std.string.String* %4) {
  Ret
}

func unit @test.destructureTuple($tuple<Int,Bool,(Int,Bool)>* %5) {
  %6 := GetPointer int, $tuple<Int,Bool,(Int,Bool)>* %5.0
  %7 := Load int %6
  %8 := GetPointer bool, $tuple<Int,Bool,(Int,Bool)>* %5.1
  %9 := Load bool %8
  %10 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %5.2
  %11 := Load $tuple<Int,Bool>* %10
  %12 := Call unit @test.use<Int>(%7)
  %13 := Call unit @test.use<Bool>(%9)
  %14 := Call unit @test.use<(Int,Bool)>(%11)
  %15 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %5.2
  %16 := Load $tuple<Int,Bool>* %15
  %17 := GetPointer int, $tuple<Int,Bool>* %16.0
  %18 := Load int %17
  %19 := GetPointer bool, $tuple<Int,Bool>* %16.1
  %20 := Load bool %19
  %21 := Call unit @test.use<Int>(%18)
  %22 := Call unit @test.use<Bool>(%20)
  Ret
}

type test.Variant {byte, byte[23]}

type test.Variant::Tup1 {byte, byte[3], int, std.string.String*, byte[8]}

type test.Variant::Tup2 {byte, byte[7], std.string.String*, int, byte[4]}

func unit @test.destructureVariants(test.Variant* %23) {
  %24 := Load byte %23
  %25 := Eq byte %24, 0
  branch %25, @0, @1
label @0:
  %26 := GetPointer int, test.Variant::Tup1* %23.2
  %27 := Load int %26
  %28 := GetPointer std.string.String*, test.Variant::Tup1* %23.3
  %29 := Load std.string.String* %28
  continue @2
label @1:
  %30 := GetPointer std.string.String*, test.Variant::Tup2* %23.2
  %31 := Load std.string.String* %30
  %32 := GetPointer int, test.Variant::Tup2* %23.3
  %33 := Load int %32
  continue @2
label @2:
  %34 := Phi std.string.String* @0:%29, @1:%31
  %35 := Phi int @0:%27, @1:%33
  %36 := Call unit @test.use<Int>(%35)
  %37 := Call unit @test.use<String>(%34)
  Ret
}

type test.Tup {int, bool}

func unit @test.destructureNamedTuple(test.Tup* %38) {
  %39 := GetPointer int, test.Tup* %38.0
  %40 := Load int %39
  %41 := GetPointer bool, test.Tup* %38.1
  %42 := Load bool %41
  %43 := Call unit @test.use<Int>(%40)
  %44 := Call unit @test.use<Bool>(%42)
  Ret
}

type test.Rec {int, bool}

func unit @test.destructureNamedRecord(test.Rec* %45) {
  %46 := GetPointer int, test.Rec* %45.0
  %47 := Load int %46
  %48 := GetPointer bool, test.Rec* %45.1
  %49 := Load bool %48
  %50 := Call unit @test.use<Int>(%47)
  %51 := Call unit @test.use<Bool>(%49)
  Ret
}

type test.Rec2<Int> {int, bool}

func int @test.Rec2.methodDestructuring<Int>(test.Rec2<Int>* %52) {
  %53 := GetPointer int, test.Rec2<Int>* %52.0
  %54 := Load int %53
  Ret %54
}

func unit @test.testUseRec2(test.Rec2<Int>* %55) {
  %56 := Call int @test.Rec2.methodDestructuring<Int>(%55)
  Ret
}

func int @test.main() {
  %57 := Call unit @test.use<Function>(@test.destructureTuple)
  %58 := Call unit @test.use<Function>(@test.destructureVariants)
  %59 := Call unit @test.use<Function>(@test.destructureNamedTuple)
  %60 := Call unit @test.use<Function>(@test.destructureNamedRecord)
  %61 := Call unit @test.use<Function>(@test.testUseRec2)
  Ret 0
}
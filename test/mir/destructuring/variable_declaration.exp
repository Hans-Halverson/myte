type $tuple<Int,Bool,(Int,Bool)> {int, bool, $tuple<Int,Bool>*}

type $tuple<Int,Bool> {int, bool}

func void @test.use<(Int,Bool)>($tuple<Int,Bool>* %0) {
  Ret
}

func void @test.use<Bool>(bool %1) {
  Ret
}

func void @test.use<Function>(fn %2) {
  Ret
}

func void @test.use<Int>(int %3) {
  Ret
}

func void @test.use<String>(std.string.String* %4) {
  Ret
}

func void @test.destructureTuple($tuple<Int,Bool,(Int,Bool)>* %5) {
  %6 := GetPointer int, $tuple<Int,Bool,(Int,Bool)>* %5.0
  %7 := Load int %6
  %8 := GetPointer bool, $tuple<Int,Bool,(Int,Bool)>* %5.1
  %9 := Load bool %8
  %10 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %5.2
  %11 := Load $tuple<Int,Bool>* %10
  Call void @test.use<Int>(%7)
  Call void @test.use<Bool>(%9)
  Call void @test.use<(Int,Bool)>(%11)
  %12 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %5.2
  %13 := Load $tuple<Int,Bool>* %12
  %14 := GetPointer int, $tuple<Int,Bool>* %13.0
  %15 := Load int %14
  %16 := GetPointer bool, $tuple<Int,Bool>* %13.1
  %17 := Load bool %16
  Call void @test.use<Int>(%15)
  Call void @test.use<Bool>(%17)
  Ret
}

type test.Variant {byte, byte[23]}

type test.Variant::Tup1 {byte, byte[3], int, std.string.String*, byte[8]}

type test.Variant::Tup2 {byte, byte[7], std.string.String*, int, byte[4]}

func void @test.destructureVariants(test.Variant* %18) {
  %19 := Load byte %18
  %20 := Eq byte %19, 0
  branch %20, @0, @1
label @0:
  %21 := GetPointer int, test.Variant::Tup1* %18.2
  %22 := Load int %21
  %23 := GetPointer std.string.String*, test.Variant::Tup1* %18.3
  %24 := Load std.string.String* %23
  continue @2
label @1:
  %25 := GetPointer std.string.String*, test.Variant::Tup2* %18.2
  %26 := Load std.string.String* %25
  %27 := GetPointer int, test.Variant::Tup2* %18.3
  %28 := Load int %27
  continue @2
label @2:
  %29 := Phi std.string.String* @0:%24, @1:%26
  %30 := Phi int @0:%22, @1:%28
  Call void @test.use<Int>(%30)
  Call void @test.use<String>(%29)
  Ret
}

type test.Tup {int, bool}

func void @test.destructureNamedTuple(test.Tup* %31) {
  %32 := GetPointer int, test.Tup* %31.0
  %33 := Load int %32
  %34 := GetPointer bool, test.Tup* %31.1
  %35 := Load bool %34
  Call void @test.use<Int>(%33)
  Call void @test.use<Bool>(%35)
  Ret
}

type test.Rec {int, bool}

func void @test.destructureNamedRecord(test.Rec* %36) {
  %37 := GetPointer int, test.Rec* %36.0
  %38 := Load int %37
  %39 := GetPointer bool, test.Rec* %36.1
  %40 := Load bool %39
  Call void @test.use<Int>(%38)
  Call void @test.use<Bool>(%40)
  Ret
}

type test.Rec2<Int> {int, bool}

func int @test.Rec2.methodDestructuring<Int>(test.Rec2<Int>* %41) {
  %42 := GetPointer int, test.Rec2<Int>* %41.0
  %43 := Load int %42
  Ret %43
}

func void @test.testUseRec2(test.Rec2<Int>* %44) {
  %45 := Call int @test.Rec2.methodDestructuring<Int>(%44)
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.destructureTuple)
  Call void @test.use<Function>(@test.destructureVariants)
  Call void @test.use<Function>(@test.destructureNamedTuple)
  Call void @test.use<Function>(@test.destructureNamedRecord)
  Call void @test.use<Function>(@test.testUseRec2)
  Ret 0
}
type $tuple<Int,Bool,(Int,Bool)> {int, bool, $tuple<Int,Bool>*}

type $tuple<Int,Bool> {int, bool}

func void @test.use<(Int,Bool)>($tuple<Int,Bool>* %0) {
  Ret
}

func void @test.use<Bool>(bool %0) {
  Ret
}

func void @test.use<Int>(int %0) {
  Ret
}

func void @test.use<String>(std.string.String* %0) {
  Ret
}

func void @test.destructureTuple($tuple<Int,Bool,(Int,Bool)>* %0) {
  %1 := GetPointer int, $tuple<Int,Bool,(Int,Bool)>* %0.0
  %2 := Load int %1
  %3 := GetPointer bool, $tuple<Int,Bool,(Int,Bool)>* %0.1
  %4 := Load bool %3
  %5 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %0.2
  %6 := Load $tuple<Int,Bool>* %5
  Call void @test.use<Int>(%2)
  Call void @test.use<Bool>(%4)
  Call void @test.use<(Int,Bool)>(%6)
  %7 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %0.2
  %8 := Load $tuple<Int,Bool>* %7
  %9 := GetPointer int, $tuple<Int,Bool>* %8.0
  %10 := Load int %9
  %11 := GetPointer bool, $tuple<Int,Bool>* %8.1
  %12 := Load bool %11
  Call void @test.use<Int>(%10)
  Call void @test.use<Bool>(%12)
  Ret
}

type test.Variant {byte, byte[7], byte*}

type test.Variant::Tup1 {byte, byte[3], int, std.string.String*}

type test.Variant::Tup2 {byte, byte[3], int, std.string.String*}

func void @test.destructureVariants(test.Variant* %0) {
  %1 := Cast test.Variant* %0 to byte*
  %2 := Load byte %1
  %3 := Eq byte %2, 0
  branch %3, @0, @1
label @0:
  %4 := Cast test.Variant* %0 to test.Variant::Tup1*
  %5 := GetPointer int, test.Variant::Tup1* %4.2
  %6 := Load int %5
  %7 := Cast test.Variant* %0 to test.Variant::Tup1*
  %8 := GetPointer std.string.String*, test.Variant::Tup1* %7.3
  %9 := Load std.string.String* %8
  continue @2
label @1:
  %10 := Cast test.Variant* %0 to test.Variant::Tup2*
  %11 := GetPointer std.string.String*, test.Variant::Tup2* %10.3
  %12 := Load std.string.String* %11
  %13 := Cast test.Variant* %0 to test.Variant::Tup2*
  %14 := GetPointer int, test.Variant::Tup2* %13.2
  %15 := Load int %14
  continue @2
label @2:
  %16 := Phi std.string.String* @0:%9, @1:%12
  %17 := Phi int @0:%6, @1:%15
  Call void @test.use<Int>(%17)
  Call void @test.use<String>(%16)
  Ret
}

type test.Tup {bool, int}

func void @test.destructureNamedTuple(test.Tup* %0) {
  %1 := GetPointer int, test.Tup* %0.1
  %2 := Load int %1
  %3 := GetPointer bool, test.Tup* %0.0
  %4 := Load bool %3
  Call void @test.use<Int>(%2)
  Call void @test.use<Bool>(%4)
  Ret
}

type test.Rec {bool, int}

func void @test.destructureNamedRecord(test.Rec* %0) {
  %1 := GetPointer int, test.Rec* %0.1
  %2 := Load int %1
  %3 := GetPointer bool, test.Rec* %0.0
  %4 := Load bool %3
  Call void @test.use<Int>(%2)
  Call void @test.use<Bool>(%4)
  Ret
}

type test.Rec2<Int> {bool, int}

func int @test.Rec2.methodDestructuring<Int>(test.Rec2<Int>* %0) {
  %1 := GetPointer int, test.Rec2<Int>* %0.1
  %2 := Load int %1
  Ret %2
}

func void @test.testUseRec2(test.Rec2<Int>* %0) {
  %1 := Call int @test.Rec2.methodDestructuring<Int>(%0)
  Ret
}

func int @test.main() {
  Ret 0
}
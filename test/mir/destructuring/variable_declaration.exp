type $tuple<Int,Bool,(Int,Bool)> {int, bool, $tuple<Int,Bool>*}

type $tuple<Int,Bool> {int, bool}

func void @test.use<(Int,Bool)>($tuple<Int,Bool>* %0) {
  Ret
}

func void @test.use<Bool>(bool %0) {
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func void @test.use<Int>(int %0) {
  Ret
}

func void @test.use<String>(std.string.String* %0) {
  Ret
}

func void @test.destructureTuple($tuple<Int,Bool,(Int,Bool)>* %0) {
  %1 := GetPointer int, $tuple<Int,Bool,(Int,Bool)>* %0.0
  %2 := Load int %1
  %3 := GetPointer bool, $tuple<Int,Bool,(Int,Bool)>* %0.1
  %4 := Load bool %3
  %5 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %0.2
  %6 := Load $tuple<Int,Bool>* %5
  Call void @test.use<Int>(%2)
  Call void @test.use<Bool>(%4)
  Call void @test.use<(Int,Bool)>(%6)
  %7 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %0.2
  %8 := Load $tuple<Int,Bool>* %7
  %9 := GetPointer int, $tuple<Int,Bool>* %8.0
  %10 := Load int %9
  %11 := GetPointer bool, $tuple<Int,Bool>* %8.1
  %12 := Load bool %11
  Call void @test.use<Int>(%10)
  Call void @test.use<Bool>(%12)
  Ret
}

type test.Variant {byte, byte[23]}

type test.Variant::Tup1 {byte, byte[3], int, std.string.String*, byte[8]}

type test.Variant::Tup2 {byte, byte[7], std.string.String*, int, byte[4]}

func void @test.destructureVariants(test.Variant* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 0
  branch %2, @0, @1
label @0:
  %3 := GetPointer int, test.Variant::Tup1* %0.2
  %4 := Load int %3
  %5 := GetPointer std.string.String*, test.Variant::Tup1* %0.3
  %6 := Load std.string.String* %5
  continue @2
label @1:
  %7 := GetPointer std.string.String*, test.Variant::Tup2* %0.2
  %8 := Load std.string.String* %7
  %9 := GetPointer int, test.Variant::Tup2* %0.3
  %10 := Load int %9
  continue @2
label @2:
  %11 := Phi std.string.String* @0:%6, @1:%8
  %12 := Phi int @0:%4, @1:%10
  Call void @test.use<Int>(%12)
  Call void @test.use<String>(%11)
  Ret
}

type test.Tup {int, bool}

func void @test.destructureNamedTuple(test.Tup* %0) {
  %1 := GetPointer int, test.Tup* %0.0
  %2 := Load int %1
  %3 := GetPointer bool, test.Tup* %0.1
  %4 := Load bool %3
  Call void @test.use<Int>(%2)
  Call void @test.use<Bool>(%4)
  Ret
}

type test.Rec {int, bool}

func void @test.destructureNamedRecord(test.Rec* %0) {
  %1 := GetPointer int, test.Rec* %0.0
  %2 := Load int %1
  %3 := GetPointer bool, test.Rec* %0.1
  %4 := Load bool %3
  Call void @test.use<Int>(%2)
  Call void @test.use<Bool>(%4)
  Ret
}

type test.Rec2<Int> {int, bool}

func int @test.Rec2.methodDestructuring<Int>(test.Rec2<Int>* %0) {
  %1 := GetPointer int, test.Rec2<Int>* %0.0
  %2 := Load int %1
  Ret %2
}

func void @test.testUseRec2(test.Rec2<Int>* %0) {
  %1 := Call int @test.Rec2.methodDestructuring<Int>(%0)
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.destructureTuple)
  Call void @test.use<Function>(@test.destructureVariants)
  Call void @test.use<Function>(@test.destructureNamedTuple)
  Call void @test.use<Function>(@test.destructureNamedRecord)
  Call void @test.use<Function>(@test.testUseRec2)
  Ret 0
}
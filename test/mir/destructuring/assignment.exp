type $tuple<Int,Bool,(Int,Bool)> {int, bool, $tuple<Int,Bool>*}

type $tuple<Int,Bool> {int, bool}

func unit @test.use<(Int,Bool)>($tuple<Int,Bool>* %0) {
  Ret
}

func unit @test.use<Bool>(bool %1) {
  Ret
}

func unit @test.use<Function>(fn %2) {
  Ret
}

func unit @test.use<Int>(int %3) {
  Ret
}

func unit @test.use<String>(std.string.String* %4) {
  Ret
}

func unit @test.destructureTuple($tuple<Int,Bool,(Int,Bool)>* %5) {
  %6 := CallBuiltin $tuple<Int,Bool>* myte_alloc(1)
  %7 := GetPointer int, $tuple<Int,Bool>* %6.0
  Store int %7, 1
  %8 := GetPointer bool, $tuple<Int,Bool>* %6.1
  Store bool %8, true
  %9 := GetPointer int, $tuple<Int,Bool,(Int,Bool)>* %5.0
  %10 := Load int %9
  %11 := GetPointer bool, $tuple<Int,Bool,(Int,Bool)>* %5.1
  %12 := Load bool %11
  %13 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %5.2
  %14 := Load $tuple<Int,Bool>* %13
  %15 := Call unit @test.use<Int>(%10)
  %16 := Call unit @test.use<Bool>(%12)
  %17 := Call unit @test.use<(Int,Bool)>(%14)
  %18 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %5.2
  %19 := Load $tuple<Int,Bool>* %18
  %20 := GetPointer int, $tuple<Int,Bool>* %19.0
  %21 := Load int %20
  %22 := GetPointer bool, $tuple<Int,Bool>* %19.1
  %23 := Load bool %22
  %24 := Call unit @test.use<Int>(%21)
  %25 := Call unit @test.use<Bool>(%23)
  Ret
}

type test.Variant {byte, byte[23]}

type test.Variant::Tup1 {byte, byte[3], int, std.string.String*, byte[8]}

type test.Variant::Tup2 {byte, byte[7], std.string.String*, int, byte[4]}

func unit @test.destructureVariants(test.Variant* %26) {
  %27 := CallBuiltin std.string.String* myte_alloc(1)
  %28 := GetPointer byte*, std.string.String* %27.0
  Store byte* %28, @.S1
  %29 := GetPointer int, std.string.String* %27.1
  Store int %29, 0
  %30 := GetPointer int, std.string.String* %27.2
  Store int %30, 0
  %31 := Load byte %26
  %32 := Eq byte %31, 0
  branch %32, @0, @1
label @0:
  %33 := GetPointer int, test.Variant::Tup1* %26.2
  %34 := Load int %33
  %35 := GetPointer std.string.String*, test.Variant::Tup1* %26.3
  %36 := Load std.string.String* %35
  continue @2
label @1:
  %37 := GetPointer std.string.String*, test.Variant::Tup2* %26.2
  %38 := Load std.string.String* %37
  %39 := GetPointer int, test.Variant::Tup2* %26.3
  %40 := Load int %39
  continue @2
label @2:
  %41 := Phi int @0:%34, @1:%40
  %42 := Phi std.string.String* @0:%36, @1:%38
  %43 := Call unit @test.use<Int>(%41)
  %44 := Call unit @test.use<String>(%42)
  Ret
}

global byte[0] @.S1 = ""

type test.Tup {int, bool}

func unit @test.destructureNamedTuple(test.Tup* %45) {
  %46 := GetPointer int, test.Tup* %45.0
  %47 := Load int %46
  %48 := GetPointer bool, test.Tup* %45.1
  %49 := Load bool %48
  %50 := Call unit @test.use<Int>(%47)
  %51 := Call unit @test.use<Bool>(%49)
  Ret
}

type test.Rec {int, bool}

func unit @test.destructureNamedRecord(test.Rec* %52) {
  %53 := GetPointer int, test.Rec* %52.0
  %54 := Load int %53
  %55 := GetPointer bool, test.Rec* %52.1
  %56 := Load bool %55
  %57 := Call unit @test.use<Int>(%54)
  %58 := Call unit @test.use<Bool>(%56)
  Ret
}

global int @test.globalInt = 1

global bool @test.globalBool = true

func unit @test.destructureAssignGlobals($tuple<Int,Bool>* %59) {
  %60 := GetPointer int, $tuple<Int,Bool>* %59.0
  %61 := Load int %60
  Store int @test.globalInt, %61
  %62 := GetPointer bool, $tuple<Int,Bool>* %59.1
  %63 := Load bool %62
  Store bool @test.globalBool, %63
  %64 := GetPointer int, $tuple<Int,Bool>* %59.0
  %65 := Load int %64
  Store int @test.globalInt, %65
  %66 := GetPointer bool, $tuple<Int,Bool>* %59.1
  %67 := Load bool %66
  Ret
}

func int @test.main() {
  %68 := Call unit @test.use<Function>(@test.destructureTuple)
  %69 := Call unit @test.use<Function>(@test.destructureVariants)
  %70 := Call unit @test.use<Function>(@test.destructureNamedTuple)
  %71 := Call unit @test.use<Function>(@test.destructureNamedRecord)
  %72 := Call unit @test.use<Function>(@test.destructureAssignGlobals)
  Ret 0
}
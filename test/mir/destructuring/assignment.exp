type $tuple<Int,Bool,(Int,Bool)> {int, bool, $tuple<Int,Bool>*}

type $tuple<Int,Bool> {int, bool}

func void @test.use<(Int,Bool)>($tuple<Int,Bool>* %0) {
  Ret
}

func void @test.use<Bool>(bool %0) {
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func void @test.use<Int>(int %0) {
  Ret
}

func void @test.use<String>(std.string.String* %0) {
  Ret
}

func void @test.destructureTuple($tuple<Int,Bool,(Int,Bool)>* %0) {
  %1 := Call $tuple<Int,Bool>* myte.builtin.alloc(1)
  %2 := GetPointer int, $tuple<Int,Bool>* %1.0
  Store int %2, 1
  %3 := GetPointer bool, $tuple<Int,Bool>* %1.1
  Store bool %3, true
  %4 := GetPointer int, $tuple<Int,Bool,(Int,Bool)>* %0.0
  %5 := Load int %4
  %6 := GetPointer bool, $tuple<Int,Bool,(Int,Bool)>* %0.1
  %7 := Load bool %6
  %8 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %0.2
  %9 := Load $tuple<Int,Bool>* %8
  Call void @test.use<Int>(%5)
  Call void @test.use<Bool>(%7)
  Call void @test.use<(Int,Bool)>(%9)
  %10 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %0.2
  %11 := Load $tuple<Int,Bool>* %10
  %12 := GetPointer int, $tuple<Int,Bool>* %11.0
  %13 := Load int %12
  %14 := GetPointer bool, $tuple<Int,Bool>* %11.1
  %15 := Load bool %14
  Call void @test.use<Int>(%13)
  Call void @test.use<Bool>(%15)
  Ret
}

type test.Variant {byte, byte[7], byte*}

type test.Variant::Tup1 {byte, byte[3], int, std.string.String*}

type test.Variant::Tup2 {byte, byte[3], int, std.string.String*}

func void @test.destructureVariants(test.Variant* %0) {
  %1 := Call std.string.String* myte.builtin.alloc(1)
  %2 := GetPointer byte*, std.string.String* %1.2
  Store byte* %2, null
  %3 := GetPointer int, std.string.String* %1.0
  Store int %3, 0
  %4 := GetPointer int, std.string.String* %1.1
  Store int %4, 0
  %5 := Cast test.Variant* %0 to byte*
  %6 := Load byte %5
  %7 := Eq byte %6, 0
  branch %7, @0, @1
label @0:
  %8 := Cast test.Variant* %0 to test.Variant::Tup1*
  %9 := GetPointer int, test.Variant::Tup1* %8.2
  %10 := Load int %9
  %11 := Cast test.Variant* %0 to test.Variant::Tup1*
  %12 := GetPointer std.string.String*, test.Variant::Tup1* %11.3
  %13 := Load std.string.String* %12
  continue @2
label @1:
  %14 := Cast test.Variant* %0 to test.Variant::Tup2*
  %15 := GetPointer std.string.String*, test.Variant::Tup2* %14.3
  %16 := Load std.string.String* %15
  %17 := Cast test.Variant* %0 to test.Variant::Tup2*
  %18 := GetPointer int, test.Variant::Tup2* %17.2
  %19 := Load int %18
  continue @2
label @2:
  %20 := Phi int @0:%10, @1:%19
  %21 := Phi std.string.String* @0:%13, @1:%16
  Call void @test.use<Int>(%20)
  Call void @test.use<String>(%21)
  Ret
}

type test.Tup {bool, int}

func void @test.destructureNamedTuple(test.Tup* %0) {
  %1 := GetPointer int, test.Tup* %0.1
  %2 := Load int %1
  %3 := GetPointer bool, test.Tup* %0.0
  %4 := Load bool %3
  Call void @test.use<Int>(%2)
  Call void @test.use<Bool>(%4)
  Ret
}

type test.Rec {bool, int}

func void @test.destructureNamedRecord(test.Rec* %0) {
  %1 := GetPointer int, test.Rec* %0.1
  %2 := Load int %1
  %3 := GetPointer bool, test.Rec* %0.0
  %4 := Load bool %3
  Call void @test.use<Int>(%2)
  Call void @test.use<Bool>(%4)
  Ret
}

global int @test.globalInt = 1

global bool @test.globalBool = true

func void @test.destructureAssignGlobals($tuple<Int,Bool>* %0) {
  %1 := GetPointer int, $tuple<Int,Bool>* %0.0
  %2 := Load int %1
  Store int @test.globalInt, %2
  %3 := GetPointer bool, $tuple<Int,Bool>* %0.1
  %4 := Load bool %3
  Store bool @test.globalBool, %4
  %5 := GetPointer int, $tuple<Int,Bool>* %0.0
  %6 := Load int %5
  Store int @test.globalInt, %6
  %7 := GetPointer bool, $tuple<Int,Bool>* %0.1
  %8 := Load bool %7
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.destructureTuple)
  Call void @test.use<Function>(@test.destructureVariants)
  Call void @test.use<Function>(@test.destructureNamedTuple)
  Call void @test.use<Function>(@test.destructureNamedRecord)
  Call void @test.use<Function>(@test.destructureAssignGlobals)
  Ret 0
}
type $tuple<Int,Bool,(Int,Bool)> {int, bool, $tuple<Int,Bool>*}

type $tuple<Int,Bool> {int, bool}

func void @test.use<(Int,Bool)>($tuple<Int,Bool>* %0) {
  Ret
}

func void @test.use<Bool>(bool %1) {
  Ret
}

func void @test.use<Function>(fn %2) {
  Ret
}

func void @test.use<Int>(int %3) {
  Ret
}

func void @test.use<String>(std.string.String* %4) {
  Ret
}

func void @test.destructureTuple($tuple<Int,Bool,(Int,Bool)>* %5) {
  %6 := CallBuiltin $tuple<Int,Bool>* myte_alloc(1)
  %7 := GetPointer int, $tuple<Int,Bool>* %6.0
  Store int %7, 1
  %8 := GetPointer bool, $tuple<Int,Bool>* %6.1
  Store bool %8, true
  %9 := GetPointer int, $tuple<Int,Bool,(Int,Bool)>* %5.0
  %10 := Load int %9
  %11 := GetPointer bool, $tuple<Int,Bool,(Int,Bool)>* %5.1
  %12 := Load bool %11
  %13 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %5.2
  %14 := Load $tuple<Int,Bool>* %13
  Call void @test.use<Int>(%10)
  Call void @test.use<Bool>(%12)
  Call void @test.use<(Int,Bool)>(%14)
  %15 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %5.2
  %16 := Load $tuple<Int,Bool>* %15
  %17 := GetPointer int, $tuple<Int,Bool>* %16.0
  %18 := Load int %17
  %19 := GetPointer bool, $tuple<Int,Bool>* %16.1
  %20 := Load bool %19
  Call void @test.use<Int>(%18)
  Call void @test.use<Bool>(%20)
  Ret
}

type test.Variant {byte, byte[23]}

type test.Variant::Tup1 {byte, byte[3], int, std.string.String*, byte[8]}

type test.Variant::Tup2 {byte, byte[7], std.string.String*, int, byte[4]}

func void @test.destructureVariants(test.Variant* %21) {
  %22 := CallBuiltin std.string.String* myte_alloc(1)
  %23 := GetPointer byte*, std.string.String* %22.0
  Store byte* %23, @.S1
  %24 := GetPointer int, std.string.String* %22.1
  Store int %24, 0
  %25 := GetPointer int, std.string.String* %22.2
  Store int %25, 0
  %26 := Load byte %21
  %27 := Eq byte %26, 0
  branch %27, @0, @1
label @0:
  %28 := GetPointer int, test.Variant::Tup1* %21.2
  %29 := Load int %28
  %30 := GetPointer std.string.String*, test.Variant::Tup1* %21.3
  %31 := Load std.string.String* %30
  continue @2
label @1:
  %32 := GetPointer std.string.String*, test.Variant::Tup2* %21.2
  %33 := Load std.string.String* %32
  %34 := GetPointer int, test.Variant::Tup2* %21.3
  %35 := Load int %34
  continue @2
label @2:
  %36 := Phi int @0:%29, @1:%35
  %37 := Phi std.string.String* @0:%31, @1:%33
  Call void @test.use<Int>(%36)
  Call void @test.use<String>(%37)
  Ret
}

global byte[0] @.S1 = ""

type test.Tup {int, bool}

func void @test.destructureNamedTuple(test.Tup* %38) {
  %39 := GetPointer int, test.Tup* %38.0
  %40 := Load int %39
  %41 := GetPointer bool, test.Tup* %38.1
  %42 := Load bool %41
  Call void @test.use<Int>(%40)
  Call void @test.use<Bool>(%42)
  Ret
}

type test.Rec {int, bool}

func void @test.destructureNamedRecord(test.Rec* %43) {
  %44 := GetPointer int, test.Rec* %43.0
  %45 := Load int %44
  %46 := GetPointer bool, test.Rec* %43.1
  %47 := Load bool %46
  Call void @test.use<Int>(%45)
  Call void @test.use<Bool>(%47)
  Ret
}

global int @test.globalInt = 1

global bool @test.globalBool = true

func void @test.destructureAssignGlobals($tuple<Int,Bool>* %48) {
  %49 := GetPointer int, $tuple<Int,Bool>* %48.0
  %50 := Load int %49
  Store int @test.globalInt, %50
  %51 := GetPointer bool, $tuple<Int,Bool>* %48.1
  %52 := Load bool %51
  Store bool @test.globalBool, %52
  %53 := GetPointer int, $tuple<Int,Bool>* %48.0
  %54 := Load int %53
  Store int @test.globalInt, %54
  %55 := GetPointer bool, $tuple<Int,Bool>* %48.1
  %56 := Load bool %55
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.destructureTuple)
  Call void @test.use<Function>(@test.destructureVariants)
  Call void @test.use<Function>(@test.destructureNamedTuple)
  Call void @test.use<Function>(@test.destructureNamedRecord)
  Call void @test.use<Function>(@test.destructureAssignGlobals)
  Ret 0
}
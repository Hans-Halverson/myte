type $tuple<Int,Bool,(Int,Bool)> {int, long, $tuple<Int,Bool>*}

type $tuple<Int,Bool> {int, long}

func void @test.use<(Int,Bool)>($tuple<Int,Bool>* %0) {
  Ret
}

func void @test.use<Bool>(long %0) {
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func void @test.use<Int>(int %0) {
  Ret
}

func void @test.use<String>(std.string.String* %0) {
  Ret
}

func void @test.destructureTuple($tuple<Int,Bool,(Int,Bool)>* %0) {
  %1 := CallBuiltin $tuple<Int,Bool>* myte_alloc(1)
  %2 := GetPointer int, $tuple<Int,Bool>* %1.0
  Store int %2, 1
  %3 := GetPointer long, $tuple<Int,Bool>* %1.1
  Store long %3, 3
  %4 := GetPointer int, $tuple<Int,Bool,(Int,Bool)>* %0.0
  %5 := Load int %4
  %6 := GetPointer long, $tuple<Int,Bool,(Int,Bool)>* %0.1
  %7 := Load long %6
  %8 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %0.2
  %9 := Load $tuple<Int,Bool>* %8
  Call void @test.use<Int>(%5)
  Call void @test.use<Bool>(%7)
  Call void @test.use<(Int,Bool)>(%9)
  %10 := GetPointer $tuple<Int,Bool>*, $tuple<Int,Bool,(Int,Bool)>* %0.2
  %11 := Load $tuple<Int,Bool>* %10
  %12 := GetPointer int, $tuple<Int,Bool>* %11.0
  %13 := Load int %12
  %14 := GetPointer long, $tuple<Int,Bool>* %11.1
  %15 := Load long %14
  Call void @test.use<Int>(%13)
  Call void @test.use<Bool>(%15)
  Ret
}

type test.Variant {byte, byte[23]}

type test.Variant::Tup1 {byte, byte[3], int, std.string.String*, byte[8]}

type test.Variant::Tup2 {byte, byte[7], std.string.String*, int, byte[4]}

func void @test.destructureVariants(test.Variant* %0) {
  %1 := CallBuiltin std.string.String* myte_alloc(1)
  %2 := GetPointer byte*, std.string.String* %1.0
  Store byte* %2, 0
  %3 := GetPointer int, std.string.String* %1.1
  Store int %3, 0
  %4 := GetPointer int, std.string.String* %1.2
  Store int %4, 0
  %5 := Load byte %0
  %6 := Eq byte %5, 0
  branch %6, @0, @1
label @0:
  %7 := GetPointer int, test.Variant::Tup1* %0.2
  %8 := Load int %7
  %9 := GetPointer std.string.String*, test.Variant::Tup1* %0.3
  %10 := Load std.string.String* %9
  continue @2
label @1:
  %11 := GetPointer std.string.String*, test.Variant::Tup2* %0.2
  %12 := Load std.string.String* %11
  %13 := GetPointer int, test.Variant::Tup2* %0.3
  %14 := Load int %13
  continue @2
label @2:
  %15 := Phi int @0:%8, @1:%14
  %16 := Phi std.string.String* @0:%10, @1:%12
  Call void @test.use<Int>(%15)
  Call void @test.use<String>(%16)
  Ret
}

type test.Tup {int, long}

func void @test.destructureNamedTuple(test.Tup* %0) {
  %1 := GetPointer int, test.Tup* %0.0
  %2 := Load int %1
  %3 := GetPointer long, test.Tup* %0.1
  %4 := Load long %3
  Call void @test.use<Int>(%2)
  Call void @test.use<Bool>(%4)
  Ret
}

type test.Rec {int, long}

func void @test.destructureNamedRecord(test.Rec* %0) {
  %1 := GetPointer int, test.Rec* %0.0
  %2 := Load int %1
  %3 := GetPointer long, test.Rec* %0.1
  %4 := Load long %3
  Call void @test.use<Int>(%2)
  Call void @test.use<Bool>(%4)
  Ret
}

global int @test.globalInt = 1

global long @test.globalBool = 3

func void @test.destructureAssignGlobals($tuple<Int,Bool>* %0) {
  %1 := GetPointer int, $tuple<Int,Bool>* %0.0
  %2 := Load int %1
  Store int @test.globalInt, %2
  %3 := GetPointer long, $tuple<Int,Bool>* %0.1
  %4 := Load long %3
  Store long @test.globalBool, %4
  %5 := GetPointer int, $tuple<Int,Bool>* %0.0
  %6 := Load int %5
  Store int @test.globalInt, %6
  %7 := GetPointer long, $tuple<Int,Bool>* %0.1
  %8 := Load long %7
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.destructureTuple)
  Call void @test.use<Function>(@test.destructureVariants)
  Call void @test.use<Function>(@test.destructureNamedTuple)
  Call void @test.use<Function>(@test.destructureNamedRecord)
  Call void @test.use<Function>(@test.destructureAssignGlobals)
  Ret 0
}
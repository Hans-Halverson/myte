module test

fun use<T>(x: T) {}

fun destructureTuple(t: (Int, Bool, (Int, Bool))) {
  // Destructuring
  val (x, y, z) = t;
  use(x);
  use(y);
  use(z);

  // Nested destructuring
  val (_, _, (x, y)) = t;
  use(x);
  use(y);
}

type Variant =
  | Tup1 (Int, String)
  | Tup2 (String, Int)

fun destructureVariants(v: Variant) {
  val Tup1 (x, y) | Tup2 (y, x) = v;
  use(x);
  use(y);
}

type Tup (Int, Bool)

fun destructureNamedTuple(t: Tup) {
  val Tup (x, y) = t;
  use(x);
  use(y);
}

type Rec { foo: Int, bar: Bool }

fun destructureNamedRecord(r: Rec) {
  val Rec { foo, bar: y } = r;
  use(foo);
  use(y);
}

// Destructuring generic in methods
type Rec2<T> { foo: T, bar: Bool }

methods Rec2<T> {
  fun methodDestructuring(): T {
    val Rec2 { foo, ... } = this;
    return foo;
  }
}

fun testUseRec2(x: Rec2<Int>) {
  x.methodDestructuring();
}

fun main() {}
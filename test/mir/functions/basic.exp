type _closure {fn, byte*}

func void @test.use<Bool>(bool %0) {
  Ret
}

func void @test.use<Function>(_closure* %0) {
  Ret
}

func void @test.use<Int>(int %0) {
  Ret
}

func void @test.use<Unit>() {
  Ret
}

func void @test.use<test.ZeroSize>() {
  Ret
}

func void @test.empty() {
  Ret
}

func void @test.emptyParams(int %0, bool %1) {
  Ret
}

func int @test.shorthand(int %0) {
  Ret 1
}

func void @test.withBody(int %0, bool %1, bool %2) {
  Call void @test.use<Int>(10)
  branch %1, @1, @0
label @0:
  continue @1
label @1:
  %3 := Phi bool @test.withBody:%2, @0:false
  Ret
}

func void @test.zeroSizeParams(int %0, bool %1) {
  Call void @test.use<Unit>()
  Call void @test.use<test.ZeroSize>()
  Ret
}

func int @test.main() {
  Call void @test.use<Bool>(true)
  Call void @test.use<Function>(@_closure$test.empty)
  Call void @test.use<Function>(@_closure$test.emptyParams)
  Call void @test.use<Function>(@_closure$test.shorthand)
  Call void @test.use<Function>(@_closure$test.withBody)
  Call void @test.use<Function>(@_closure$test.zeroSizeParams)
  Ret 0
}

global _closure @_closure$test.empty = {@test.empty, null}

global _closure @_closure$test.emptyParams = {@test.emptyParams, null}

global _closure @_closure$test.shorthand = {@test.shorthand, null}

global _closure @_closure$test.withBody = {@test.withBody, null}

global _closure @_closure$test.zeroSizeParams = {@test.zeroSizeParams, null}
type test.Rec1 {int, test.Rec1*}

type test.Rec2<Int> {int, test.Rec2<Int>*}

func void @test.useSelfRecursive(test.Rec1* %0, test.Rec2<Int>* %1) {
  Ret
}

type test.Rec3 {int, test.Rec4*}

type test.Rec4 {std.string.String*, test.Rec5*}

type test.Rec5 {bool, test.Rec3*}

func void @test.useMutuallyRecursive(test.Rec4* %0) {
  Ret
}

type test.VRec1<Bool> {byte, byte[7], byte*, byte*}

type test.VRec1<Int> {byte, byte[7], byte*, byte*}

type test.VRec1<Bool>::Tree {byte, bool, byte[6], test.VRec1<Bool>*, test.VRec1<Bool>*}

type test.VRec1<Int>::Tree {byte, byte[3], int, test.VRec1<Int>*, test.VRec1<Int>*}

func void @test.useSelfRecursiveVariant(test.VRec1<Bool>* %0, test.VRec1<Int>* %1) {
  Ret
}

type test.VRec2 {byte, byte[7], byte*}

type test.VRec2::T1 {byte, byte[3], int, test.VRec3*}

type test.VRec3 {byte, byte[7], byte*}

type test.VRec3::T2 {byte, byte, byte[6], test.VRec2*}

func void @test.useMutuallyRecursiveVariants(test.VRec2* %0) {
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.useSelfRecursive)
  Call void @test.use<Function>(@test.useMutuallyRecursive)
  Call void @test.use<Function>(@test.useSelfRecursiveVariant)
  Call void @test.use<Function>(@test.useMutuallyRecursiveVariants)
  Ret 0
}
type $tuple<byte,byte> {byte, byte}

func unit @test.useByteEnum(byte %0) {
  Ret
}

func $tuple<byte,byte>* @test.testPureEnum1Values() {
  %1 := Call unit @test.useByteEnum(0)
  %2 := Call unit @test.useByteEnum(1)
  %3 := CallBuiltin $tuple<byte,byte>* myte_alloc(1)
  %4 := GetPointer byte, $tuple<byte,byte>* %3.0
  Store byte %4, 3
  %5 := GetPointer byte, $tuple<byte,byte>* %3.1
  Store byte %5, 2
  Ret %3
}

func unit @test.useFullByteEnum(byte %6) {
  Ret
}

func unit @test.testFullByteEnum() {
  %7 := Call unit @test.useFullByteEnum(0)
  %8 := Call unit @test.useFullByteEnum(1)
  %9 := Call unit @test.useFullByteEnum(127)
  %10 := Call unit @test.useFullByteEnum(-1)
  %11 := Call unit @test.useFullByteEnum(-127)
  %12 := Call unit @test.useFullByteEnum(-128)
  Ret
}

func unit @test.useIntEnum(int %13) {
  Ret
}

func unit @test.testIntEnum() {
  %14 := Call unit @test.useIntEnum(0)
  %15 := Call unit @test.useIntEnum(1)
  %16 := Call unit @test.useIntEnum(254)
  %17 := Call unit @test.useIntEnum(255)
  %18 := Call unit @test.useIntEnum(256)
  Ret
}

func unit @test.use<fn>(fn %19) {
  Ret
}

func int @test.main() {
  %20 := Call unit @test.use<fn>(@test.testPureEnum1Values)
  %21 := Call unit @test.use<fn>(@test.testFullByteEnum)
  %22 := Call unit @test.use<fn>(@test.testIntEnum)
  Ret 0
}
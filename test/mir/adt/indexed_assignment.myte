module test

type Rec1 { var foo: Int }

type Rec2 { var foo: String, var bar: Bool, var baz: Int }

type Rec3 { var foo: Byte, var bar: Rec2, var baz: Long }

type Rec4 { var foo: Int, var bar: Int, var baz: Rec3 }

type Tup1 (Rec3)

fun getInt(): Int = 1

fun simpleAccesses(r1: Rec1, r2: Rec2) {
  // Simple accesses
  r1.foo = 1;

  r2.foo = "string";
  r2.bar = true;
}

fun nestedAccesses(r3: Rec3, r4: Rec4) {
  // Nested accesses
  r3.foo = (1: Byte);
  r3.bar.baz = (1: Int);

  r4.baz.bar.foo = "string";
}

fun namedAndIndexedAccess(t1: Tup1) {
  // Named access after indexed access
  t1[0].bar.foo = "string";
}

fun accessOperatorAssign(r1: Rec1, r3: Rec3, t1: Tup1) {
  r1.foo += 1;
  r1.foo += getInt();

  r3.bar.baz += 1;
  t1[0].baz += 1;
}

fun main() {}
func int @test.testBytes(byte %0) {
  %1 := Eq byte %0, -1
  branch %1, @3, @0
label @0:
  %2 := Eq byte %0, 0
  branch %2, @3, @1
label @1:
  %3 := Eq byte %0, 5
  branch %3, @3, @2
label @2:
  continue @3
label @3:
  %4 := Phi int @test.testBytes:2, @0:1, @1:3, @2:4
  Ret %4
}

func int @test.testInts(int %0) {
  %1 := Eq int %0, -1
  branch %1, @3, @0
label @0:
  %2 := Eq int %0, 0
  branch %2, @3, @1
label @1:
  %3 := Eq int %0, 5
  branch %3, @3, @2
label @2:
  continue @3
label @3:
  %4 := Phi int @test.testInts:2, @0:1, @1:3, @2:4
  Ret %4
}

func int @test.testLongs(long %0) {
  %1 := Eq long %0, -1
  branch %1, @3, @0
label @0:
  %2 := Eq long %0, 0
  branch %2, @3, @1
label @1:
  %3 := Eq long %0, 5
  branch %3, @3, @2
label @2:
  continue @3
label @3:
  %4 := Phi int @test.testLongs:2, @0:1, @1:3, @2:4
  Ret %4
}

func int @test.testCharLiterals(byte %0) {
  %1 := Eq byte %0, 48
  branch %1, @3, @0
label @0:
  %2 := Eq byte %0, 97
  branch %2, @3, @1
label @1:
  %3 := Eq byte %0, 98
  branch %3, @3, @2
label @2:
  continue @3
label @3:
  %4 := Phi int @test.testCharLiterals:3, @0:1, @1:2, @2:4
  Ret %4
}

func void @test.use<Function>(fn %0) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testBytes)
  Call void @test.use<Function>(@test.testInts)
  Call void @test.use<Function>(@test.testLongs)
  Call void @test.use<Function>(@test.testCharLiterals)
  Ret 0
}
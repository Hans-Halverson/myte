func int @test.testBytes(byte %0) {
  %1 := Eq byte %0, -1
  branch %1, @3, @0
label @0:
  %2 := Eq byte %0, 0
  branch %2, @3, @1
label @1:
  %3 := Eq byte %0, 5
  branch %3, @3, @2
label @2:
  continue @3
label @3:
  %4 := Phi int @test.testBytes:2, @0:1, @1:3, @2:4
  Ret %4
}

func int @test.testInts(int %5) {
  %6 := Eq int %5, -1
  branch %6, @7, @4
label @4:
  %7 := Eq int %5, 0
  branch %7, @7, @5
label @5:
  %8 := Eq int %5, 5
  branch %8, @7, @6
label @6:
  continue @7
label @7:
  %9 := Phi int @test.testInts:2, @4:1, @5:3, @6:4
  Ret %9
}

func int @test.testLongs(long %10) {
  %11 := Eq long %10, -1
  branch %11, @11, @8
label @8:
  %12 := Eq long %10, 0
  branch %12, @11, @9
label @9:
  %13 := Eq long %10, 5
  branch %13, @11, @10
label @10:
  continue @11
label @11:
  %14 := Phi int @test.testLongs:2, @8:1, @9:3, @10:4
  Ret %14
}

func int @test.testCharLiterals(byte %15) {
  %16 := Eq byte %15, 48
  branch %16, @15, @12
label @12:
  %17 := Eq byte %15, 97
  branch %17, @15, @13
label @13:
  %18 := Eq byte %15, 98
  branch %18, @15, @14
label @14:
  continue @15
label @15:
  %19 := Phi int @test.testCharLiterals:3, @12:1, @13:2, @14:4
  Ret %19
}

func void @test.use<Function>(fn %20) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testBytes)
  Call void @test.use<Function>(@test.testInts)
  Call void @test.use<Function>(@test.testLongs)
  Call void @test.use<Function>(@test.testCharLiterals)
  Ret 0
}
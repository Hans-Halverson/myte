func void @test.testMatchExpressionBlockValues(bool %0) {
  %1 := Eq bool %0, false
  branch %1, @1, @0
label @0:
  continue @1
label @1:
  %2 := Phi int @test.testMatchExpressionBlockValues:2, @0:1
  Call void @test.use<Int>(%2)
  Ret
}

func void @test.testMatchStatementInExpressionPosition(bool %3) {
  branch %3, @2, @5
label @2:
  %4 := Eq bool %3, false
  branch %4, @4, @3
label @3:
  continue @4
label @4:
  %5 := Phi int @2:2, @3:1
  continue @5
label @5:
  %6 := Phi int @test.testMatchStatementInExpressionPosition:3, @4:%5
  Call void @test.use<Int>(%6)
  Ret
}

func void @test.testNestedMatchAndIf(bool %7) {
  branch %7, @6, @16
label @6:
  %8 := Eq bool %7, false
  branch %8, @15, @7
label @7:
  branch %7, @8, @11
label @8:
  %9 := Eq bool %7, false
  branch %9, @10, @9
label @9:
  continue @10
label @10:
  %10 := Phi int @8:2, @9:1
  continue @14
label @11:
  %11 := Eq bool %7, false
  branch %11, @13, @12
label @12:
  continue @13
label @13:
  %12 := Phi int @11:4, @12:3
  continue @14
label @14:
  %13 := Phi int @10:%10, @13:%12
  continue @15
label @15:
  %14 := Phi int @6:5, @14:%13
  continue @16
label @16:
  %15 := Phi int @test.testNestedMatchAndIf:6, @15:%14
  Call void @test.use<Int>(%15)
  Ret
}

func void @test.use<Function>(fn %16) {
  Ret
}

func void @test.use<Int>(int %17) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testMatchExpressionBlockValues)
  Call void @test.use<Function>(@test.testMatchStatementInExpressionPosition)
  Call void @test.use<Function>(@test.testNestedMatchAndIf)
  Ret 0
}
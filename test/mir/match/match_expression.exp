func void @test.testMatchExpressionBlockValues(bool %0) {
  %1 := Eq bool %0, false
  branch %1, @1, @0
label @0:
  continue @1
label @1:
  %2 := Phi int @test.testMatchExpressionBlockValues:2, @0:1
  Call void @test.use<Int>(%2)
  Ret
}

func void @test.testMatchStatementInExpressionPosition(bool %0) {
  branch %0, @0, @3
label @0:
  %1 := Eq bool %0, false
  branch %1, @2, @1
label @1:
  continue @2
label @2:
  %2 := Phi int @0:2, @1:1
  continue @3
label @3:
  %3 := Phi int @test.testMatchStatementInExpressionPosition:3, @2:%2
  Call void @test.use<Int>(%3)
  Ret
}

func void @test.testNestedMatchAndIf(bool %0) {
  branch %0, @0, @10
label @0:
  %1 := Eq bool %0, false
  branch %1, @9, @1
label @1:
  branch %0, @2, @5
label @2:
  %2 := Eq bool %0, false
  branch %2, @4, @3
label @3:
  continue @4
label @4:
  %3 := Phi int @2:2, @3:1
  continue @8
label @5:
  %4 := Eq bool %0, false
  branch %4, @7, @6
label @6:
  continue @7
label @7:
  %5 := Phi int @5:4, @6:3
  continue @8
label @8:
  %6 := Phi int @4:%3, @7:%5
  continue @9
label @9:
  %7 := Phi int @0:5, @8:%6
  continue @10
label @10:
  %8 := Phi int @test.testNestedMatchAndIf:6, @9:%7
  Call void @test.use<Int>(%8)
  Ret
}

func void @test.testZeroSizeMatch(bool %0) {
  %1 := Eq bool %0, false
  branch %1, @0, @1
label @0:
  Call void @test.use<Bool>(false)
  continue @2
label @1:
  Call void @test.use<Bool>(true)
  continue @2
label @2:
  Call void @test.use<test.ZeroSize>()
  Ret
}

func void @test.testUnitMatch(int %0) {
  %1 := Eq int %0, 1
  branch %1, @3, @0
label @0:
  %2 := Eq int %0, 2
  branch %2, @3, @1
label @1:
  %3 := Eq int %0, 3
  branch %3, @2, @3
label @2:
  Call void @test.use<Int>(3)
  continue @3
label @3:
  Call void @test.use<Unit>()
  Ret
}

func void @test.testReturnBranch(int %0) {
  %1 := Eq int %0, 1
  branch %1, @1, @0
label @0:
  %2 := Eq int %0, 2
  branch %2, @1, @2
label @1:
  %3 := Phi int @test.testReturnBranch:1, @0:2
  Call void @test.use<Int>(%3)
  continue @2
label @2:
  Ret
}

func void @test.testReturnBlockBranch(int %0) {
  %1 := Eq int %0, 1
  branch %1, @1, @0
label @0:
  %2 := Eq int %0, 2
  branch %2, @1, @2
label @1:
  %3 := Phi int @test.testReturnBlockBranch:1, @0:2
  Call void @test.use<Int>(%3)
  continue @3
label @2:
  Call void @test.use<Bool>(true)
  continue @3
label @3:
  Ret
}

func void @test.testDivergentExpressionBranch(int %0) {
  %1 := Eq int %0, 1
  branch %1, @1, @0
label @0:
  %2 := Eq int %0, 2
  branch %2, @1, @2
label @1:
  %3 := Phi int @test.testDivergentExpressionBranch:1, @0:2
  Call void @test.use<Int>(%3)
  Ret
label @2:
  Call void myte.builtin.exit(1)
  unreachable
}

func void @test.testLoopDivergence(int %0) {
  branch true, @0, @3
label @0:
  %1 := Eq int %0, 1
  branch %1, @1, @2
label @1:
  Call void @test.use<Int>(1)
  continue @test.testLoopDivergence
label @2:
  %2 := Eq int %0, 2
  branch %2, @test.testLoopDivergence, @3
label @3:
  Ret
}

func void @test.use<Bool>(bool %0) {
  Ret
}

func void @test.use<Int>(int %0) {
  Ret
}

func void @test.use<Unit>() {
  Ret
}

func void @test.use<test.ZeroSize>() {
  Ret
}

func int @test.main() {
  Ret 0
}
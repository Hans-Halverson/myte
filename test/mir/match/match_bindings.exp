type $tuple<Int,(Int,Bool)> {int, $tuple<Int,Bool>*}

type $tuple<Int,Bool,(Int,(Int,Bool))> {int, bool, $tuple<Int,(Int,Bool)>*}

type $tuple<Int,Bool> {int, bool}

func int @test.test1(int %0) {
  Ret %0
}

func int @test.test2(int %0, bool %1) {
  %2 := Eq bool %1, true
  branch %2, @3, @0
label @0:
  branch %1, @2, @1
label @1:
  continue @2
label @2:
  %3 := Phi int @0:1, @1:2
  continue @3
label @3:
  %4 := Phi int @test.test2:%0, @2:%3
  Ret %4
}

func int @test.test3(int %0) {
  %1 := Eq int %0, 1
  branch %1, @2, @0
label @0:
  %2 := Eq int %0, 2
  branch %2, @2, @1
label @1:
  %3 := Add int %0, %0
  %4 := Add int %3, %0
  continue @2
label @2:
  %5 := Phi int @test.test3:1, @0:%0, @1:%4
  Ret %5
}

func int @test.test4(int %0, int %1, int %2) {
  %3 := Eq int %0, 1
  branch %3, @0, @3
label @0:
  %4 := Lt int %1, 4
  branch %4, @6, @1
label @1:
  %5 := Eq int %1, 1
  branch %5, @2, @5
label @2:
  %6 := Add int %0, %2
  %7 := Lt int %6, 5
  branch %7, @6, @5
label @3:
  %8 := Eq int %1, 1
  branch %8, @4, @5
label @4:
  %9 := Add int %0, %2
  %10 := Lt int %9, 5
  branch %10, @6, @5
label @5:
  continue @6
label @6:
  %11 := Phi int @0:1, @2:2, @5:3, @4:2
  Ret %11
}

func int @test.test5(int %0, int %1) {
  %2 := Eq int %1, 1
  branch %2, @1, @0
label @0:
  %3 := Eq int %0, 1
  branch %3, @1, @2
label @1:
  %4 := Phi int @test.test5:%0, @0:%1
  %5 := Add int %4, 2
  continue @2
label @2:
  %6 := Phi int @0:3, @1:%5
  Ret %6
}

func int @test.test6(int %0, int %1) {
  %2 := Eq int %0, 1
  branch %2, @2, @0
label @0:
  %3 := Eq int %1, 1
  branch %3, @2, @1
label @1:
  continue @2
label @2:
  %4 := Phi int @test.test6:1, @0:1, @1:2
  Ret %4
}

func int @test.test7($tuple<Int,Bool,(Int,(Int,Bool))>* %0) {
  %1 := GetPointer int, $tuple<Int,Bool,(Int,(Int,Bool))>* %0.0
  %2 := Load int %1
  %3 := Eq int %2, 1
  branch %3, @0, @1
label @0:
  %4 := GetPointer $tuple<Int,(Int,Bool)>*, $tuple<Int,Bool,(Int,(Int,Bool))>* %0.2
  %5 := Load $tuple<Int,(Int,Bool)>* %4
  %6 := GetPointer int, $tuple<Int,(Int,Bool)>* %5.0
  %7 := Load int %6
  continue @4
label @1:
  %8 := Eq int %2, 2
  branch %8, @2, @3
label @2:
  %9 := GetPointer $tuple<Int,(Int,Bool)>*, $tuple<Int,Bool,(Int,(Int,Bool))>* %0.2
  %10 := Load $tuple<Int,(Int,Bool)>* %9
  %11 := GetPointer int, $tuple<Int,(Int,Bool)>* %10.0
  %12 := Load int %11
  %13 := Add int %12, %12
  %14 := Add int %13, %12
  continue @4
label @3:
  %15 := GetPointer $tuple<Int,(Int,Bool)>*, $tuple<Int,Bool,(Int,(Int,Bool))>* %0.2
  %16 := Load $tuple<Int,(Int,Bool)>* %15
  %17 := GetPointer int, $tuple<Int,(Int,Bool)>* %16.0
  %18 := Load int %17
  %19 := GetPointer $tuple<Int,Bool>*, $tuple<Int,(Int,Bool)>* %16.1
  %20 := Load $tuple<Int,Bool>* %19
  %21 := GetPointer int, $tuple<Int,Bool>* %20.0
  %22 := Load int %21
  %23 := Add int %18, %22
  continue @4
label @4:
  %24 := Phi int @0:%7, @2:%14, @3:%23
  Ret %24
}

func int @test.test8(int %0) {
  %1 := Eq int %0, 1
  branch %1, @1, @0
label @0:
  %2 := Eq int %0, 2
  branch %2, @1, @2
label @1:
  continue @6
label @2:
  %3 := Eq int %0, 4
  branch %3, @5, @3
label @3:
  %4 := Eq int %0, 5
  branch %4, @5, @4
label @4:
  %5 := Eq int %0, 6
  branch %5, @5, @6
label @5:
  %6 := Add int %0, %0
  continue @6
label @6:
  %7 := Phi int @1:%0, @5:%6, @4:3
  Ret %7
}

func int @test.test9($tuple<Int,(Int,Bool)>* %0) {
  %1 := GetPointer $tuple<Int,Bool>*, $tuple<Int,(Int,Bool)>* %0.1
  %2 := Load $tuple<Int,Bool>* %1
  %3 := GetPointer int, $tuple<Int,Bool>* %2.0
  %4 := Load int %3
  %5 := Eq int %4, 1
  branch %5, @1, @0
label @0:
  %6 := Eq int %4, 2
  branch %6, @1, @2
label @1:
  continue @5
label @2:
  %7 := Eq int %4, 3
  branch %7, @4, @3
label @3:
  %8 := Eq int %4, 4
  branch %8, @4, @5
label @4:
  %9 := Add int %4, %4
  continue @5
label @5:
  %10 := Phi int @1:%4, @3:7, @4:%9
  Ret %10
}

func int @test.test10($tuple<Int,(Int,Bool)>* %0) {
  %1 := GetPointer $tuple<Int,Bool>*, $tuple<Int,(Int,Bool)>* %0.1
  %2 := Load $tuple<Int,Bool>* %1
  %3 := GetPointer int, $tuple<Int,Bool>* %2.0
  %4 := Load int %3
  %5 := Eq int %4, 1
  branch %5, @1, @0
label @0:
  %6 := Eq int %4, 2
  branch %6, @1, @2
label @1:
  continue @2
label @2:
  %7 := Phi int @0:7, @1:%4
  Ret %7
}

func int @test.test11(int %0) {
  %1 := Eq int %0, 1
  branch %1, @1, @0
label @0:
  %2 := Eq int %0, 2
  branch %2, @1, @2
label @1:
  continue @2
label @2:
  %3 := Phi int @0:7, @1:%0
  Ret %3
}

func void @test.use<Function>(fn %0) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.test1)
  Call void @test.use<Function>(@test.test2)
  Call void @test.use<Function>(@test.test3)
  Call void @test.use<Function>(@test.test4)
  Call void @test.use<Function>(@test.test5)
  Call void @test.use<Function>(@test.test6)
  Call void @test.use<Function>(@test.test7)
  Call void @test.use<Function>(@test.test8)
  Call void @test.use<Function>(@test.test9)
  Call void @test.use<Function>(@test.test10)
  Call void @test.use<Function>(@test.test11)
  Ret 0
}
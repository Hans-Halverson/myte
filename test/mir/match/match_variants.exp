type test.V1 {byte, byte[7]}

type test.V1::Tuple1 {byte, bool, byte[2], int}

type test.V1::Record1 {byte, byte, byte[2], int}

type test.V2 {byte, byte[15]}

type test.V2::Tuple2 {byte, bool, byte[6], test.V1*}

type test.V2::Record2 {byte, bool, byte[6], test.V2*}

func int @test.test1(test.V1* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 0
  branch %2, @2, @0
label @0:
  %3 := Eq byte %1, 2
  branch %3, @2, @1
label @1:
  continue @2
label @2:
  %4 := Phi int @test.test1:2, @0:3, @1:1
  Ret %4
}

func int @test.test2(test.V1* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 2
  branch %2, @0, @2
label @0:
  %3 := GetPointer int, test.V1::Record1* %0.3
  %4 := Load int %3
  %5 := Eq int %4, 2
  branch %5, @6, @1
label @1:
  %6 := GetPointer byte, test.V1::Record1* %0.1
  %7 := Load byte %6
  %8 := Eq byte %7, 2
  branch %8, @6, @5
label @2:
  %9 := Eq byte %1, 1
  branch %9, @3, @5
label @3:
  %10 := GetPointer int, test.V1::Tuple1* %0.3
  %11 := Load int %10
  %12 := Eq int %11, 4
  branch %12, @6, @4
label @4:
  %13 := GetPointer bool, test.V1::Tuple1* %0.1
  %14 := Load bool %13
  %15 := Eq bool %14, true
  branch %15, @6, @5
label @5:
  continue @6
label @6:
  %16 := Phi int @0:1, @1:3, @5:5, @3:2, @4:4
  Ret %16
}

func int @test.test3(test.V2* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 2
  branch %2, @0, @2
label @0:
  %3 := GetPointer test.V2*, test.V2::Record2* %0.3
  %4 := Load test.V2* %3
  %5 := Load byte %4
  %6 := Eq byte %5, 2
  branch %6, @1, @5
label @1:
  %7 := GetPointer test.V2*, test.V2::Record2* %4.3
  %8 := Load test.V2* %7
  %9 := Load byte %8
  %10 := Eq byte %9, 1
  branch %10, @6, @5
label @2:
  %11 := Eq byte %1, 0
  branch %11, @3, @5
label @3:
  %12 := GetPointer test.V1*, test.V2::Tuple2* %0.3
  %13 := Load test.V1* %12
  %14 := Load byte %13
  %15 := Eq byte %14, 1
  branch %15, @4, @5
label @4:
  %16 := GetPointer bool, test.V1::Tuple1* %13.1
  %17 := Load bool %16
  %18 := Eq bool %17, true
  branch %18, @6, @5
label @5:
  continue @6
label @6:
  %19 := Phi int @1:2, @5:3, @4:1
  Ret %19
}

func int @test.test4(test.V2* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 2
  branch %2, @0, @9
label @0:
  %3 := GetPointer test.V2*, test.V2::Record2* %0.3
  %4 := Load test.V2* %3
  %5 := Load byte %4
  %6 := Eq byte %5, 2
  branch %6, @1, @9
label @1:
  %7 := GetPointer test.V2*, test.V2::Record2* %4.3
  %8 := Load test.V2* %7
  %9 := Load byte %8
  %10 := Eq byte %9, 2
  branch %10, @2, @9
label @2:
  %11 := GetPointer test.V2*, test.V2::Record2* %8.3
  %12 := Load test.V2* %11
  %13 := Load byte %12
  %14 := Eq byte %13, 0
  branch %14, @3, @8
label @3:
  %15 := GetPointer test.V1*, test.V2::Tuple2* %12.3
  %16 := Load test.V1* %15
  %17 := Load byte %16
  %18 := Eq byte %17, 1
  branch %18, @4, @8
label @4:
  %19 := GetPointer bool, test.V1::Tuple1* %16.1
  %20 := Load bool %19
  %21 := Eq bool %20, true
  branch %21, @5, @8
label @5:
  %22 := GetPointer int, test.V1::Tuple1* %16.3
  %23 := Load int %22
  %24 := Eq int %23, 1
  branch %24, @9, @6
label @6:
  %25 := Eq int %23, 2
  branch %25, @9, @7
label @7:
  %26 := Eq int %23, 3
  branch %26, @9, @8
label @8:
  continue @9
label @9:
  %27 := Phi int @test.test4:3, @0:3, @1:3, @5:1, @6:1, @7:1, @8:2
  Ret %27
}

func int @test.test5(test.V1* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 0
  branch %2, @7, @0
label @0:
  %3 := Eq byte %1, 2
  branch %3, @1, @4
label @1:
  %4 := GetPointer int, test.V1::Record1* %0.3
  %5 := Load int %4
  %6 := GetPointer byte, test.V1::Record1* %0.1
  %7 := Load byte %6
  %8 := Eq byte %7, 1
  branch %8, @3, @2
label @2:
  %9 := SExt byte %7 to int
  continue @3
label @3:
  %10 := Phi int @1:%5, @2:%9
  continue @7
label @4:
  %11 := GetPointer bool, test.V1::Tuple1* %0.1
  %12 := Load bool %11
  %13 := GetPointer int, test.V1::Tuple1* %0.3
  %14 := Load int %13
  branch %12, @6, @5
label @5:
  continue @6
label @6:
  %15 := Phi int @4:%14, @5:2
  continue @7
label @7:
  %16 := Phi int @test.test5:3, @3:%10, @6:%15
  Ret %16
}

func test.V2* @test.test6(test.V2* %0) {
  %1 := Load byte %0
  %2 := Eq byte %1, 2
  branch %2, @0, @6
label @0:
  %3 := GetPointer test.V2*, test.V2::Record2* %0.3
  %4 := Load test.V2* %3
  %5 := Load byte %4
  %6 := Eq byte %5, 2
  branch %6, @1, @6
label @1:
  %7 := GetPointer test.V2*, test.V2::Record2* %4.3
  %8 := Load test.V2* %7
  %9 := Load byte %8
  %10 := Eq byte %9, 1
  branch %10, @7, @2
label @2:
  %11 := Eq byte %9, 2
  branch %11, @3, @6
label @3:
  %12 := GetPointer test.V2*, test.V2::Record2* %8.3
  %13 := Load test.V2* %12
  %14 := Load byte %13
  %15 := Eq byte %14, 2
  branch %15, @4, @6
label @4:
  %16 := GetPointer bool, test.V2::Record2* %13.1
  %17 := Load bool %16
  %18 := Eq bool %17, false
  branch %18, @7, @5
label @5:
  %19 := GetPointer test.V2*, test.V2::Record2* %13.3
  %20 := Load test.V2* %19
  continue @7
label @6:
  continue @7
label @7:
  %21 := Phi test.V2* @1:%8, @4:%4, @5:%20, @6:%0
  Ret %21
}

func int @test.test7(byte %0) {
  %1 := Eq byte %0, 0
  branch %1, @2, @0
label @0:
  %2 := Eq byte %0, 1
  branch %2, @2, @1
label @1:
  continue @2
label @2:
  %3 := Phi int @test.test7:5, @0:6, @1:7
  Ret %3
}

func void @test.use<Function>(fn %0) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.test1)
  Call void @test.use<Function>(@test.test2)
  Call void @test.use<Function>(@test.test3)
  Call void @test.use<Function>(@test.test4)
  Call void @test.use<Function>(@test.test5)
  Call void @test.use<Function>(@test.test6)
  Call void @test.use<Function>(@test.test7)
  Ret 0
}
func int @test.test1(std.string.String* %0) {
  %1 := CallBuiltin std.string.String* myte_alloc(1)
  %2 := GetPointer byte*, std.string.String* %1.0
  Store byte* %2, @.S0
  %3 := GetPointer int, std.string.String* %1.1
  Store int %3, 3
  %4 := GetPointer int, std.string.String* %1.2
  Store int %4, 3
  %5 := Call bool @std.string.String.equals(%0, %1)
  branch %5, @0, @1
label @0:
  continue @6
label @1:
  %6 := CallBuiltin std.string.String* myte_alloc(1)
  %7 := GetPointer byte*, std.string.String* %6.0
  Store byte* %7, @.S1
  %8 := GetPointer int, std.string.String* %6.1
  Store int %8, 3
  %9 := GetPointer int, std.string.String* %6.2
  Store int %9, 3
  %10 := Call bool @std.string.String.equals(%0, %6)
  branch %10, @2, @3
label @2:
  continue @6
label @3:
  %11 := CallBuiltin std.string.String* myte_alloc(1)
  %12 := GetPointer byte*, std.string.String* %11.0
  Store byte* %12, @.S2
  %13 := GetPointer int, std.string.String* %11.1
  Store int %13, 3
  %14 := GetPointer int, std.string.String* %11.2
  Store int %14, 3
  %15 := Call bool @std.string.String.equals(%0, %11)
  branch %15, @4, @5
label @4:
  continue @6
label @5:
  continue @6
label @6:
  %16 := Phi int @0:1, @2:2, @4:3, @5:4
  Ret %16
}

global byte[3] @.S0 = "foo"

global byte[3] @.S1 = "bar"

global byte[3] @.S2 = "baz"

func int @test.main() {
  Ret 0
}
module test

import std.sys.exit

fun testMatchExpressionBlockValues(test: Bool) {
  val x: Int = match (test) {
    | true -> {
      1
    }
    | false -> {
      2
    }
  };
  use(x);
}

fun testMatchStatementInExpressionPosition(test: Bool) {
  val x: Int = if (test) {
    match (test) {
      | true -> {
        1
      }
      | false -> 2
    }
  } else {
    3
  };
  use(x);
}

fun testNestedMatchAndIf(test: Bool) {
  val x: Int = if (test) {
    match (test) {
      | true -> {
        if (test) {
          match (test) {
            | true -> 1
            | false -> 2
          }
        } else {
          match (test) {
            | true -> 3
            | false -> 4
          }
        }
      }
      | false -> 5
    }
  } else {
    6
  };
  use(x);
}

type ZeroSize (Unit)

fun testZeroSizeMatch(test: Bool) {
  val x: ZeroSize = match (test) {
    | true -> {
      use(true);
      ZeroSize (())
    }
    | false -> {
      use(false);
      ZeroSize (())
    }
  };
  use(x);
}

fun testUnitMatch(test: Int) {
  val x: Unit = match (test) {
    | 1 -> ()
    | 2 -> { () }
    | 3 -> use(3)
    | _ -> {}
  };
  use(x);
}

fun testReturnBranch(test: Int) {
  val x: Int = match (test) {
    | 1 -> 1
    | 2 -> 2
    | _ -> return
  };
  use(x);
}

fun testReturnBlockBranch(test: Int) {
  val x: Int = match (test) {
    | 1 -> 1
    | 2 -> 2
    | _ -> {
      use(true);
      return;
    }
  };
  use(x);
}

fun testDivergentExpressionBranch(test: Int) {
  val x: Int = match (test) {
    | 1 -> 1
    | 2 -> 2
    | _ -> exit(1)
  };
  use(x);
}

fun testLoopDivergence(test: Int) {
  while (true) {
    val x: Int = match (test) {
      | 1 -> 1
      | 2 -> continue
      | _ -> break
    };
    use(x);
  }
}

fun use<T>(x: T) {}

fun main() {}
type $tuple<bool,bool> {bool, bool}

type $tuple<bool,int> {bool, int}

type $tuple<int,bool> {int, bool}

type $tuple<int,int> {int, int}

type test.NonGenericType1 {int}

func int @test.NonGenericType1.nongeneric(test.NonGenericType1* %0, int %1) {
  Ret %1
}

func bool @test.NonGenericType1.generic<bool>(test.NonGenericType1* %2, bool %3) {
  Ret %3
}

func int @test.NonGenericType1.generic<int>(test.NonGenericType1* %4, int %5) {
  Ret %5
}

func unit @test.testDirectNonGenericType(test.NonGenericType1* %6) {
  %7 := Call int @test.NonGenericType1.nongeneric(%6, 2)
  %8 := Call int @test.NonGenericType1.generic<int>(%6, 1)
  %9 := Call bool @test.NonGenericType1.generic<bool>(%6, false)
  Ret
}

type test.GenericType1<bool> {bool}

type test.GenericType1<int> {int}

func bool @test.GenericType1.nongeneric<bool>(test.GenericType1<bool>* %10, bool %11) {
  Ret %11
}

func int @test.GenericType1.nongeneric<int>(test.GenericType1<int>* %12, int %13) {
  Ret %13
}

func $tuple<bool,bool>* @test.GenericType1.generic<bool,bool>(test.GenericType1<bool>* %14, bool %15, bool %16) {
  %17 := CallBuiltin $tuple<bool,bool>* myte_alloc(1)
  %18 := GetPointer bool, $tuple<bool,bool>* %17.0
  Store bool %18, %15
  %19 := GetPointer bool, $tuple<bool,bool>* %17.1
  Store bool %19, %16
  Ret %17
}

func $tuple<bool,int>* @test.GenericType1.generic<bool,int>(test.GenericType1<bool>* %20, bool %21, int %22) {
  %23 := CallBuiltin $tuple<bool,int>* myte_alloc(1)
  %24 := GetPointer bool, $tuple<bool,int>* %23.0
  Store bool %24, %21
  %25 := GetPointer int, $tuple<bool,int>* %23.1
  Store int %25, %22
  Ret %23
}

func $tuple<int,bool>* @test.GenericType1.generic<int,bool>(test.GenericType1<int>* %26, int %27, bool %28) {
  %29 := CallBuiltin $tuple<int,bool>* myte_alloc(1)
  %30 := GetPointer int, $tuple<int,bool>* %29.0
  Store int %30, %27
  %31 := GetPointer bool, $tuple<int,bool>* %29.1
  Store bool %31, %28
  Ret %29
}

func $tuple<int,int>* @test.GenericType1.generic<int,int>(test.GenericType1<int>* %32, int %33, int %34) {
  %35 := CallBuiltin $tuple<int,int>* myte_alloc(1)
  %36 := GetPointer int, $tuple<int,int>* %35.0
  Store int %36, %33
  %37 := GetPointer int, $tuple<int,int>* %35.1
  Store int %37, %34
  Ret %35
}

func unit @test.testDirectGenericType(test.GenericType1<int>* %38, test.GenericType1<bool>* %39) {
  %40 := Call int @test.GenericType1.nongeneric<int>(%38, 1)
  %41 := Call bool @test.GenericType1.nongeneric<bool>(%39, true)
  %42 := Call $tuple<int,int>* @test.GenericType1.generic<int,int>(%38, 1, 1)
  %43 := Call $tuple<int,bool>* @test.GenericType1.generic<int,bool>(%38, 1, true)
  %44 := Call $tuple<bool,int>* @test.GenericType1.generic<bool,int>(%39, true, 1)
  %45 := Call $tuple<bool,bool>* @test.GenericType1.generic<bool,bool>(%39, true, true)
  Ret
}

func int @test.NonGenericTrait.nongeneric<test.NonGenericType2*>(test.NonGenericType2* %46, int %47) {
  Ret %47
}

func int @test.NonGenericTrait.generic<test.NonGenericType2*,int>(test.NonGenericType2* %48, int %49) {
  Ret %49
}

type test.NonGenericType2 {int}

func unit @test.testInheritedNonGenericTrait(test.NonGenericType2* %50) {
  %51 := Call int @test.NonGenericTrait.nongeneric<test.NonGenericType2*>(%50, 1)
  %52 := Call int @test.NonGenericTrait.generic<test.NonGenericType2*,int>(%50, 1)
  %53 := Call int @test.NonGenericTrait.generic<test.NonGenericType2*,int>(%50, 2)
  Ret
}

func bool @test.GenericTrait.nongeneric<test.GenericType2<bool>*,bool>(test.GenericType2<bool>* %54, bool %55) {
  Ret %55
}

func int @test.GenericTrait.nongeneric<test.GenericType2<int>*,int>(test.GenericType2<int>* %56, int %57) {
  Ret %57
}

func $tuple<bool,bool>* @test.GenericTrait.generic<test.GenericType2<bool>*,bool,bool>(test.GenericType2<bool>* %58, bool %59, bool %60) {
  %61 := CallBuiltin $tuple<bool,bool>* myte_alloc(1)
  %62 := GetPointer bool, $tuple<bool,bool>* %61.0
  Store bool %62, %59
  %63 := GetPointer bool, $tuple<bool,bool>* %61.1
  Store bool %63, %60
  Ret %61
}

func $tuple<bool,int>* @test.GenericTrait.generic<test.GenericType2<bool>*,bool,int>(test.GenericType2<bool>* %64, bool %65, int %66) {
  %67 := CallBuiltin $tuple<bool,int>* myte_alloc(1)
  %68 := GetPointer bool, $tuple<bool,int>* %67.0
  Store bool %68, %65
  %69 := GetPointer int, $tuple<bool,int>* %67.1
  Store int %69, %66
  Ret %67
}

func $tuple<int,bool>* @test.GenericTrait.generic<test.GenericType2<int>*,int,bool>(test.GenericType2<int>* %70, int %71, bool %72) {
  %73 := CallBuiltin $tuple<int,bool>* myte_alloc(1)
  %74 := GetPointer int, $tuple<int,bool>* %73.0
  Store int %74, %71
  %75 := GetPointer bool, $tuple<int,bool>* %73.1
  Store bool %75, %72
  Ret %73
}

func $tuple<int,int>* @test.GenericTrait.generic<test.GenericType2<int>*,int,int>(test.GenericType2<int>* %76, int %77, int %78) {
  %79 := CallBuiltin $tuple<int,int>* myte_alloc(1)
  %80 := GetPointer int, $tuple<int,int>* %79.0
  Store int %80, %77
  %81 := GetPointer int, $tuple<int,int>* %79.1
  Store int %81, %78
  Ret %79
}

type test.GenericType2<bool> {bool}

type test.GenericType2<int> {int}

func unit @test.testInheritedGenericTrait(test.GenericType2<int>* %82, test.GenericType2<bool>* %83) {
  %84 := Call int @test.GenericTrait.nongeneric<test.GenericType2<int>*,int>(%82, 1)
  %85 := Call bool @test.GenericTrait.nongeneric<test.GenericType2<bool>*,bool>(%83, true)
  %86 := Call $tuple<int,int>* @test.GenericTrait.generic<test.GenericType2<int>*,int,int>(%82, 1, 1)
  %87 := Call $tuple<int,bool>* @test.GenericTrait.generic<test.GenericType2<int>*,int,bool>(%82, 1, true)
  %88 := Call $tuple<bool,int>* @test.GenericTrait.generic<test.GenericType2<bool>*,bool,int>(%83, true, 1)
  %89 := Call $tuple<bool,bool>* @test.GenericTrait.generic<test.GenericType2<bool>*,bool,bool>(%83, true, true)
  Ret
}

func unit @test.use<fn>(fn %90) {
  Ret
}

func int @test.main() {
  %91 := Call unit @test.use<fn>(@test.testDirectNonGenericType)
  %92 := Call unit @test.use<fn>(@test.testDirectGenericType)
  %93 := Call unit @test.use<fn>(@test.testInheritedNonGenericTrait)
  %94 := Call unit @test.use<fn>(@test.testInheritedGenericTrait)
  Ret 0
}
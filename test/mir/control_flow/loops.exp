func unit @test.inexhaustiveContinue() {
  continue @0
label @0:
  %0 := Phi int @test.inexhaustiveContinue:1, @1:3, @2:4
  branch false, @1, @3
label @1:
  %1 := Gt int %0, 2
  branch %1, @0, @2
label @2:
  continue @0
label @3:
  %2 := Neg int %0
  Ret
}

func unit @test.inexhaustiveBreak() {
  continue @4
label @4:
  %3 := Phi int @test.inexhaustiveBreak:1, @5:4
  branch false, @5, @6
label @5:
  %4 := Gt int %3, 2
  branch %4, @6, @4
label @6:
  %5 := Phi int @4:%3, @5:3
  %6 := Neg int %5
  Ret
}

func unit @test.exhaustiveContinues() {
  continue @7
label @7:
  %7 := Phi int @test.exhaustiveContinues:1, @8:2, @9:3
  branch false, @8, @10
label @8:
  %8 := Gt int %7, 1
  branch %8, @7, @9
label @9:
  continue @7
label @10:
  %9 := Neg int %7
  Ret
}

func unit @test.exhaustiveBreaks() {
  branch false, @11, @13
label @11:
  %10 := Gt int 1, 1
  branch %10, @13, @12
label @12:
  continue @13
label @13:
  %11 := Phi int @test.exhaustiveBreaks:1, @11:2, @12:3
  %12 := Neg int %11
  Ret
}

func unit @test.inexhaustiveBreakAndContinue() {
  continue @14
label @14:
  %13 := Phi int @test.inexhaustiveBreakAndContinue:1, @16:4, @17:3
  branch false, @15, @18
label @15:
  %14 := Gt int %13, 1
  branch %14, @18, @16
label @16:
  branch true, @17, @14
label @17:
  continue @14
label @18:
  %15 := Phi int @14:%13, @15:2
  %16 := Neg int %15
  Ret
}

func unit @test.exhaustiveBreakAndContinue() {
  continue @19
label @19:
  %17 := Phi int @test.exhaustiveBreakAndContinue:1, @20:3
  branch false, @20, @21
label @20:
  %18 := Gt int %17, 1
  branch %18, @21, @19
label @21:
  %19 := Phi int @19:%17, @20:2
  %20 := Neg int %19
  Ret
}

func unit @test.use<fn>(fn %21) {
  Ret
}

func int @test.main() {
  %22 := Call unit @test.use<fn>(@test.inexhaustiveContinue)
  %23 := Call unit @test.use<fn>(@test.inexhaustiveBreak)
  %24 := Call unit @test.use<fn>(@test.exhaustiveContinues)
  %25 := Call unit @test.use<fn>(@test.exhaustiveBreaks)
  %26 := Call unit @test.use<fn>(@test.inexhaustiveBreakAndContinue)
  %27 := Call unit @test.use<fn>(@test.exhaustiveBreakAndContinue)
  Ret 0
}
func void @test.inexhaustiveContinue() {
  continue @0
label @0:
  %0 := Phi int @test.inexhaustiveContinue:1, @1:3, @2:4
  branch false, @1, @3
label @1:
  %1 := Gt int %0, 2
  branch %1, @0, @2
label @2:
  continue @0
label @3:
  %2 := Neg int %0
  Ret
}

func void @test.inexhaustiveBreak() {
  continue @0
label @0:
  %0 := Phi int @test.inexhaustiveBreak:1, @1:4
  branch false, @1, @2
label @1:
  %1 := Gt int %0, 2
  branch %1, @2, @0
label @2:
  %2 := Phi int @0:%0, @1:3
  %3 := Neg int %2
  Ret
}

func void @test.exhaustiveContinues() {
  continue @0
label @0:
  %0 := Phi int @test.exhaustiveContinues:1, @1:2, @2:3
  branch false, @1, @3
label @1:
  %1 := Gt int %0, 1
  branch %1, @0, @2
label @2:
  continue @0
label @3:
  %2 := Neg int %0
  Ret
}

func void @test.exhaustiveBreaks() {
  branch false, @0, @2
label @0:
  %0 := Gt int 1, 1
  branch %0, @2, @1
label @1:
  continue @2
label @2:
  %1 := Phi int @test.exhaustiveBreaks:1, @0:2, @1:3
  %2 := Neg int %1
  Ret
}

func void @test.inexhaustiveBreakAndContinue() {
  continue @0
label @0:
  %0 := Phi int @test.inexhaustiveBreakAndContinue:1, @2:3, @3:4
  branch false, @1, @4
label @1:
  %1 := Gt int %0, 1
  branch %1, @4, @2
label @2:
  branch true, @0, @3
label @3:
  continue @0
label @4:
  %2 := Phi int @0:%0, @1:2
  %3 := Neg int %2
  Ret
}

func void @test.exhaustiveBreakAndContinue() {
  continue @0
label @0:
  %0 := Phi int @test.exhaustiveBreakAndContinue:1, @1:3
  branch false, @1, @2
label @1:
  %1 := Gt int %0, 1
  branch %1, @2, @0
label @2:
  %2 := Phi int @0:%0, @1:2
  %3 := Neg int %2
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.inexhaustiveContinue)
  Call void @test.use<Function>(@test.inexhaustiveBreak)
  Call void @test.use<Function>(@test.exhaustiveContinues)
  Call void @test.use<Function>(@test.exhaustiveBreaks)
  Call void @test.use<Function>(@test.inexhaustiveBreakAndContinue)
  Call void @test.use<Function>(@test.exhaustiveBreakAndContinue)
  Ret 0
}
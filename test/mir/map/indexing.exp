func void @test.use<Function>(fn %0) {
  Ret
}

func void @test.use<Option<Byte>>(std.option.Option<Byte>* %1) {
  Ret
}

func void @test.testSimpleIndexing(std.map.Map<Bool,Byte>* %2) {
  %3 := Call std.option.Option<Byte>* @std.map.Map.get<Bool,Byte>(%2, true)
  Call void @test.use<Option<Byte>>(%3)
  Call void @std.map.Map.add<Bool,Byte>(%2, false, 2)
  Ret
}

type test.Rec1 {int, std.map.Map<Byte,String>*}

func void @test.testIndexAfterAccess(test.Rec1* %4, byte %5, std.string.String* %6) {
  %7 := GetPointer std.map.Map<Byte,String>*, test.Rec1* %4.1
  %8 := Load std.map.Map<Byte,String>* %7
  %9 := Call std.option.Option<String>* @std.map.Map.get<Byte,String>(%8, %5)
  %10 := GetPointer std.map.Map<Byte,String>*, test.Rec1* %4.1
  %11 := Load std.map.Map<Byte,String>* %10
  Call void @std.map.Map.add<Byte,String>(%11, %5, %6)
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testSimpleIndexing)
  Call void @test.use<Function>(@test.testIndexAfterAccess)
  Ret 0
}
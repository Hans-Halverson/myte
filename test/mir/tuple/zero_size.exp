type $tuple<Unit,Int,Unit,Unit,Bool> {int, bool}

func void @test.testZeroSizeTuple() {
  Call void @test.use<(Unit,Unit)>()
  Call void @test.use<Unit>()
  Call void @test.use<Unit>()
  Ret
}

func void @test.testTupleWithZeroSizeFields() {
  %0 := Call $tuple<Unit,Int,Unit,Unit,Bool>* myte.builtin.alloc(1)
  Call void @test.getUnit()
  %1 := GetPointer int, $tuple<Unit,Int,Unit,Unit,Bool>* %0.0
  Store int %1, 1
  Call void @test.id<Unit>()
  %2 := GetPointer bool, $tuple<Unit,Int,Unit,Unit,Bool>* %0.1
  Store bool %2, true
  Call void @test.use<(Unit,Int,Unit,Unit,Bool)>(%0)
  Call void @test.use<Unit>()
  %3 := GetPointer int, $tuple<Unit,Int,Unit,Unit,Bool>* %0.0
  %4 := Load int %3
  Call void @test.use<Int>(%4)
  Call void @test.use<Unit>()
  Call void @test.use<Unit>()
  %5 := GetPointer bool, $tuple<Unit,Int,Unit,Unit,Bool>* %0.1
  %6 := Load bool %5
  Call void @test.use<Bool>(%6)
  Ret
}

func void @test.getUnit() {
  Ret
}

func void @test.id<Unit>() {
  Ret
}

func void @test.use<(Unit,Int,Unit,Unit,Bool)>($tuple<Unit,Int,Unit,Unit,Bool>* %0) {
  Ret
}

func void @test.use<(Unit,Unit)>() {
  Ret
}

func void @test.use<Bool>(bool %0) {
  Ret
}

func void @test.use<Function>(fn %0) {
  Ret
}

func void @test.use<Int>(int %0) {
  Ret
}

func void @test.use<Unit>() {
  Ret
}

func int @test.main() {
  Call void @test.use<Function>(@test.testZeroSizeTuple)
  Call void @test.use<Function>(@test.testTupleWithZeroSizeFields)
  Ret 0
}
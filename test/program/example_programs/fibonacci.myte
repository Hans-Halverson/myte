module fibonacci

import std.io.{print, println}
import std.vec.Vec

fun fibRecursive(x: Int): Int {
  if (x <= 1) {
    return 1;
  } else {
    return fibRecursive(x - 1) + fibRecursive(x - 2);
  }
}

fun fibIterative(x: Int): Int {
  var current = 1;
  var prev = 1;

  for (i in x.stepDownTo(1, 1)) {
    val oldCurrent = current;
    current += prev;
    prev = oldCurrent;
  }

  return current;
}

fun fibDynamic(x: Int): Int {
  val table: Vec<Int> = Vec.new();
  table.push(1);
  table.push(1);

  for (i in 2.toInclusive(x)) {
    table.push(table[i - 1] + table[i - 2]);
  }

  return table[x];
}

fun printTestCase(func: (Int) -> Int, x: Int) {
  val result = func(x);

  println(`F(${x}) = ${result}`);
}

fun printAlgorithmTests(func: (Int) -> Int) {
  for (i in 0.toInclusive(10)) {
    printTestCase(func, i);
  }
}

fun main() {
  println("Iterative Algorithm:");
  printAlgorithmTests(fibIterative);
  println("");

  println("Recursive Algorithm:");
  printAlgorithmTests(fibRecursive);
  println("");

  println("Dynamic Programming Algorithm:");
  printAlgorithmTests(fibDynamic);
}
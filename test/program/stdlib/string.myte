module test

import std.iterator.Iterator
import std.ops.Equatable
import std.test.{assertEqual, fail}

fun nextIsNone<T>(iter: Iterator<T>) {
  match (iter.next()) {
    | None -> ()
    | Some _ -> fail()
  }
}

fun nextIs<T: Equatable>(iter: Iterator<T>, expected: T) {
  match (iter.next()) {
    | None -> fail()
    | Some (actual) -> assertEqual(actual, expected)
  }
}

fun testToString() {
  assertEqual("".toString(), "");
  assertEqual("foo".toString(), "foo");
}

fun testGet() {
  assertEqual("a".get(0), 97);
  assertEqual("bar".get(0), 98);
  assertEqual("bar".get(1), 97);
  assertEqual("bar".get(2), 114);
}

fun testSet() {
  val s = "aaaa";

  s.set(0, 98);
  assertEqual(s, "baaa");

  s.set(2, 99);
  assertEqual(s, "baca");

  s.set(2, 101);
  assertEqual(s, "baea");
}

fun testPush() {
  val s = "";

  s.push(98);
  assertEqual(s, "b");

  s.push(101);
  assertEqual(s, "be");

  s.push(100);
  s.push(98);
  assertEqual(s, "bedb");
}

fun testAppend() {
  val s = "";

  s.append("");
  assertEqual(s, "");

  s.append("foo");
  assertEqual(s, "foo");

  s.append("");
  assertEqual(s, "foo");

  s.append("b");
  assertEqual(s, "foob");

  s.append("ararar");
  assertEqual(s, "foobararar");
}

fun testReverse() {
  val s = "";
  s.reverse();
  assertEqual(s, "");

  val s = "foo";
  s.reverse();
  assertEqual(s, "oof");

  val s = "bacd";
  s.reverse();
  assertEqual(s, "dcab");
}

fun testSubstring() {
  assertEqual("".substring(0, 0), "");
  assertEqual("foo".substring(0, 0), "");
  assertEqual("foo".substring(1, 1), "");
  assertEqual("foo".substring(0, 2), "fo");
  assertEqual("foo".substring(0, 3), "foo");
  assertEqual("foo".substring(1, 2), "o");
  assertEqual("foo".substring(1, 3), "oo");
  assertEqual("foo".substring(2, 3), "o");
  assertEqual("foo".substring(2, 2), "");
}

fun testRepeat() {
  assertEqual(String.repeat("a", -1), "");
  assertEqual(String.repeat("a", 0), "");
  assertEqual(String.repeat("a", 1), "a");
  assertEqual(String.repeat("a", 4), "aaaa");
  assertEqual(String.repeat("foo", 3), "foofoofoo");
  assertEqual(String.repeat("", 0), "");
  assertEqual(String.repeat("", 3), "");
}

fun testJoin() {
  assertEqual(String.join("", []), "");
  assertEqual(String.join("", ["a", "b", "c"]), "abc");
  assertEqual(String.join("a", []), "");
  assertEqual(String.join(", ", ["a"]), "a");
  assertEqual(String.join(", ", ["a", "b"]), "a, b");
  assertEqual(String.join(", ", ["a", "b", "c"]), "a, b, c");
}

fun testClone() {
  val s = "";
  assertEqual(s, s.clone());

  val s = "kahsdfk";
  assertEqual(s, s.clone());
}

fun testHash() {
  assertEqual("foo".hash(), "foo".hash());
}

fun testBytesIterator() {
  // Empty iterator
  val iter = "".bytes();
  nextIsNone(iter);

  val iter = "foobar".bytes();
  nextIs(iter, 102);
  nextIs(iter, 111);
  nextIs(iter, 111);
  nextIs(iter, 98);
  nextIs(iter, 97);
  nextIs(iter, 114);
  nextIsNone(iter);
}

fun main() {
  testToString();
  testGet();
  testSet();
  testPush();
  testAppend();
  testReverse();
  testSubstring();
  testRepeat();
  testJoin();
  testClone();
  testHash();
  testBytesIterator();
}
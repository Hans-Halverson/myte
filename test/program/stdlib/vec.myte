module test

import std.test.{assertEqual, assertFalse, assertNone, assertSome, assertTrue, assertVecEqual}

fun intToString(x: Int): String = x.toString()

fun testPop() {
  val x: Vec<Int> = [];
  assertNone(x.pop());

  x.push(3);
  x.push(2);
  x.push(10);

  assertSome(x.pop(), 10);
  assertSome(x.pop(), 2);

  x.push(8);

  assertSome(x.pop(), 8);
  assertSome(x.pop(), 3);
  assertNone(x.pop());
}

fun testMap() {
  // Empty vector
  val x: Vec<Int> = [];
  val y = x.map(intToString);
  assertEqual(y.size, 0);

  // Vector has elements
  val x = [1, 2, 3];
  val y = x.map(intToString);
  assertEqual(y.size, 3);
  assertEqual(y[0], "1");
  assertEqual(y[1], "2");
  assertEqual(y[2], "3");
}

fun testIsEmpty() {
  val x: Vec<Int> = [];
  assertTrue(x.isEmpty());

  x.push(0);
  assertFalse(x.isEmpty());
}

fun testClone() {
  val x: Vec<Int> = [2, 4, 6];
  val y = x.clone();
  assertVecEqual(x, y);

  x.push(8);
  assertEqual(x.size, 4);
  assertEqual(y.size, 3);
}

fun testSlice() {
  val x: Vec<Int> = [2, 4, 6];
  assertVecEqual(([]: Vec<Int>).slice(0, 0), []);
  assertVecEqual(x.slice(0, 0), []);
  assertVecEqual(x.slice(1, 1), []);
  assertVecEqual(x.slice(0, 2), [2, 4]);
  assertVecEqual(x.slice(0, 3), [2, 4, 6]);
  assertVecEqual(x.slice(1, 2), [4]);
  assertVecEqual(x.slice(1, 3), [4, 6]);
  assertVecEqual(x.slice(2, 3), [6]);
  assertVecEqual(x.slice(2, 2), []);
}

fun main() {
  testPop();
  testMap();
  testIsEmpty();
  testClone();
  testSlice();
}
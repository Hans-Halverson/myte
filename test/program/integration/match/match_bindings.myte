module test

import std.test.assertEqual

// Test simple match case variables
fun match1(x: Int): Int =
  match (x) {
    | y -> y
  }

fun testMatch1() {
  assertEqual(match1(1), 1);
  assertEqual(match1(7689), 7689);
}

fun match2(x: Int, y: Bool): Int =
  match (x, y) {
    | (x, true) -> x
    | (_, y) -> if (y) { 1 } else { 2 }
  }

fun testMatch2() {
  assertEqual(match2(7, true), 7);
  assertEqual(match2(7, false), 2);
}

// Test binding patterns
fun match3(x: Int): Int =
  match (x) {
    | 1 -> 1
    | 2 as x -> x
    | (x as y as z) -> x + y + z
  }

fun testMatch3() {
  assertEqual(match3(1), 1);
  assertEqual(match3(2), 2);
  assertEqual(match3(3), 9);
}

// Test bindings with guard
fun match4(x: Int, y: Int, z: Int): Int =
  match (x, y, z) {
    | (1, a, _) when a < 4 -> 1
    | (a, 1, b) when a + b < 5 -> 2
    | _ -> 3
  }

fun testMatch4() {
  assertEqual(match4(1, 3, 4), 1);
  assertEqual(match4(1, 4, 5), 3);
  assertEqual(match4(2, 1, 2), 2);
  assertEqual(match4(2, 1, 3), 3);
  assertEqual(match4(-1, -1, -1), 3);
}

// Test bindings in or pattern
fun match5(x: Int, y: Int): Int =
  match (x, y) {
    | (x, 1) | (1, x) -> x + 2
    | _ -> 5
  }

fun testMatch5() {
  assertEqual(match5(1, 1), 3);
  assertEqual(match5(5, 1), 7);
  assertEqual(match5(1, 99), 101);
  assertEqual(match5(2, 2), 5);
 }

// Test bindings in or patterns with a guard
fun match6(x: Int, y: Int): Int =
  match (x, y) {
    | (x, _) | (_, x) when x == 1 -> 1
    | _ -> 2
  }

fun testMatch6() {
  assertEqual(match6(1, 1), 1);
  assertEqual(match6(5, 1), 1);
  assertEqual(match6(1, 99), 1);
  assertEqual(match6(2, 2), 2);
}

// Test destructuring bindings
fun match7(x: (Int, Bool, (Int, (Int, Bool)))): Int =
  match (x) {
    | (1, _, (_ as x, _)) -> x
    | (2, _, (_ as x as y as z, _)) -> x + y + z
    | (_, _, (x, _ as y)) -> x + y[0]
  }

fun testMatch7() {
  assertEqual(match7((1, true, (88, (2, true)))), 88);
  assertEqual(match7((2, true, (3, (2, true)))), 9);
  assertEqual(match7((3, true, (5, (6, true)))), 11);
}

// Test top level bindings on or patterns
fun match8(x: Int): Int =
  match (x) {
    | (1 | 2) as x -> x
    | (4 | (5 | 6)) as a as b -> a + b
    | _ -> 3
  }

fun testMatch8() {
  assertEqual(match8(1), 1);
  assertEqual(match8(2), 2);
  assertEqual(match8(4), 8);
  assertEqual(match8(5), 10);
  assertEqual(match8(6), 12);
  assertEqual(match8(3), 3);
  assertEqual(match8(7), 3);
}

// Test nested bindings on or patterns
fun match9(x: (Int, (Int, Bool))): Int =
  match (x) {
    | (_, (((1 | 2) as a), _)) -> a
    | (_, (((3 | 4) as a as b), _)) -> a + b
    | _ -> 7
  }

fun testMatch9() {
  assertEqual(match9((0, (1, true))), 1);
  assertEqual(match9((0, (2, true))), 2);
  assertEqual(match9((0, (3, true))), 6);
  assertEqual(match9((0, (4, true))), 8);
  assertEqual(match9((0, (5, true))), 7);
}

// Test bindings within nested or patterns
fun match10 (x: (Int, (Int, Bool))): Int =
  match (x) {
    | (_, ((1 as a | 2 as a), _)) -> a
    | _ -> 7
  }

fun testMatch10() {
  assertEqual(match10((0, (1, true))), 1);
  assertEqual(match10((0, (2, true))), 2);
  assertEqual(match10((0, (3, true))), 7);
}

// Test bindings within top level or patterns
fun match11 (x: Int): Int =
  match (x) {
    | (1 as a | 2 as a) -> a
    | _ -> 7
  }

fun testMatch11() {
  assertEqual(match11(1), 1);
  assertEqual(match11(2), 2);
  assertEqual(match11(3), 7);
}

fun main() {
  testMatch1();
  testMatch2();
  testMatch3();
  testMatch4();
  testMatch5();
  testMatch6();
  testMatch7();
  testMatch8();
  testMatch9();
  testMatch10();
  testMatch11();
}
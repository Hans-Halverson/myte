module test

import std.test.assertEqual

type Rec1 { foo: Int, bar: Byte }

type Rec2 { foo: Bool, bar: Rec1 }

type Rec3 { foo: Unit, bar: Unit }

type Rec4 { one: Int, two: Unit, three: Unit, four: Bool }

type Tup1 (String, Rec1)

fun id<T>(x: T): T = x

fun testAssignment() {
  val x = id(Rec1 { foo: 7, bar: 10 });
  assertEqual(x.foo, 7);
  assertEqual(x.bar, 10);

  x.foo = 9;
  x.bar = -7;
  assertEqual(x.foo, 9);
  assertEqual(x.bar, -7);

  x.foo += 2;
  assertEqual(x.foo, 11);
  assertEqual(x.bar, -7);
}

fun testNestedAssignment() {
  val x = id(Rec2 { foo: true, bar: Rec1 { foo: 7, bar: 10 } });
  assertEqual(x.bar.foo, 7);

  x.bar.foo = 11;
  assertEqual(x.bar.foo, 11);

  x.bar.foo -= -8;
  assertEqual(x.bar.foo, 19);
  assertEqual(x.bar.bar, 10);
}

fun testNestedAssignmentThroughTuple() {
  val x = id(Tup1 ("test", Rec1 { foo: 7, bar: 10 }));
  assertEqual(x[1].foo, 7);

  x[1].foo = 15;
  assertEqual(x[1].foo, 15);

  x[1].foo -= -8;
  assertEqual(x[1].foo, 23);
  assertEqual(x[1].bar, 10);
}

fun testSizeZeroAssignment() {
  // Entire record has size zero
  val x = Rec3 { foo: (), bar: () };
  assertEqual(x.foo, ());
  assertEqual(x.bar, ());

  x.foo = ();
  x.bar = ();
  assertEqual(x.foo, ());
  assertEqual(x.bar, ());

  // Some fields have size zero
  val x = Rec4 { one: 1, two: (), three: (), four: true };
  assertEqual(x.one, 1);
  assertEqual(x.two, ());
  assertEqual(x.three, ());
  assertEqual(x.four, true);

  x.one = 1000;
  x.three = ();
  x.four = false;
  assertEqual(x.one, 1000);
  assertEqual(x.two, ());
  assertEqual(x.three, ());
  assertEqual(x.four, false);
}

fun main() {
  testAssignment();
  testNestedAssignment();
  testNestedAssignmentThroughTuple();
  testSizeZeroAssignment();
}
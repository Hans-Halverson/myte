module myte.common.loc

import std.ops.Equatable
import std.string.ToString

// A range of bytes in a source file.
pub type Loc {
  // Name of source file.
  pub source: String,
  // The starting position of the range.
  pub start: Pos,
  // The ending position of the range. Locations are half open so this is one past the last
  // position included in the location.
  pub end: Pos,
}

// A single byte position in a source file.
pub type Pos {
  // The line number, starting at 1
  pub line: Int,
  // The column number within the given line, starting at 0
  pub column: Int,
}

pub val START_POS: Pos = Pos { line: 1, column: 0 }

methods Pos {
  implements Equatable

  pub override fun equals(other: Pos): Bool = this.line == other.line && this.column == other.column
}

methods Loc {
  pub static fun between(start: Loc, end: Loc): Loc =
    Loc { source: start.source, start: start.start, end: end.end }
  
  pub fun isAdjacentTo(next: Loc): Bool = this.end == next.start
}

methods Loc {
  implements ToString

  pub override fun toString(): String =
    if (this.start.line == this.end.line) {
      if (this.start.column == this.end.column - 1) {
        `${this.start.line}:${this.start.column}`
      } else {
        `${this.start.line}:${this.start.column}-${this.end.column}`
      }
    } else {
      `${this.start.line}:${this.start.column}-${this.end.line}:${this.end.column}`
    }
}
module myte.parse.token

import std.ops.Equatable
import std.string.ToString

import myte.parse.ast
import myte.parse.ast.utils.escapeCharLiteralValue

type Token =
  | Identifier (String)
  | IntLiteral { raw: String, base: ast.IntLiteralBase }
  | BoolLiteral (Bool)
  | StringLiteral (String)
  | CharLiteral (Byte)
  | Semicolon
  | Colon
  | Comma
  | Period
  | Equals
  | Pipe
  | Arrow
  | Plus
  | Minus
  | Multiply
  | Divide
  | Percent
  | Ampersand
  | Caret
  | Question
  | Bang
  | LeftParen
  | RightParen
  | LeftBrace
  | RightBrace
  | LeftBracket
  | RightBracket
  | DoubleEquals
  | NotEquals
  | LessThan
  | GreaterThan
  | LessThanOrEqual
  | GreaterThanOrEqual
  | LogicalAnd
  | LogicalOr
  | Wildcard
  | Val
  | Var
  | Fun
  | Type
  | Trait
  | While
  | Return
  | Break
  | Continue
  | Alias
  | Builtin
  | Module
  | Eof

methods Token {
  implements ToString

  override fun toString(): String =
    match (this) {
      | Identifier (name) -> name
      | BoolLiteral (bool) -> bool.toString()
      | IntLiteral { raw, ... } -> raw
      | StringLiteral (string) -> `"${string}"`
      | CharLiteral (char) -> escapeCharLiteralValue(char)
      | Semicolon -> ";"
      | Colon -> ":"
      | Comma -> ","
      | Period -> "."
      | Equals -> "="
      | Pipe -> "|"
      | Arrow -> "->"
      | Plus -> "+"
      | Minus -> "-"
      | Multiply -> "*"
      | Divide -> "/"
      | Percent -> "%"
      | Ampersand -> "&"
      | Caret -> "^"
      | Question -> "?"
      | Bang -> "!"
      | LeftParen -> "("
      | RightParen -> ")"
      | LeftBrace -> "{"
      | RightBrace -> "}"
      | LeftBracket -> "["
      | RightBracket -> "]"
      | DoubleEquals -> "=="
      | NotEquals -> "!="
      | LessThan -> "<"
      | GreaterThan -> ">"
      | LessThanOrEqual -> "<="
      | GreaterThanOrEqual -> ">="
      | LogicalAnd -> "&&"
      | LogicalOr -> "||"
      | Wildcard -> "_"
      | Val -> "val"
      | Var -> "var"
      | Fun -> "fun"
      | Type -> "type"
      | Trait -> "trait"
      | While -> "while"
      | Return -> "return"
      | Break -> "break"
      | Continue -> "continue"
      | Alias -> "alias"
      | Builtin -> "builtin"
      | Module -> "module"
      | Eof -> "<EOF>"
    }
}

methods Token {
  implements Equatable

  override fun equals(other: Token): Bool =
    match (this, other) {
      | (Identifier _, Identifier _)
      | (IntLiteral _, IntLiteral _)
      | (BoolLiteral _, BoolLiteral _)
      | (StringLiteral _, StringLiteral _)
      | (Semicolon, Semicolon)
      | (Colon, Colon)
      | (Comma, Comma)
      | (Period, Period)
      | (Equals, Equals)
      | (Pipe, Pipe)
      | (Arrow, Arrow)
      | (Plus, Plus)
      | (Minus, Minus)
      | (Multiply, Multiply)
      | (Divide, Divide)
      | (Percent, Percent)
      | (Ampersand, Ampersand)
      | (Caret, Caret)
      | (Question, Question)
      | (Bang, Bang)
      | (LeftParen, LeftParen)
      | (RightParen, RightParen)
      | (LeftBrace, LeftBrace)
      | (RightBrace, RightBrace)
      | (LeftBracket, LeftBracket)
      | (RightBracket, RightBracket)
      | (DoubleEquals, DoubleEquals)
      | (NotEquals, NotEquals)
      | (LessThan, LessThan)
      | (GreaterThan, GreaterThan)
      | (LessThanOrEqual, LessThanOrEqual)
      | (GreaterThanOrEqual, GreaterThanOrEqual)
      | (LogicalAnd, LogicalAnd)
      | (LogicalOr, LogicalOr)
      | (Wildcard, Wildcard)
      | (Val, Val)
      | (Var, Var)
      | (Fun, Fun)
      | (Type, Type)
      | (Trait, Trait)
      | (While, While)
      | (Return, Return)
      | (Break, Break)
      | (Continue, Continue)
      | (Alias, Alias)
      | (Builtin, Builtin)
      | (Module, Module)
      | (Eof, Eof) -> true
      | _ -> false
    }
}

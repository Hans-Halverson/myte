module myte.parse.ast

import myte.common.loc.Loc

type Module {
  loc: Loc,
  name: ModuleName,
  imports: Vec<Import>,
  toplevels: Vec<Toplevel>,
  source: String,
}

type ModuleName {
  loc: Loc,
  name: ScopedIdentifier,
}

type Import =
  | ISimpleImport (ScopedIdentifier)
  | IComplexImport (ComplexImport)

type ComplexImport {
  loc: Loc,
  scopes: Vec<Identifier>,
  aliases: Vec<ImportAlias>,
}

type ImportAlias {
  loc: Loc,
  name: Identifier,
  alias_: Option<Identifier>,
}

type Toplevel =
  | TLFunction (FunctionDeclaration)
  | TLVariable (VariableDeclaration)
  | TLType (TypeDeclaration)
  | TLTrait (TraitDeclaration)

type Identifier {
  loc: Loc,
  name: String,
}

type ScopedIdentifier {
  loc: Loc,
  scopes: Vec<Identifier>,
  name: Identifier,
}

/* 
 * ============================
 *        Declarations
 * ============================
 */

type FunctionDeclaration {
  loc: Loc,
  name: Identifier,
  params: Vec<FunctionParam>,
  body: FunctionBody,
  return_: Option<Type>,
  typeParams: Vec<TypeParameter>,
  isBuiltin: Bool,
  isStatic: Bool,
  isOverride: Bool,
}

type FunctionParam {
  loc: Loc,
  name: Identifier,
  annot: Type,
}

type FunctionBody =
  | FBBlock (Block)
  | FBExpression (Expression)
  | FBSignature

type TypeParameter {
  loc: Loc,
  name: Identifier,
  bounds: Vec<IdentifierType>,
}

type VariableDeclaration {
  loc: Loc,
  kind: VariableDeclarationKind,
  pattern: Pattern,
  init: Expression,
  annot: Option<Type>,
}

type VariableDeclarationKind =
  | Immutable
  | Mutable

type TypeDeclaration {
  loc: Loc,
  name: Identifier,
  typeParams: Vec<TypeParameter>,
  decl: TypeDecl,
}

type TypeDecl =
  | TDAlias (Type)
  | TDTuple (TupleDeclaration)
  | TDRecord (RecordDeclaration)
  | TDVariant (Vec<VariantDeclaration>)
  | TDBuiltin

type TupleDeclaration {
  loc: Loc,
  name: Identifier,
  elements: Vec<Type>,
}

type RecordDeclaration {
  loc: Loc,
  name: Identifier,
  fields: Vec<RecordDeclarationField>,
}

type RecordDeclarationField {
  loc: Loc,
  name: Identifier,
  type_: Type,
}

type VariantDeclaration =
  | TupleVariant (TupleDeclaration)
  | RecordVariant (RecordDeclaration)
  | EnumVariant (Identifier)

type TraitDeclaration {
  loc: Loc,
  kind: TraitDeclarationKind,
  name: Identifier,
  typeParams: Vec<TypeParameter>,
  implemented: Vec<IdentifierType>,
  methods_: Vec<FunctionDeclaration>,
}

type TraitDeclarationKind =
  | TKMethods
  | TKTrait

/* 
 * ============================
 *         Statements
 * ============================
 */

type Statement =
  | SBlock (Block)
  | SExpression (ExpressionStatement)
  | SVariableDeclaration (VariableDeclaration)
  | SIf (If)
  | SMatch (Match)
  | SWhile (While)
  | SFor (For)
  | SReturn (Return)
  | SBreak (Break)
  | SContinue (Continue)
  | SAssignment (Assignment)

type Block {
  loc: Loc,
  statements: Vec<Statement>,
}

type ExpressionStatement {
  loc: Loc,
  expr: Expression,
  isValue: Bool,
}

type If {
  loc: Loc,
  test: Expression,
  conseq: Block,
  altern: IfAltern,
}

type IfAltern =
  | Else (Block)
  | ElseIf (If)
  | NoAltern

type Match {
  loc: Loc,
  args: Vec<Expression>,
  cases: Vec<MatchCase>,
}

type MatchCase {
  loc: Loc,
  pattern: Pattern,
  guard: Option<Expression>,
  body: MatchCaseBody,
}

type MatchCaseBody =
  | MCExpression (Expression)
  | MCStatement (Statement)

type While {
  loc: Loc,
  test: Expression,
  body: Block,
}

type For {
  loc: Loc,
  pattern: Pattern,
  annot: Option<Type>,
  iterator: Expression,
  body: Block,
}

type Return {
  loc: Loc,
  arg: Option<Expression>,
}

type Break { loc: Loc }

type Continue { loc: Loc }

type Assignment {
  loc: Loc,
  op: Option<AssignmentOperation>,
  lvalue: AssignmentLvalue,
  expr: Expression,
}

type AssignmentOperation =
  | AssignAdd
  | AssignSubtract
  | AssignMultiply
  | AssignDivide
  | AssignRemainder
  | AssignBitwiseAnd
  | AssignBitwiseOr
  | AssignBitwiseXor
  | AssignLeftShift
  | AssignArithmeticRightShift
  | AssignLogicalRightShift

type AssignmentLvalue =
  | ALPattern (Pattern)
  | ALExpression (Expression)

/* 
 * ============================
 *        Expressions
 * ============================
 */

type Expression =
  | EUnitLiteral (UnitLiteral)
  | EIntLiteral (IntLiteral)
  | EBoolLiteral (BoolLiteral)
  | EStringLiteral (StringLiteral)
  | ECharLiteral (CharLiteral)
  | EInterpolatedString (InterpolatedString)
  | EIdentifier (Identifier)
  | EScopedIdentifier (ScopedIdentifier)
  | ETuple (TupleExpression)
  | ERecord (RecordExpression)
  | ETypeCast (TypeCast)
  | ECall (Call)
  | EUnaryOperation (UnaryOperation)
  | EBinaryOperation (BinaryOperation)
  | ELogicalAnd (LogicalAnd)
  | ELogicalOr (LogicalOr)
  | ENamedAccess (NamedAccess)
  | EIndexedAccess (IndexedAccess)
  | EUnwrap (Unwrap)
  | EIf (If)
  | EMatch (Match)
  | EVecLiteral (VecLiteral)
  | EMapLiteral (MapLiteral)
  | ESetLiteral (SetLiteral)
  | EAnonymousFunction (AnonymousFunction)

type UnitLiteral { loc: Loc }

type IntLiteral {
  loc: Loc,
  raw: String,
  base: IntLiteralBase,
}

type IntLiteralBase =
  | Dec
  | Bin
  | Hex

type BoolLiteral {
  loc: Loc,
  value: Bool,
}

type StringLiteral {
  loc: Loc,
  value: String,
}

type CharLiteral {
  loc: Loc,
  value: Byte,
}

type InterpolatedString {
  loc: Loc,
  parts: Vec<InterpolatedStringPart>,
}

type InterpolatedStringPart =
  | IPString (StringLiteral)
  | IPExpression (Expression)

type TupleExpression {
  loc: Loc,
  elements: Vec<Expression>,
}

type RecordExpression {
  loc: Loc,
  name: Expression,
  fields: Vec<RecordExpressionField>,
  // Needed for reparsing expressions as patterns. Record expressions cannot have a `...`.
  rest: Option<Loc>,
}

type RecordExpressionField {
  loc: Loc,
  name: Identifier,
  value: Option<Expression>,
}

type TypeCast {
  loc: Loc,
  expr: Expression,
  type_: Type,
}

type Call {
  loc: Loc,
  func: Expression,
  args: Vec<Expression>,
}

type UnaryOperation {
  loc: Loc,
  op: UnaryOperator,
  operand: Expression,
}

type UnaryOperator =
  | UnaryPlus
  | UnaryMinus
  | UnaryNot

type BinaryOperation {
  loc: Loc,
  op: BinaryOperator,
  left: Expression,
  right: Expression,
}

type BinaryOperator =
  | BinaryAdd
  | BinarySubtract
  | BinaryMultiply
  | BinaryDivide
  | BinaryRemainder
  | BinaryEqual
  | BinaryNotEqual
  | BinaryLessThan
  | BinaryGreaterThan
  | BinaryLessThanOrEqual
  | BinaryGreaterThanOrEqual
  | BinaryBitwiseAnd
  | BinaryBitwiseOr
  | BinaryBitwiseXor
  | BinaryLeftShift
  | BinaryArithmeticRightShift
  | BinaryLogicalRightShift

type LogicalAnd {
  loc: Loc,
  left: Expression,
  right: Expression,
}

type LogicalOr {
  loc: Loc,
  left: Expression,
  right: Expression,
}

type NamedAccess {
  loc: Loc,
  target: Expression,
  name: Identifier,
}

type IndexedAccess {
  loc: Loc,
  target: Expression,
  index: Expression,
}

type Unwrap {
  loc: Loc,
  operand: Expression,
}

type VecLiteral {
  loc: Loc,
  elements: Vec<Expression>,
}

type MapLiteral {
  loc: Loc,
  entries: Vec<MapLiteralEntry>,
}

type MapLiteralEntry {
  loc: Loc,
  key: Expression,
  value: Expression,
}

type SetLiteral {
  loc: Loc,
  elements: Vec<Expression>,
}

type AnonymousFunction {
  loc: Loc,
  params: Vec<AnonymousFunctionParam>,
  return_: Option<Type>,
  body: AnonymousFunctionBody,
}

type AnonymousFunctionParam {
  loc: Loc,
  name: Identifier,
  annot: Option<Type>,
}

type AnonymousFunctionBody =
  | ABBlock (Block)
  | ABExpression (Expression)

/* 
 * ============================
 *           Types
 * ============================
 */

type Type =
  | TIdentifier (IdentifierType)
  | TTuple (TupleType)
  | TFunction (FunctionType)
  | TTrait (TraitType)

type IdentifierType {
  loc: Loc,
  name: ScopedIdentifier,
  typeArgs: Vec<Type>,
}

type TupleType {
  loc: Loc,
  elements: Vec<Type>,
}

type FunctionType {
  loc: Loc,
  params: Vec<Type>,
  return_: Type,
}

type TraitType {
  loc: Loc,
  trait_: IdentifierType,
}

/* 
 * ============================
 *          Patterns
 * ============================
 */

type Pattern =
  | PIdentifier (ScopedIdentifier)
  | PWildcard (Loc)
  | PNamedWildcard (NamedWildcard)
  | PBinding (BindingPattern)
  | POr (OrPattern)
  | PTuple (TuplePattern)
  | PRecord (RecordPattern)
  | PLiteral (LiteralPattern)

type LiteralPattern =
  | PUnit (UnitLiteral)
  | PBool (BoolLiteral)
  | PInt (IntLiteral)
  | PChar (CharLiteral)
  | PString (StringLiteral)

type NamedWildcard {
  loc: Loc,
  name: ScopedIdentifier,
}

type OrPattern {
  loc: Loc,
  left: Pattern,
  right: Pattern,
}

type TuplePattern {
  loc: Loc,
  name: Option<ScopedIdentifier>,
  elements: Vec<Pattern>,
}

type RecordPattern {
  loc: Loc,
  name: ScopedIdentifier,
  fields: Vec<RecordPatternField>,
  rest: Bool,
}

type RecordPatternField {
  loc: Loc,
  name: Option<Identifier>,
  value: Pattern,
}

type BindingPattern {
  loc: Loc,
  pattern: Pattern,
  name: Identifier,
}

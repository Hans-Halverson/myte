module myte.parse.ast

import myte.common.loc.Loc

type Module {
  loc: Loc,
  name: ModuleName,
  toplevels: Vec<Toplevel>,
}

type ModuleName {
  loc: Loc,
  name: ScopedIdentifier,
}

type Toplevel =
  | TLFunction (FunctionDeclaration)
  | TLVariable (VariableDeclaration)
  | TLType (TypeDeclaration)

type Identifier {
  loc: Loc,
  name: String,
}

type ScopedIdentifier {
  loc: Loc,
  scopes: Vec<Identifier>,
  name: Identifier,
}

/*
 * Declarations
 */

type FunctionDeclaration {
  loc: Loc,
  name: Identifier,
  params: Vec<FunctionParam>,
  body: FunctionBody,
  ret: Option<Type>,
  typeParams: Vec<TypeParameter>,
  isBuiltin: Bool,
  isStatic: Bool,
  isOverride: Bool,
}

type FunctionParam {
  loc: Loc,
  name: Identifier,
  annot: Type,
}

type FunctionBody =
  | FBBlock (Block)
  | FBExpression (Expression)
  | FBSignature

type TypeParameter {
  loc: Loc,
  name: Identifier,
  bounds: Vec<IdentifierType>,
}

type VariableDeclaration {
  loc: Loc,
  kind: VariableDeclarationKind,
  pattern: ScopedIdentifier,
  init: Expression,
  annot: Option<Type>,
}

type VariableDeclarationKind =
  | Immutable
  | Mutable

type TypeDeclaration {
  loc: Loc,
  name: Identifier,
  typeParams: Vec<TypeParameter>,
  decl: TypeDecl,
}

type TypeDecl =
  | TDAlias (Type)
  | TDTuple (TupleDeclaration)
  | TDRecord (RecordDeclaration)
  | TDVariant (Vec<VariantDeclaration>)
  | TDBuiltin

type TupleDeclaration {
  loc: Loc,
  name: Identifier,
  elements: Vec<Type>,
}

type RecordDeclaration {
  loc: Loc,
  name: Identifier,
  fields: Vec<RecordDeclarationField>,
}

type RecordDeclarationField {
  loc: Loc,
  name: Identifier,
  ty: Type,
}

type VariantDeclaration =
  | TupleVariant (TupleDeclaration)
  | RecordVariant (RecordDeclaration)
  | EnumVariant (Identifier)

/*
 * Statements
 */

type Statement =
  | SBlock (Block)
  | SExpression (ExpressionStatement)
  | SVariableDeclaration (VariableDeclaration)
  | SWhile (While)
  | SReturn (Return)
  | SBreak (Break)
  | SContinue (Continue)

type Block {
  loc: Loc,
  statements: Vec<Statement>,
}

type ExpressionStatement {
  loc: Loc,
  expr: Expression,
  isValue: Bool,
}

type While {
  loc: Loc,
  test: Expression,
  body: Block,
}

type Return {
  loc: Loc,
  arg: Option<Expression>,
}

type Break { loc: Loc }

type Continue { loc: Loc }

/*
 * Expressions
 */

type Expression =
  | EUnitLiteral (UnitLiteral)
  | EIntLiteral (IntLiteral)
  | EBoolLiteral (BoolLiteral)
  | EStringLiteral (StringLiteral)
  | ECharLiteral (CharLiteral)
  | EIdentifier (Identifier)
  | ETuple (TupleExpression)
  | ETypeCast (TypeCast)
  | ECall (Call)
  | EUnaryOperation (UnaryOperation)
  | EBinaryOperation (BinaryOperation)
  | ELogicalAnd (LogicalAnd)
  | ELogicalOr (LogicalOr)
  | ENamedAccess (NamedAccess)
  | EIndexedAccess (IndexedAccess)
  | EUnwrap (Unwrap)

type UnitLiteral { loc: Loc }

type IntLiteral {
  loc: Loc,
  raw: String,
  base: IntLiteralBase,
}

type IntLiteralBase =
  | Dec
  | Bin
  | Hex

type BoolLiteral {
  loc: Loc,
  value: Bool,
}

type StringLiteral {
  loc: Loc,
  value: String,
}

type CharLiteral {
  loc: Loc,
  value: Byte,
}

type TupleExpression {
  loc: Loc,
  elements: Vec<Expression>,
}

type TypeCast {
  loc: Loc,
  expr: Expression,
  ty: Type,
}

type Call {
  loc: Loc,
  func: Expression,
  args: Vec<Expression>,
}

type UnaryOperation {
  loc: Loc,
  op: UnaryOperator,
  operand: Expression,
}

type UnaryOperator =
  | UnaryPlus
  | UnaryMinus
  | UnaryNot

type BinaryOperation {
  loc: Loc,
  op: BinaryOperator,
  left: Expression,
  right: Expression,
}

type BinaryOperator =
  | BinaryAdd
  | BinarySubtract
  | BinaryMultiply
  | BinaryDivide
  | BinaryRemainder
  | BinaryEqual
  | BinaryNotEqual
  | BinaryLessThan
  | BinaryGreaterThan
  | BinaryLessThanOrEqual
  | BinaryGreaterThanOrEqual
  | BinaryBitwiseAnd
  | BinaryBitwiseOr
  | BinaryBitwiseXor
  | BinaryLeftShift
  | BinaryArithmeticRightShift
  | BinaryLogicalRightShift

type LogicalAnd {
  loc: Loc,
  left: Expression,
  right: Expression,
}

type LogicalOr {
  loc: Loc,
  left: Expression,
  right: Expression,
}

type NamedAccess {
  loc: Loc,
  target: Expression,
  name: Identifier,
}

type IndexedAccess {
  loc: Loc,
  target: Expression,
  index: Expression,
}

type Unwrap {
  loc: Loc,
  operand: Expression,
}

/*
 * Types
 */

type Type =
  | TIdentifier (IdentifierType)
  | TTuple (TupleType)
  | TFunction (FunctionType)
  | TTrait (TraitType)

type IdentifierType {
  loc: Loc,
  name: ScopedIdentifier,
  typeArgs: Vec<Type>,
}

type TupleType {
  loc: Loc,
  elements: Vec<Type>,
}

type FunctionType {
  loc: Loc,
  params: Vec<Type>,
  return_: Type,
}

type TraitType {
  loc: Loc,
  trait_: IdentifierType,
}

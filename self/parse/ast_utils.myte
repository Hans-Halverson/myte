module myte.parse.ast.utils

import myte.common.loc.Loc
import myte.parse.ast

pub fun escapeCharLiteralValue(value: Byte): String =
  match (value) {
    | '"' -> "\""
    | '\'' -> "\\'"
    | '\\' -> "\\\\"
    | '\n' -> "\\n"
    | '\r' -> "\\r"
    | '\t' -> "\\t"
    | _ -> {
      val str = "";
      str.push(value);
      str
    }
  }

pub fun identifierToScopedIdentifier(ident: ast.Identifier): ast.ScopedIdentifier =
  ast.ScopedIdentifier { loc: ident.loc, scopes: [], name: ident }

pub fun scopedIdentifierParts(scopedId: ast.ScopedIdentifier): Vec<ast.Identifier> {
  val parts = scopedId.scopes.clone();
  parts.push(scopedId.name);

  return parts;
}

pub fun gatherPatternIdentifiers(pattern: ast.Pattern, ids: Vec<ast.Identifier>) =
  match (pattern) {
    | ast.PWildcard _
    | ast.PNamedWildcard _
    | ast.PLiteral _ -> ()
    | ast.PIdentifier (ast.ScopedIdentifier { name, scopes, ... }) when scopes.isEmpty() -> {
      ids.push(name);
    }
    | ast.PIdentifier _ -> ()
    | ast.PBinding (ast.BindingPattern { pattern, name, ... }) -> {
      ids.push(name);
      gatherPatternIdentifiers(pattern, ids);
    }
    | ast.POr (ast.OrPattern { left, right, ... }) -> {
      gatherPatternIdentifiers(left, ids);
      gatherPatternIdentifiers(right, ids);
    }
    | ast.PTuple (ast.TuplePattern { elements, ... }) -> {
      for (element in elements) {
        gatherPatternIdentifiers(element, ids);
      }
    }
    | ast.PRecord (ast.RecordPattern { fields, ... }) -> {
      for (ast.RecordPatternField { value, ... } in fields) {
        gatherPatternIdentifiers(value, ids);
      }
    }
  }

pub fun expressionLoc(expr: ast.Expression): Loc =
  match (expr) {
    | ast.EUnitLiteral (ast.UnitLiteral { loc })
    | ast.EIntLiteral (ast.IntLiteral { loc, ... })
    | ast.EFloatLiteral (ast.FloatLiteral { loc, ... })
    | ast.EBoolLiteral (ast.BoolLiteral { loc, ... })
    | ast.EStringLiteral (ast.StringLiteral { loc, ... })
    | ast.ECharLiteral (ast.CharLiteral { loc, ... })
    | ast.EInterpolatedString (ast.InterpolatedString { loc, ... })
    | ast.EIdentifier (ast.Identifier { loc, ... })
    | ast.EScopedIdentifier (ast.ScopedIdentifier { loc, ... })
    | ast.ETuple (ast.TupleExpression { loc, ... })
    | ast.ERecord (ast.RecordExpression { loc, ... })
    | ast.ETypeCast (ast.TypeCast { loc, ... })
    | ast.ECall (ast.Call { loc, ... })
    | ast.EUnaryOperation (ast.UnaryOperation { loc, ... })
    | ast.EBinaryOperation (ast.BinaryOperation { loc, ... })
    | ast.ELogicalAnd (ast.LogicalAnd { loc, ... })
    | ast.ELogicalOr (ast.LogicalOr { loc, ... })
    | ast.ENamedAccess (ast.NamedAccess { loc, ... })
    | ast.EIndexedAccess (ast.IndexedAccess { loc, ... })
    | ast.EUnwrap (ast.Unwrap { loc, ... })
    | ast.EIf (ast.If { loc, ... })
    | ast.EMatch (ast.Match { loc, ... })
    | ast.EVecLiteral (ast.VecLiteral { loc, ... })
    | ast.EMapLiteral (ast.MapLiteral { loc, ... })
    | ast.ESetLiteral (ast.SetLiteral { loc, ... })
    | ast.EAnonymousFunction (ast.AnonymousFunction { loc, ... }) ->
      loc
  }
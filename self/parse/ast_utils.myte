module myte.parse.ast.utils

import myte.common.loc.Loc
import myte.parse.ast

fun escapeCharLiteralValue(value: Byte): String =
  match (value) {
    | '"' -> "\""
    | '\'' -> "\\'"
    | '\\' -> "\\\\"
    | '\n' -> "\\n"
    | '\r' -> "\\r"
    | '\t' -> "\\t"
    | _ -> {
      val str = "";
      str.push(value);
      str
    }
  }

fun identifierToScopedIdentifier(ident: ast.Identifier): ast.ScopedIdentifier =
  ast.ScopedIdentifier { loc: ident.loc, scopes: [], name: ident }

fun expressionLoc(expr: ast.Expression): Loc =
  match (expr) {
    | ast.EUnitLiteral (ast.UnitLiteral { loc })
    | ast.EIntLiteral (ast.IntLiteral { loc, ... })
    | ast.EBoolLiteral (ast.BoolLiteral { loc, ... })
    | ast.EStringLiteral (ast.StringLiteral { loc, ... })
    | ast.ECharLiteral (ast.CharLiteral { loc, ... })
    | ast.EInterpolatedString (ast.InterpolatedString { loc, ... })
    | ast.EIdentifier (ast.Identifier { loc, ... })
    | ast.EScopedIdentifier (ast.ScopedIdentifier { loc, ... })
    | ast.ETuple (ast.TupleExpression { loc, ... })
    | ast.ERecord (ast.RecordExpression { loc, ... })
    | ast.ETypeCast (ast.TypeCast { loc, ... })
    | ast.ECall (ast.Call { loc, ... })
    | ast.EUnaryOperation (ast.UnaryOperation { loc, ... })
    | ast.EBinaryOperation (ast.BinaryOperation { loc, ... })
    | ast.ELogicalAnd (ast.LogicalAnd { loc, ... })
    | ast.ELogicalOr (ast.LogicalOr { loc, ... })
    | ast.ENamedAccess (ast.NamedAccess { loc, ... })
    | ast.EIndexedAccess (ast.IndexedAccess { loc, ... })
    | ast.EUnwrap (ast.Unwrap { loc, ... })
    | ast.EIf (ast.If { loc, ... })
    | ast.EMatch (ast.Match { loc, ... }) ->
      loc
  }
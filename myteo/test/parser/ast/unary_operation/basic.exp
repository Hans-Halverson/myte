test/parser/ast/unary_operation/basic.myte
{
  node: Module,
  loc: 1:0-10:1,
  module: {
    node: Module,
    loc: 1:0-1:11,
    name: {
      node: ScopedIdentifier,
      loc: 1:7-1:11,
      scopes: [],
      name: {
        node: Identifier,
        loc: 1:7-1:11,
        name: "Test",
      },
    },
  },
  imports: [],
  toplevels: [
    {
      node: Function,
      loc: 3:0-10:1,
      name: {
        node: Identifier,
        loc: 3:4-3:8,
        name: "main",
      },
      params: [],
      body: {
        node: Block,
        loc: 3:11-10:1,
        statements: [
          {
            node: ExpressionStatement,
            loc: 4:2-4:5,
            expression: {
              node: UnaryOperation,
              loc: 4:2-4:4,
              op: Plus,
              operand: {
                node: IntLiteral,
                loc: 4:3-4:4,
                raw: "1",
              },
            },
          },
          {
            node: ExpressionStatement,
            loc: 5:2-5:7,
            expression: {
              node: UnaryOperation,
              loc: 5:2-5:6,
              op: Minus,
              operand: {
                node: IntLiteral,
                loc: 5:4-5:5,
                raw: "1",
              },
            },
          },
          {
            node: ExpressionStatement,
            loc: 6:2-6:8,
            expression: {
              node: UnaryOperation,
              loc: 6:2-6:7,
              op: LogicalNot,
              operand: {
                node: BoolLiteral,
                loc: 6:3-6:7,
                value: true,
              },
            },
          },
          {
            node: ExpressionStatement,
            loc: 8:2-8:8,
            expression: {
              node: UnaryOperation,
              loc: 8:2-8:7,
              op: Plus,
              operand: {
                node: UnaryOperation,
                loc: 8:3-8:7,
                op: Minus,
                operand: {
                  node: IntLiteral,
                  loc: 8:5-8:6,
                  raw: "1",
                },
              },
            },
          },
          {
            node: ExpressionStatement,
            loc: 9:2-9:6,
            expression: {
              node: UnaryOperation,
              loc: 9:2-9:5,
              op: Minus,
              operand: {
                node: UnaryOperation,
                loc: 9:3-9:5,
                op: Plus,
                operand: {
                  node: IntLiteral,
                  loc: 9:4-9:5,
                  raw: "1",
                },
              },
            },
          },
        ],
      },
      return: None,
      type_params: [],
    },
  ],
}
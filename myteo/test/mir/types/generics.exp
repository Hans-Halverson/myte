type test.Tup1<test.Rec1<int,long>*> {int, test.Rec1<int,long>*}

type test.Tup1<int> {int, int}

type test.Tup1<byte> {int, byte}

type test.Tup1<bool> {int, bool}

func unit @test.useTup1(test.Tup1<int>* %0, test.Tup1<bool>* %1) {
  Ret
}

func unit @test.duplicateInstances(test.Tup1<int>* %2, test.Tup1<int>* %3) {
  Ret
}

type test.Rec1<test.Tup1<byte>*,long> {test.Tup1<byte>*, unit, long}

type test.Rec1<long,long> {long, unit, long}

type test.Rec1<int,long> {int, unit, long}

type test.Rec1<int,bool> {int, unit, bool}

func unit @test.useRec1(test.Rec1<int,bool>* %4, test.Rec1<long,long>* %5) {
  Ret
}

func unit @test.adtTypeArgs(test.Tup1<test.Rec1<int,long>*>* %6, test.Rec1<test.Tup1<byte>*,long>* %7) {
  Ret
}

type test.TestVec {long*, int, int}

func unit @test.useTestVec(test.TestVec* %8, test.TestVec* %9) {
  Ret
}

func unit @test.main() {
  Ret
}
type std.vec.Vec<int> {int*, int, int}

type std.vec.Vec<bool> {bool*, int, int}

func int @std.vec.Vec.get<int>(std.vec.Vec<int>* %0, int %1) {
  %2 := GetPointer int %0.1
  %3 := Load int %2
  %4 := GtEq int %1, %3
  branch %4, @0, @0
label @0:
  %5 := GetPointer int* %0.0
  %6 := Load int* %5
  %7 := GetPointer int %6[int %1]
  %8 := Load int %7
  Ret %8
}

func bool @std.vec.Vec.get<bool>(std.vec.Vec<bool>* %9, int %10) {
  %11 := GetPointer int %9.1
  %12 := Load int %11
  %13 := GtEq int %10, %12
  branch %13, @1, @1
label @1:
  %14 := GetPointer bool* %9.0
  %15 := Load bool* %14
  %16 := GetPointer bool %15[int %10]
  %17 := Load bool %16
  Ret %17
}

func unit @std.vec.Vec.set<int>(std.vec.Vec<int>* %18, int %19, int %20) {
  %21 := GetPointer int %18.1
  %22 := Load int %21
  %23 := GtEq int %19, %22
  branch %23, @2, @2
label @2:
  %24 := GetPointer int* %18.0
  %25 := Load int* %24
  %26 := GetPointer int %25[int %19]
  Store int %26, %20
  Ret
}

func unit @std.vec.Vec.set<bool>(std.vec.Vec<bool>* %27, int %28, bool %29) {
  %30 := GetPointer int %27.1
  %31 := Load int %30
  %32 := GtEq int %28, %31
  branch %32, @3, @3
label @3:
  %33 := GetPointer bool* %27.0
  %34 := Load bool* %33
  %35 := GetPointer bool %34[int %28]
  Store bool %35, %29
  Ret
}

func unit @std.vec.Vec.push<int>(std.vec.Vec<int>* %36, int %37) {
  %38 := GetPointer int %36.1
  %39 := Load int %38
  %40 := GetPointer int %36.2
  %41 := Load int %40
  %42 := Eq int %39, %41
  branch %42, @4, @5
label @4:
  %43 := Call unit @std.vec.Vec.resize<int>(%36)
  continue @5
label @5:
  %44 := GetPointer int* %36.0
  %45 := Load int* %44
  %46 := GetPointer int %36.1
  %47 := Load int %46
  %48 := GetPointer int %45[int %47]
  Store int %48, %37
  %49 := GetPointer int %36.1
  %50 := GetPointer int %36.1
  %51 := Load int %50
  %52 := Add int %51, 1
  Store int %49, %52
  Ret
}

func unit @std.vec.Vec.push<bool>(std.vec.Vec<bool>* %53, bool %54) {
  %55 := GetPointer int %53.1
  %56 := Load int %55
  %57 := GetPointer int %53.2
  %58 := Load int %57
  %59 := Eq int %56, %58
  branch %59, @6, @7
label @6:
  %60 := Call unit @std.vec.Vec.resize<bool>(%53)
  continue @7
label @7:
  %61 := GetPointer bool* %53.0
  %62 := Load bool* %61
  %63 := GetPointer int %53.1
  %64 := Load int %63
  %65 := GetPointer bool %62[int %64]
  Store bool %65, %54
  %66 := GetPointer int %53.1
  %67 := GetPointer int %53.1
  %68 := Load int %67
  %69 := Add int %68, 1
  Store int %66, %69
  Ret
}

func unit @std.vec.Vec.resize<int>(std.vec.Vec<int>* %70) {
  %71 := GetPointer int %70.2
  %72 := Load int %71
  %73 := Mov int %72
  %74 := Mul int %73, 2
  %75 := Mov int %74
  %76 := Eq int %75, 0
  branch %76, @8, @9
label @8:
  %77 := Mov int 1
  continue @9
label @9:
  %78 := Phi int @std.vec.Vec.resize<int>:%75, @8:%77
  %79 := GetPointer int %70.2
  Store int %79, %78
  %80 := CallBuiltin int* myte_alloc(%78)
  %81 := Mov int* %80
  %82 := GetPointer int* %70.0
  %83 := Load int* %82
  %84 := CallBuiltin unit myte_copy(%81, %83, %73)
  %85 := GetPointer int* %70.0
  Store int* %85, %81
  Ret
}

func unit @std.vec.Vec.resize<bool>(std.vec.Vec<bool>* %86) {
  %87 := GetPointer int %86.2
  %88 := Load int %87
  %89 := Mov int %88
  %90 := Mul int %89, 2
  %91 := Mov int %90
  %92 := Eq int %91, 0
  branch %92, @10, @11
label @10:
  %93 := Mov int 1
  continue @11
label @11:
  %94 := Phi int @std.vec.Vec.resize<bool>:%91, @10:%93
  %95 := GetPointer int %86.2
  Store int %95, %94
  %96 := CallBuiltin bool* myte_alloc(%94)
  %97 := Mov bool* %96
  %98 := GetPointer bool* %86.0
  %99 := Load bool* %98
  %100 := CallBuiltin unit myte_copy(%97, %99, %89)
  %101 := GetPointer bool* %86.0
  Store bool* %101, %97
  Ret
}

func unit @test.testVecGet(std.vec.Vec<int>* %102, std.vec.Vec<bool>* %103) {
  %104 := Call int @std.vec.Vec.get<int>(%102, 7)
  %105 := Call bool @std.vec.Vec.get<bool>(%103, 7)
  Ret
}

func unit @test.testVecSet(std.vec.Vec<int>* %106, std.vec.Vec<bool>* %107) {
  %108 := Call unit @std.vec.Vec.set<int>(%106, 7, 8)
  %109 := Call unit @std.vec.Vec.set<bool>(%107, 7, true)
  Ret
}

func unit @test.testVecPush(std.vec.Vec<int>* %110, std.vec.Vec<bool>* %111) {
  %112 := Call unit @std.vec.Vec.push<int>(%110, 1)
  %113 := Call unit @std.vec.Vec.push<bool>(%111, true)
  Ret
}

func unit @test.main() {
  Ret
}
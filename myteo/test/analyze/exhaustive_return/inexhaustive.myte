module Inexhaustive

fun test1(): int {}

fun test2(): int {
  1;
}

fun test3(): int {
  if (true) {
    1;
  }
}

fun test4(): int {
  if (true) {
    return 1;
  }
}

fun test5(): int {
  if (true) {
    return 1;
  } else {
    2;
  }
}

fun test6(): int {
  if (true) {
    1;
  } else {
    return 2;
  }
}

fun test7(): int {
  val x = 1;
}

fun test8(): int {
  fun bar(): int = 1
}

fun test9(): int {
  fun bar(): int {}
  return 1;
}

fun test10(): int {
  fun bar(): int {
    fun baz(): int {}
    return 1;
  }
  return 2;
}

fun testWhile1(): int {
  while (true) {}
}

fun testWhile2(): int {
  while (true) {
    return 1;
  }
}

fun testMatchSingleCase(): int {
  val _ = 1;
  match (1) {
    | _ -> 1
  }
}

fun testMatchMultipleCases(): int {
  val _ = 1;
  match (1) {
    | _ -> return 1
    | _ -> 2
    | _ -> return 3
  }
}

fun testMatchNested(): int {
  val _ = 1;
  match (1) {
    | _ -> return 1
    | _ -> match (2) {
      | _ -> return 2
      | _ -> 3
    }
  }
}
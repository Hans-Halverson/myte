module test

import c1
import {c1 as c1Alias}

import d1.d2
import d1.{d2 as d2Alias}

// Valid export is correctly converted to scoped id
type alias t1 = (a1.ExportType, a1.ExportVariant)
type alias t2 = a1.a2.ExportType

// Valid export which has empty module tree parents
type alias t3 = b1.b2.b3.ExportType

// Valid export which are children of module imports
type alias t4 = c1.ExportType
type alias t5 = c1Alias.ExportType
type alias t6 = d2.ExportType
type alias t7 = d2Alias.ExportType

// Names resolved in all type declarations
type t8 (a1.ExportType)
type t9 { a: a1.ExportType }
type t10 = Foo (a1.ExportType) | Bar { a: a1.ExportType }

fun test() {
  var x: int = 1;

  // Valid export is correctly converted to scoped id
  a1.export;
  a1.a2.export;
  a1.EnumVariant;
  a1.TupleVariant(1);
  a1.RecordVariant { field: 1 };

  // Accesses on exports are preserved
  a1.export.child;
  a1.export.child1.child2;
  a1.a2.export.child;
  a1.a2.export.child1.child2;
  a1.export.ExportType (x) = 1;
  a1.a2.export.ExportType { field: x } = 1;

  // Valid export which has empty module tree parents
  b1.b2.b3.export;
  b1.b2.b3.Tup (x) = 1;

  // Valid exports which are children of module imports
  c1.export;
  c1.export.child;
  c1Alias.export;
  c1Alias.export.child;
  d2.export;
  d2.export.child;
  d2Alias.export;
  d2Alias.export.child;
  c1.Bar (x) = 1;
  c1Alias.Bar (x) = 1;
  d2.Rec { child: x } = 1;
  d2Alias.Rec { child: x } = 1;
}

fun main() {}
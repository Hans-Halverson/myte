module test

// Destructuring simple patterns

fun anonymousTuple() {
  val (x, y, z): (Int, String, Bool) = (1, "", true);

  (x: Int);
  (y: String);
  (z: Bool);

  // Display all type names
  ((x, y, z): Unit);
}

type Tup (Int, String, Bool)

fun namedTuple() {
  val Tup (x, y, z): Tup = Tup (1, "", true);

  (x: Int);
  (y: String);
  (z: Bool);

  // Display all type names
  ((x, y, z): Unit);
}

type Rec { field1: Int, field2: String, field3: Bool }

fun record() {
  val Rec { field1: x, field2: y, field3 }: Rec = Rec { field1: 1, field2: "", field3: true };

  (x: Int);
  (y: String);
  (field3: Bool);

  // Display all type names
  ((x, y, field3): Unit);
}

// Destructuring nested patterns

fun nestedPatterns1() {
  val (a, (b, c)): (Int, (String, Bool)) = (1, ("", true));
  (a: Int);
  (b: String);
  (c: Bool);

  val (d, e): (Int, (String, Bool)) = (1, ("", true));
  (d: Int);
  (e: (String, Bool));
}

type Tup2 ((Int, String), Bool)
type Rec2 { field1: Int, field2: Tup2 }

fun nestedPatterns2(rec2: Rec2) {
  val Rec2 { field1, field2: Tup2 ((x, y), z) }: Rec2 = rec2;
  (field1: Int);
  (x: Int);
  (y: String);
  (z: Bool);

  val Rec2 { field1: _, field2 }: Rec2 = rec2;
  (field2: Tup2);
}

// Errors

fun typeMismatchErrors() {
  // Type mismatch on annotation
  val (a, b): Int = 1;

  // Type mismatch on overall pattern
  val (c, d): (Int, String) = 1;

  // Type mismatch on subpattern
  val (e, f): (Int, String) = (1, 1);
}

fun main() {}
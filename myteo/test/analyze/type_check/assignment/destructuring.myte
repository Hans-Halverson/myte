module test

fun anonymousTuple() {
  var x: Int = 1;
  var y: String = "";

  // Success
  (x, y) = (1, "");

  // Type mismatch on overall pattern
  (x, y) = 1;

  // Type mismatch on subpattern
  (x, y) = (1, 1);
}

type Tup (Int, String, Bool)

fun namedTuple() {
  var x: Int = 1;
  var y: String = "";
  var z: Bool = true;
  Tup (x, y, z) = Tup (1, "", true);
}

type Rec { field1: Int, field2: String, field3: Bool }

fun record() {
  var x: Int = 1;
  var y: String = "";
  var field3: Bool = true;
  Rec { field1: x, field2: y, field3 } = Rec { field1: 1, field2: "", field3: true };
}

fun nestedPatterns1() {
  var a: Int = 1;
  var b: String = "";
  var c: Bool = true;
  (a, (b, c)) = (1, ("", true));

  var d: Int = 1;
  var e: (String, Bool) = ("", true);
  (d, e) = (1, ("", true));
}

type Tup2 ((Int, String), Bool)
type Rec2 { field1: Int, field2: Tup2 }

fun nestedPatterns2(rec2: Rec2) {
  var field1: Int = 1;
  var x: Int = 1;
  var y: String = "";
  var z: Bool = true;
  Rec2 { field1, field2: Tup2 ((x, y), z) } = rec2;

  var field2: Tup2 = Tup2 ((1, ""), true);
  Rec2 { field1: _, field2 } = rec2;
}

fun main() {}
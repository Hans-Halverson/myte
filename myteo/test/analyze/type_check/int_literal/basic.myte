module test

fun useInt(x: Int) {}
fun useByte(x: Byte) {}
fun useLong(x: Long) {}
fun useUnit(x: Unit) {}

fun localInference() {
  // Literals can be inferred as any integer type
  val x1 = 1;
  useInt(x1);

  val x2 = 1;
  useByte(x2);

  val x3 = 1;
  useLong(x3);
}

fun localInferenceConflict() {
  // Inferred as conflicting integer types
  val x = 1;
  useInt(x);
  useByte(x);
  useLong(x);

  // Integer type used as non-integer
  val y = 1;
  useUnit(y);
}

fun localInferenceThroughUnaryExpression() {
  val x1 = 1;
  (-(-x1): Int);

  val x2 = 1;
  (-(-x2): Byte);

  val x3 = 1;
  (-(-x3): Long);
}

fun localInferenceThroughBinaryExpression() {
  val x1 = 1;
  (x1 + 1: Int);

  val x2 = 1;
  (x2 + 1: Byte);

  val x3 = 1;
  (x3 + 1: Long);
}

fun conflictingBinaryExpression() {
  val x: Int = 1;
  val y: Byte = 1;
  val z: Long = 1;

  x + y;
  x + z;
  y + z;
}

fun main() {}
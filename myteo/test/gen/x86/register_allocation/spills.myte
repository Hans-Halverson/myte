module test

fun cond(): Bool = true
fun use(x: Int): Int = x

fun testSingleSpillUsingAllRegisters(p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int, p16: Int): Int {
  val p7 = p1 + p2;
  val p8 = p1 + p3;
  val p9 = p1 + p4;
  val p10 = p1 + p5;
  val p11 = p1 + p6;
  val p12 = p2 + p3;
  val p13 = p2 + p4;
  val p14 = p2 + p5;

  // Spill
  val p15 = p2 + p6;

  return p1 + p2 + p3 + p4 + p5 + p6 + p7 + p8 + p9 + p10 + p11 + p12 + p13 + p14 + p15 + p16;
}

fun testCallerSavedRegistersSpilledAcrossFunctionCalls(p1: Int, p2: Int, p3: Int, p4: Int, p5: Int, p6: Int): Int {
  // There aren't enough callee saved registers so one parameter must be spilled
  use(3);
  return p1 + p2 + p3 + p4 + p5 + p6;
}

fun testSingleSpillUsingAllRegistersFromLocals(): Int {
  val cond = cond();
  var x1 = 1;
  var x2 = 2;
  var x3 = 3;
  var x4 = 4;
  var x5 = 5;
  var x6 = 6;
  var x7 = 7;
  var x8 = 8;
  var x9 = 9;
  var x10 = 10;
  var x11 = 11;
  var x12 = 12;
  var x13 = 13;
  var x14 = 14;

  if (cond) {
    x1 = 101;
    x2 = 102;
    x3 = 103;
    x4 = 104;
    x5 = 105;
    x6 = 106;
    x7 = 107;
    x8 = 108;
    x9 = 109;
    x10 = 110;
    x11 = 111;
    x12 = 112;
    x13 = 113;
    x14 = 114;
  }

  return x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9 + x10 + x11 + x12 + x13 + x14;
}

fun main(): Int {
  return testSingleSpillUsingAllRegisters(1, 2, 3, 4, 5, 6, 16); // Returns 88
}
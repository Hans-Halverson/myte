  .global _start

  .text
test.buildOption$bool$:
  push %rbx
  movb %dil, %bl
  movl $1, %edi
  call __myte_alloc
  movb %bl, (%rax)
  pop %rbx
  ret
test.buildOption$int$:
  push %rbx
  movl %edi, %ebx
  movl $4, %edi
  call __myte_alloc
  movl %ebx, (%rax)
  pop %rbx
  ret
test.buildOption$long$:
  push %rbx
  movq %rdi, %rbx
  movl $8, %edi
  call __myte_alloc
  movq %rbx, (%rax)
  pop %rbx
  ret
test.buildPair$bool$bool$:
  push %rbx
  push %r12
  movb %dil, %r12b
  movb %sil, %bl
  movl $2, %edi
  call __myte_alloc
  movb %r12b, (%rax)
  movb %bl, 1(%rax)
  pop %r12
  pop %rbx
  ret
test.buildPair$bool$int$:
  push %rbx
  push %r12
  movb %dil, %r12b
  movl %esi, %ebx
  movl $8, %edi
  call __myte_alloc
  movb %r12b, (%rax)
  movl %ebx, 4(%rax)
  pop %r12
  pop %rbx
  ret
test.buildPair$int$int$:
  push %rbx
  push %r12
  movl %edi, %r12d
  movl %esi, %ebx
  movl $8, %edi
  call __myte_alloc
  movl %r12d, (%rax)
  movl %ebx, 4(%rax)
  pop %r12
  pop %rbx
  ret
_main:
  ret
test.testSingleTypeArg:
  movb $1, %dil
  call test.buildOption$bool$
  movl $5, %edi
  call test.buildOption$int$
  movq $6, %rdi
  call test.buildOption$long$
  ret
test.testTwoTypeArgs:
  movl $1, %edi
  movl $1, %esi
  call test.buildPair$int$int$
  movb $1, %dil
  movl $1, %esi
  call test.buildPair$bool$int$
  movb $1, %dil
  movb $1, %sil
  call test.buildPair$bool$bool$
  ret
_start:
  call __myte_init
  call _main
  ret
  .global _main

  .text
_main:
  ret
test.testCompareImmediateMemory:
  cmpq $3, 8(%rsp)
  jne .L0
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  sete %rax
  ret
.L0:
  cmpq $3, 8(%rsp)
  je .L1
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  setne %rax
  ret
.L1:
  cmpq $3, 8(%rsp)
  jl .L2
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  setge %rax
  ret
.L2:
  cmpq $3, 8(%rsp)
  jle .L3
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  setg %rax
  ret
.L3:
  cmpq $3, 8(%rsp)
  jg .L4
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  setle %rax
  ret
.L4:
  cmpq $3, 8(%rsp)
  jge .L5
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  setl %rax
  ret
.L5:
  movq $1, %rax
  ret
test.testCompareImmediateRegister:
  cmpq $3, %rdi
  jne .L6
  xor %rax, %rax
  cmpq $3, %rdi
  sete %rax
  ret
.L6:
  cmpq $3, %rdi
  je .L7
  xor %rax, %rax
  cmpq $3, %rdi
  setne %rax
  ret
.L7:
  cmpq $3, %rdi
  jl .L8
  xor %rax, %rax
  cmpq $3, %rdi
  setge %rax
  ret
.L8:
  cmpq $3, %rdi
  jle .L9
  xor %rax, %rax
  cmpq $3, %rdi
  setg %rax
  ret
.L9:
  cmpq $3, %rdi
  jg .L10
  xor %rax, %rax
  cmpq $3, %rdi
  setle %rax
  ret
.L10:
  cmpq $3, %rdi
  jge .L11
  xor %rax, %rax
  cmpq $3, %rdi
  setl %rax
  ret
.L11:
  movq $1, %rax
  ret
test.testCompareMemoryImmediate:
  cmpq $3, 8(%rsp)
  jne .L12
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  sete %rax
  ret
.L12:
  cmpq $3, 8(%rsp)
  je .L13
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  setne %rax
  ret
.L13:
  cmpq $3, 8(%rsp)
  jge .L14
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  setl %rax
  ret
.L14:
  cmpq $3, 8(%rsp)
  jg .L15
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  setle %rax
  ret
.L15:
  cmpq $3, 8(%rsp)
  jle .L16
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  setg %rax
  ret
.L16:
  cmpq $3, 8(%rsp)
  jl .L17
  xor %rax, %rax
  cmpq $3, 8(%rsp)
  setge %rax
  ret
.L17:
  movq $1, %rax
  ret
test.testCompareMemoryMemory:
  mov 8(%rsp), %rcx
  cmp 16(%rsp), %rcx
  jne .L18
  xor %rax, %rax
  mov 8(%rsp), %rax
  cmp 16(%rsp), %rax
  sete %rax
  ret
.L18:
  mov 8(%rsp), %rcx
  cmp 16(%rsp), %rcx
  je .L19
  xor %rax, %rax
  mov 8(%rsp), %rax
  cmp 16(%rsp), %rax
  setne %rax
  ret
.L19:
  mov 8(%rsp), %rcx
  cmp 16(%rsp), %rcx
  jge .L20
  xor %rax, %rax
  mov 8(%rsp), %rax
  cmp 16(%rsp), %rax
  setl %rax
  ret
.L20:
  mov 8(%rsp), %rcx
  cmp 16(%rsp), %rcx
  jg .L21
  xor %rax, %rax
  mov 8(%rsp), %rax
  cmp 16(%rsp), %rax
  setle %rax
  ret
.L21:
  mov 8(%rsp), %rcx
  cmp 16(%rsp), %rcx
  jle .L22
  xor %rax, %rax
  mov 8(%rsp), %rax
  cmp 16(%rsp), %rax
  setg %rax
  ret
.L22:
  mov 8(%rsp), %rcx
  cmp 16(%rsp), %rcx
  jl .L23
  xor %rax, %rax
  mov 8(%rsp), %rax
  cmp 16(%rsp), %rax
  setge %rax
  ret
.L23:
  movq $1, %rax
  ret
test.testCompareMemoryRegister:
  cmp %rdi, 8(%rsp)
  jne .L24
  xor %rax, %rax
  cmp %rdi, 8(%rsp)
  sete %rax
  ret
.L24:
  cmp %rdi, 8(%rsp)
  je .L25
  xor %rax, %rax
  cmp %rdi, 8(%rsp)
  setne %rax
  ret
.L25:
  cmp %rdi, 8(%rsp)
  jge .L26
  xor %rax, %rax
  cmp %rdi, 8(%rsp)
  setl %rax
  ret
.L26:
  cmp %rdi, 8(%rsp)
  jg .L27
  xor %rax, %rax
  cmp %rdi, 8(%rsp)
  setle %rax
  ret
.L27:
  cmp %rdi, 8(%rsp)
  jle .L28
  xor %rax, %rax
  cmp %rdi, 8(%rsp)
  setg %rax
  ret
.L28:
  cmp %rdi, 8(%rsp)
  jl .L29
  xor %rax, %rax
  cmp %rdi, 8(%rsp)
  setge %rax
  ret
.L29:
  movq $1, %rax
  ret
test.testCompareRegisterImmediate:
  cmpq $3, %rdi
  jne .L30
  xor %rax, %rax
  cmpq $3, %rdi
  sete %rax
  ret
.L30:
  cmpq $3, %rdi
  je .L31
  xor %rax, %rax
  cmpq $3, %rdi
  setne %rax
  ret
.L31:
  cmpq $3, %rdi
  jge .L32
  xor %rax, %rax
  cmpq $3, %rdi
  setl %rax
  ret
.L32:
  cmpq $3, %rdi
  jg .L33
  xor %rax, %rax
  cmpq $3, %rdi
  setle %rax
  ret
.L33:
  cmpq $3, %rdi
  jle .L34
  xor %rax, %rax
  cmpq $3, %rdi
  setg %rax
  ret
.L34:
  cmpq $3, %rdi
  jl .L35
  xor %rax, %rax
  cmpq $3, %rdi
  setge %rax
  ret
.L35:
  movq $1, %rax
  ret
test.testCompareRegisterMemory:
  cmp 8(%rsp), %rdi
  jne .L36
  xor %rax, %rax
  cmp 8(%rsp), %rdi
  sete %rax
  ret
.L36:
  cmp 8(%rsp), %rdi
  je .L37
  xor %rax, %rax
  cmp 8(%rsp), %rdi
  setne %rax
  ret
.L37:
  cmp 8(%rsp), %rdi
  jge .L38
  xor %rax, %rax
  cmp 8(%rsp), %rdi
  setl %rax
  ret
.L38:
  cmp 8(%rsp), %rdi
  jg .L39
  xor %rax, %rax
  cmp 8(%rsp), %rdi
  setle %rax
  ret
.L39:
  cmp 8(%rsp), %rdi
  jle .L40
  xor %rax, %rax
  cmp 8(%rsp), %rdi
  setg %rax
  ret
.L40:
  cmp 8(%rsp), %rdi
  jl .L41
  xor %rax, %rax
  cmp 8(%rsp), %rdi
  setge %rax
  ret
.L41:
  movq $1, %rax
  ret
test.testCompareRegisterRegister:
  cmp %rsi, %rdi
  jne .L42
  xor %rax, %rax
  cmp %rsi, %rdi
  sete %rax
  ret
.L42:
  cmp %rsi, %rdi
  je .L43
  xor %rax, %rax
  cmp %rsi, %rdi
  setne %rax
  ret
.L43:
  cmp %rsi, %rdi
  jge .L44
  xor %rax, %rax
  cmp %rsi, %rdi
  setl %rax
  ret
.L44:
  cmp %rsi, %rdi
  jg .L45
  xor %rax, %rax
  cmp %rsi, %rdi
  setle %rax
  ret
.L45:
  cmp %rsi, %rdi
  jle .L46
  xor %rax, %rax
  cmp %rsi, %rdi
  setg %rax
  ret
.L46:
  cmp %rsi, %rdi
  jl .L47
  xor %rax, %rax
  cmp %rsi, %rdi
  setge %rax
  ret
.L47:
  movq $1, %rax
  ret
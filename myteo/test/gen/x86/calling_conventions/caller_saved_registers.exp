  .global _main

  .text
test.callerSavedRegistersSavedAcrossFunctionCalls:
  push %rbx
  push %r12
  push %r13
  push %r14
  push %r15
  movl %edi, %r15d
  movl %esi, %r14d
  movl %edx, %r13d
  movl %ecx, %r12d
  movl %r8d, %ebx
  movl $3, %edi
  call test.use
  movl %r14d, %eax
  addl %r15d, %eax
  movl %r13d, %ecx
  addl %eax, %ecx
  movl %r12d, %edx
  addl %ecx, %edx
  movl %ebx, %eax
  addl %edx, %eax
  pop %r15
  pop %r14
  pop %r13
  pop %r12
  pop %rbx
  ret
test.callerSavedRegistersSavedAcrossFunctionCallsWithSpills:
  push %rbx
  push %r12
  push %r13
  push %r14
  push %r15
  subl $32, %esp
  movl %edi, %r15d
  movl %esi, 32(%rsp)
  movl %edx, 24(%rsp)
  movl %ecx, 16(%rsp)
  movl %r8d, 8(%rsp)
  movl %r9d, %r14d
  movl $1, %r13d
  movl $2, %ebx
  movl $3, %r12d
  cmpl $1, %r15d
  jne .L0
  movl $101, %r13d
  movl $102, %ebx
  movl $103, %r12d
  jmp .L1
.L0:
.L1:
  movl $3, %edi
  call test.use
  addl %r13d, %ebx
  addl %ebx, %r12d
  addl %r12d, %r15d
  movl 32(%rsp), %eax
  addl %r15d, %eax
  movl 24(%rsp), %ebx
  addl %eax, %ebx
  movl 16(%rsp), %eax
  addl %ebx, %eax
  movl 8(%rsp), %ebx
  addl %eax, %ebx
  addl %ebx, %r14d
  movl %r14d, %eax
  addl $32, %esp
  pop %r15
  pop %r14
  pop %r13
  pop %r12
  pop %rbx
  ret
_main:
  ret
test.testDefaultToCalleeSaveRegistersIfAcrossFunctionCall:
  push %rbx
  push %r12
  movl $1, %r12d
  movl $2, %ebx
  testb %dil, %dil
  je .L2
  movl $101, %r12d
  movl $102, %ebx
  jmp .L3
.L2:
.L3:
  movl $3, %edi
  call test.use
  movl %r12d, %edi
  call test.use
  movl %ebx, %edi
  call test.use
  pop %r12
  pop %rbx
  ret
test.testDefaultToCallerSaveRegisters:
  movl $1, %r11d
  movl $2, %r10d
  movl $3, %r9d
  movl $4, %r8d
  movl $5, %edi
  movl $6, %edx
  movl $7, %ecx
  movl $8, %eax
  testb %sil, %sil
  je .L4
  movl $101, %r11d
  movl $102, %r10d
  movl $103, %r9d
  movl $104, %r8d
  movl $105, %edi
  movl $106, %edx
  movl $107, %ecx
  movl $108, %eax
  jmp .L5
.L4:
.L5:
  addl %r11d, %r10d
  addl %r10d, %r9d
  addl %r9d, %r8d
  addl %r8d, %edi
  addl %edi, %edx
  addl %edx, %ecx
  addl %ecx, %eax
  ret
test.use:
  movl %edi, %eax
  ret
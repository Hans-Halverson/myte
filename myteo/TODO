# Errors
- Add non-fatal parse errors with recovery
- Parse recovery at statement bounds?
- Make missing parens around if test have unique error message, and support recovery
- Extra locs and help shown in errors
  - For inexhaustive return, show func decl as well with label, or point to if statement/branch that is inexhaustive
  - For unreachable statement after return, show loc of return as well?
  - For multiple main functions, show both
- Enforce initialization order for globals
- Enforce what expressions can appear in global initializers

# Features
- Ternary Operator
- For loops (traditional, for-each)
- Do while loops
- Labels for break and continue
- Vecs, maps, and sets
- Arrays and bitwise ops?
- Anonymous Functions (fn x -> x)
- Lex negative numbers
- Floating point numbers
- Hex/octal/binary representations, unicode encodings
- Tuples
- Algebraic data types
- Destructuring
- Optional/None type
- Indexing into collections
- Pattern matching (syntax with optional: "| ?a -> 1" or "| ?(a, b) -> 1")
- Pattern matching exhaustiveness checking
- Unused variable errors/warnings
- Errors vs warnings
- Allow mutually recursive adjacent functions in a block

# FUN IDEAS
- MACROS (e.g. defined as functions that operate on the source ast and output another ast)

# Full Pipeline
- Parsing (In Progress)
- Structural Analysis (In Progress)
- Type Checking (In Progress)
- IR Generation (In Progress)
- Compile IR (TODO)
  - Convert to LLVM IR
  - Custom convert to x86 or ARM assembly
  - Convert to bytecode and write VM
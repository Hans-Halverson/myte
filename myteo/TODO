## Current List
- Optimize single element tuples or records to unwrapped values
- Ternary operator type checking
- Correct array GetElement accesses - allow for value types (agg literals)
- Create reference vs value types (potentially <2 words is a value type, anything mutable is ref)
- Parse and type check anonymous functions
- Implement signed and unsigned integers
- Implement conversion functions between built in types (like integer types)
- Guarantee 16-byte stack alignment for x64 at calls

## Old List

# Errors
- Add non-fatal parse errors with recovery
- Parse recovery at statement bounds?
- Make missing parens around if test have unique error message, and support recovery
- Extra locs and help shown in errors
  - For inexhaustive return, show func decl as well with label, or point to if statement/branch that is inexhaustive
  - For unreachable statement after return, show loc of return as well?
  - For multiple main functions, show both
- Enforce initialization order for globals
- Enforce what expressions can appear in global initializers

# Features
- For loops (traditional, for-each)
- Do while loops
- Labels for break and continue
- Vecs, maps, and sets
- Anonymous Functions (fn x -> x)
- Floating point numbers
- unicode encodings
- Algebraic data types
  - Tuples
  - Named tuples
  - Named records
  - Tagged unions
  - ADT methods
- Match statements/expressions
  - Exhaustiveness checking
  - Counterexample shown in error
- Classes (with this = type in block syntax, restricted to simple records)
- Traits (with extends keyword, multiple inheritance, sigs, interface keyword)
- Destructuring
- Optional/None type
- Indexing into collections
- Pattern matching (syntax with optional: "| ?a -> 1" or "| ?(a, b) -> 1")
- Pattern matching exhaustiveness checking
- Unused variable errors/warnings
- Errors vs warnings
- Allow mutually recursive adjacent functions in a block

# FUN IDEAS
- MACROS (e.g. defined as functions that operate on the source ast and output another ast)

# Full Pipeline
- Parsing (In Progress)
- Structural Analysis (In Progress)
- Type Checking (In Progress)
- IR Generation (In Progress)
- Compile IR (TODO)
  - LLVM IR backend
  - custom x86-64 backend
  - custom arm64 backend
  - custom wasm backend
  - Convert to bytecode and write VM